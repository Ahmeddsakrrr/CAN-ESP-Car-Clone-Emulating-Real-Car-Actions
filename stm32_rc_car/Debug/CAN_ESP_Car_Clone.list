
CAN_ESP_Car_Clone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055c4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080056d4  080056d4  000156d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005748  08005748  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005748  08005748  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005748  08005748  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005748  08005748  00015748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800574c  0800574c  0001574c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001adc  20000010  08005760  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001aec  08005760  00021aec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019090  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d6a  00000000  00000000  000390c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001598  00000000  00000000  0003be38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014a8  00000000  00000000  0003d3d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002a03  00000000  00000000  0003e878  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001089d  00000000  00000000  0004127b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000957f1  00000000  00000000  00051b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e7309  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c14  00000000  00000000  000e7384  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080056bc 	.word	0x080056bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080056bc 	.word	0x080056bc

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fc50 	bl	80009f8 <HAL_Init>
  /* SALMA END */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f81e 	bl	8000198 <SystemClock_Config>
  /* SALMA END */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f9b2 	bl	80004c4 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000160:	f000 f904 	bl	800036c <MX_TIM3_Init>
  MX_I2C1_Init();
 8000164:	f000 f860 	bl	8000228 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000168:	f000 f982 	bl	8000470 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800016c:	f000 f88a 	bl	8000284 <MX_TIM1_Init>
  /* SALMA END */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000170:	f002 fdd2 	bl	8002d18 <osKernelInitialize>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000174:	4a05      	ldr	r2, [pc, #20]	; (800018c <main+0x3c>)
 8000176:	2100      	movs	r1, #0
 8000178:	4805      	ldr	r0, [pc, #20]	; (8000190 <main+0x40>)
 800017a:	f002 fe33 	bl	8002de4 <osThreadNew>
 800017e:	4602      	mov	r2, r0
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <main+0x44>)
 8000182:	601a      	str	r2, [r3, #0]
  /* SALMA END */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000184:	f002 fdfa 	bl	8002d7c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000188:	e7fe      	b.n	8000188 <main+0x38>
 800018a:	bf00      	nop
 800018c:	0800570c 	.word	0x0800570c
 8000190:	08000589 	.word	0x08000589
 8000194:	20001934 	.word	0x20001934

08000198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b090      	sub	sp, #64	; 0x40
 800019c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800019e:	f107 0318 	add.w	r3, r7, #24
 80001a2:	2228      	movs	r2, #40	; 0x28
 80001a4:	2100      	movs	r1, #0
 80001a6:	4618      	mov	r0, r3
 80001a8:	f005 fa7f 	bl	80056aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	2200      	movs	r2, #0
 80001b0:	601a      	str	r2, [r3, #0]
 80001b2:	605a      	str	r2, [r3, #4]
 80001b4:	609a      	str	r2, [r3, #8]
 80001b6:	60da      	str	r2, [r3, #12]
 80001b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ba:	2301      	movs	r3, #1
 80001bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001c4:	2300      	movs	r3, #0
 80001c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c8:	2301      	movs	r3, #1
 80001ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001cc:	2302      	movs	r3, #2
 80001ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001d6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001dc:	f107 0318 	add.w	r3, r7, #24
 80001e0:	4618      	mov	r0, r3
 80001e2:	f000 ffc5 	bl	8001170 <HAL_RCC_OscConfig>
 80001e6:	4603      	mov	r3, r0
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d001      	beq.n	80001f0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001ec:	f000 f9e3 	bl	80005b6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f0:	230f      	movs	r3, #15
 80001f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001f4:	2302      	movs	r3, #2
 80001f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f8:	2300      	movs	r3, #0
 80001fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000200:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000202:	2300      	movs	r3, #0
 8000204:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	2102      	movs	r1, #2
 800020a:	4618      	mov	r0, r3
 800020c:	f001 fa30 	bl	8001670 <HAL_RCC_ClockConfig>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d001      	beq.n	800021a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000216:	f000 f9ce 	bl	80005b6 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800021a:	f001 fb13 	bl	8001844 <HAL_RCC_EnableCSS>
}
 800021e:	bf00      	nop
 8000220:	3740      	adds	r7, #64	; 0x40
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
	...

08000228 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800022c:	4b12      	ldr	r3, [pc, #72]	; (8000278 <MX_I2C1_Init+0x50>)
 800022e:	4a13      	ldr	r2, [pc, #76]	; (800027c <MX_I2C1_Init+0x54>)
 8000230:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000232:	4b11      	ldr	r3, [pc, #68]	; (8000278 <MX_I2C1_Init+0x50>)
 8000234:	4a12      	ldr	r2, [pc, #72]	; (8000280 <MX_I2C1_Init+0x58>)
 8000236:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000238:	4b0f      	ldr	r3, [pc, #60]	; (8000278 <MX_I2C1_Init+0x50>)
 800023a:	2200      	movs	r2, #0
 800023c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800023e:	4b0e      	ldr	r3, [pc, #56]	; (8000278 <MX_I2C1_Init+0x50>)
 8000240:	2200      	movs	r2, #0
 8000242:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000244:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <MX_I2C1_Init+0x50>)
 8000246:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800024a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800024c:	4b0a      	ldr	r3, [pc, #40]	; (8000278 <MX_I2C1_Init+0x50>)
 800024e:	2200      	movs	r2, #0
 8000250:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000252:	4b09      	ldr	r3, [pc, #36]	; (8000278 <MX_I2C1_Init+0x50>)
 8000254:	2200      	movs	r2, #0
 8000256:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000258:	4b07      	ldr	r3, [pc, #28]	; (8000278 <MX_I2C1_Init+0x50>)
 800025a:	2200      	movs	r2, #0
 800025c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800025e:	4b06      	ldr	r3, [pc, #24]	; (8000278 <MX_I2C1_Init+0x50>)
 8000260:	2200      	movs	r2, #0
 8000262:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000264:	4804      	ldr	r0, [pc, #16]	; (8000278 <MX_I2C1_Init+0x50>)
 8000266:	f000 fe4b 	bl	8000f00 <HAL_I2C_Init>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000270:	f000 f9a1 	bl	80005b6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000274:	bf00      	nop
 8000276:	bd80      	pop	{r7, pc}
 8000278:	20001938 	.word	0x20001938
 800027c:	40005400 	.word	0x40005400
 8000280:	000186a0 	.word	0x000186a0

08000284 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b08a      	sub	sp, #40	; 0x28
 8000288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800028a:	f107 0318 	add.w	r3, r7, #24
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	605a      	str	r2, [r3, #4]
 8000294:	609a      	str	r2, [r3, #8]
 8000296:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000298:	f107 0310 	add.w	r3, r7, #16
 800029c:	2200      	movs	r2, #0
 800029e:	601a      	str	r2, [r3, #0]
 80002a0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80002a2:	463b      	mov	r3, r7
 80002a4:	2200      	movs	r2, #0
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	605a      	str	r2, [r3, #4]
 80002aa:	609a      	str	r2, [r3, #8]
 80002ac:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002ae:	4b2d      	ldr	r3, [pc, #180]	; (8000364 <MX_TIM1_Init+0xe0>)
 80002b0:	4a2d      	ldr	r2, [pc, #180]	; (8000368 <MX_TIM1_Init+0xe4>)
 80002b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80002b4:	4b2b      	ldr	r3, [pc, #172]	; (8000364 <MX_TIM1_Init+0xe0>)
 80002b6:	2247      	movs	r2, #71	; 0x47
 80002b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002ba:	4b2a      	ldr	r3, [pc, #168]	; (8000364 <MX_TIM1_Init+0xe0>)
 80002bc:	2200      	movs	r2, #0
 80002be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80002c0:	4b28      	ldr	r3, [pc, #160]	; (8000364 <MX_TIM1_Init+0xe0>)
 80002c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002c8:	4b26      	ldr	r3, [pc, #152]	; (8000364 <MX_TIM1_Init+0xe0>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80002ce:	4b25      	ldr	r3, [pc, #148]	; (8000364 <MX_TIM1_Init+0xe0>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002d4:	4b23      	ldr	r3, [pc, #140]	; (8000364 <MX_TIM1_Init+0xe0>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80002da:	4822      	ldr	r0, [pc, #136]	; (8000364 <MX_TIM1_Init+0xe0>)
 80002dc:	f001 fbba 	bl	8001a54 <HAL_TIM_Base_Init>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80002e6:	f000 f966 	bl	80005b6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002ee:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80002f0:	f107 0318 	add.w	r3, r7, #24
 80002f4:	4619      	mov	r1, r3
 80002f6:	481b      	ldr	r0, [pc, #108]	; (8000364 <MX_TIM1_Init+0xe0>)
 80002f8:	f001 ff58 	bl	80021ac <HAL_TIM_ConfigClockSource>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000302:	f000 f958 	bl	80005b6 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000306:	4817      	ldr	r0, [pc, #92]	; (8000364 <MX_TIM1_Init+0xe0>)
 8000308:	f001 fc9e 	bl	8001c48 <HAL_TIM_IC_Init>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000312:	f000 f950 	bl	80005b6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000316:	2300      	movs	r3, #0
 8000318:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800031a:	2300      	movs	r3, #0
 800031c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800031e:	f107 0310 	add.w	r3, r7, #16
 8000322:	4619      	mov	r1, r3
 8000324:	480f      	ldr	r0, [pc, #60]	; (8000364 <MX_TIM1_Init+0xe0>)
 8000326:	f002 fbab 	bl	8002a80 <HAL_TIMEx_MasterConfigSynchronization>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8000330:	f000 f941 	bl	80005b6 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000334:	2300      	movs	r3, #0
 8000336:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000338:	2301      	movs	r3, #1
 800033a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800033c:	2300      	movs	r3, #0
 800033e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000340:	2300      	movs	r3, #0
 8000342:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000344:	463b      	mov	r3, r7
 8000346:	2204      	movs	r2, #4
 8000348:	4619      	mov	r1, r3
 800034a:	4806      	ldr	r0, [pc, #24]	; (8000364 <MX_TIM1_Init+0xe0>)
 800034c:	f001 fddc 	bl	8001f08 <HAL_TIM_IC_ConfigChannel>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000356:	f000 f92e 	bl	80005b6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800035a:	bf00      	nop
 800035c:	3728      	adds	r7, #40	; 0x28
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20001a18 	.word	0x20001a18
 8000368:	40012c00 	.word	0x40012c00

0800036c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b08e      	sub	sp, #56	; 0x38
 8000370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000372:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
 800037c:	609a      	str	r2, [r3, #8]
 800037e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000380:	f107 0320 	add.w	r3, r7, #32
 8000384:	2200      	movs	r2, #0
 8000386:	601a      	str	r2, [r3, #0]
 8000388:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
 8000390:	605a      	str	r2, [r3, #4]
 8000392:	609a      	str	r2, [r3, #8]
 8000394:	60da      	str	r2, [r3, #12]
 8000396:	611a      	str	r2, [r3, #16]
 8000398:	615a      	str	r2, [r3, #20]
 800039a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800039c:	4b32      	ldr	r3, [pc, #200]	; (8000468 <MX_TIM3_Init+0xfc>)
 800039e:	4a33      	ldr	r2, [pc, #204]	; (800046c <MX_TIM3_Init+0x100>)
 80003a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80003a2:	4b31      	ldr	r3, [pc, #196]	; (8000468 <MX_TIM3_Init+0xfc>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003a8:	4b2f      	ldr	r3, [pc, #188]	; (8000468 <MX_TIM3_Init+0xfc>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80003ae:	4b2e      	ldr	r3, [pc, #184]	; (8000468 <MX_TIM3_Init+0xfc>)
 80003b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003b6:	4b2c      	ldr	r3, [pc, #176]	; (8000468 <MX_TIM3_Init+0xfc>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003bc:	4b2a      	ldr	r3, [pc, #168]	; (8000468 <MX_TIM3_Init+0xfc>)
 80003be:	2200      	movs	r2, #0
 80003c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80003c2:	4829      	ldr	r0, [pc, #164]	; (8000468 <MX_TIM3_Init+0xfc>)
 80003c4:	f001 fb46 	bl	8001a54 <HAL_TIM_Base_Init>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80003ce:	f000 f8f2 	bl	80005b6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80003d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003dc:	4619      	mov	r1, r3
 80003de:	4822      	ldr	r0, [pc, #136]	; (8000468 <MX_TIM3_Init+0xfc>)
 80003e0:	f001 fee4 	bl	80021ac <HAL_TIM_ConfigClockSource>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80003ea:	f000 f8e4 	bl	80005b6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80003ee:	481e      	ldr	r0, [pc, #120]	; (8000468 <MX_TIM3_Init+0xfc>)
 80003f0:	f001 fbd2 	bl	8001b98 <HAL_TIM_PWM_Init>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80003fa:	f000 f8dc 	bl	80005b6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003fe:	2300      	movs	r3, #0
 8000400:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000402:	2300      	movs	r3, #0
 8000404:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000406:	f107 0320 	add.w	r3, r7, #32
 800040a:	4619      	mov	r1, r3
 800040c:	4816      	ldr	r0, [pc, #88]	; (8000468 <MX_TIM3_Init+0xfc>)
 800040e:	f002 fb37 	bl	8002a80 <HAL_TIMEx_MasterConfigSynchronization>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000418:	f000 f8cd 	bl	80005b6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800041c:	2360      	movs	r3, #96	; 0x60
 800041e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000420:	2300      	movs	r3, #0
 8000422:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000424:	2300      	movs	r3, #0
 8000426:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000428:	2300      	movs	r3, #0
 800042a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800042c:	1d3b      	adds	r3, r7, #4
 800042e:	2200      	movs	r2, #0
 8000430:	4619      	mov	r1, r3
 8000432:	480d      	ldr	r0, [pc, #52]	; (8000468 <MX_TIM3_Init+0xfc>)
 8000434:	f001 fdfc 	bl	8002030 <HAL_TIM_PWM_ConfigChannel>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800043e:	f000 f8ba 	bl	80005b6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	2204      	movs	r2, #4
 8000446:	4619      	mov	r1, r3
 8000448:	4807      	ldr	r0, [pc, #28]	; (8000468 <MX_TIM3_Init+0xfc>)
 800044a:	f001 fdf1 	bl	8002030 <HAL_TIM_PWM_ConfigChannel>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000454:	f000 f8af 	bl	80005b6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000458:	4803      	ldr	r0, [pc, #12]	; (8000468 <MX_TIM3_Init+0xfc>)
 800045a:	f000 f991 	bl	8000780 <HAL_TIM_MspPostInit>

}
 800045e:	bf00      	nop
 8000460:	3738      	adds	r7, #56	; 0x38
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	2000198c 	.word	0x2000198c
 800046c:	40000400 	.word	0x40000400

08000470 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000474:	4b11      	ldr	r3, [pc, #68]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 8000476:	4a12      	ldr	r2, [pc, #72]	; (80004c0 <MX_USART1_UART_Init+0x50>)
 8000478:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800047a:	4b10      	ldr	r3, [pc, #64]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 800047c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000480:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000482:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 8000484:	2200      	movs	r2, #0
 8000486:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000488:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 800048a:	2200      	movs	r2, #0
 800048c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800048e:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 8000490:	2200      	movs	r2, #0
 8000492:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000494:	4b09      	ldr	r3, [pc, #36]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 8000496:	220c      	movs	r2, #12
 8000498:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800049a:	4b08      	ldr	r3, [pc, #32]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 800049c:	2200      	movs	r2, #0
 800049e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004a0:	4b06      	ldr	r3, [pc, #24]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004a6:	4805      	ldr	r0, [pc, #20]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 80004a8:	f002 fb5a 	bl	8002b60 <HAL_UART_Init>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004b2:	f000 f880 	bl	80005b6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	200019d4 	.word	0x200019d4
 80004c0:	40013800 	.word	0x40013800

080004c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b088      	sub	sp, #32
 80004c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	f107 0310 	add.w	r3, r7, #16
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004d8:	4b28      	ldr	r3, [pc, #160]	; (800057c <MX_GPIO_Init+0xb8>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	4a27      	ldr	r2, [pc, #156]	; (800057c <MX_GPIO_Init+0xb8>)
 80004de:	f043 0320 	orr.w	r3, r3, #32
 80004e2:	6193      	str	r3, [r2, #24]
 80004e4:	4b25      	ldr	r3, [pc, #148]	; (800057c <MX_GPIO_Init+0xb8>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	f003 0320 	and.w	r3, r3, #32
 80004ec:	60fb      	str	r3, [r7, #12]
 80004ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f0:	4b22      	ldr	r3, [pc, #136]	; (800057c <MX_GPIO_Init+0xb8>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	4a21      	ldr	r2, [pc, #132]	; (800057c <MX_GPIO_Init+0xb8>)
 80004f6:	f043 0304 	orr.w	r3, r3, #4
 80004fa:	6193      	str	r3, [r2, #24]
 80004fc:	4b1f      	ldr	r3, [pc, #124]	; (800057c <MX_GPIO_Init+0xb8>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	f003 0304 	and.w	r3, r3, #4
 8000504:	60bb      	str	r3, [r7, #8]
 8000506:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000508:	4b1c      	ldr	r3, [pc, #112]	; (800057c <MX_GPIO_Init+0xb8>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	4a1b      	ldr	r2, [pc, #108]	; (800057c <MX_GPIO_Init+0xb8>)
 800050e:	f043 0308 	orr.w	r3, r3, #8
 8000512:	6193      	str	r3, [r2, #24]
 8000514:	4b19      	ldr	r3, [pc, #100]	; (800057c <MX_GPIO_Init+0xb8>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	f003 0308 	and.w	r3, r3, #8
 800051c:	607b      	str	r3, [r7, #4]
 800051e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_IN_1_RIGHT_Pin|MOTOR_IN_2_RIGHT_Pin|MOTOR_IN_3_LEFT_Pin|GPIO_PIN_5
 8000520:	2200      	movs	r2, #0
 8000522:	f240 513c 	movw	r1, #1340	; 0x53c
 8000526:	4816      	ldr	r0, [pc, #88]	; (8000580 <MX_GPIO_Init+0xbc>)
 8000528:	f000 fcd2 	bl	8000ed0 <HAL_GPIO_WritePin>
                          |LED_LEFT_Pin|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_BRAKES_Pin|LED_REVERSE_Pin|LED_FRONT_Pin|LED_RIGHT_Pin, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000532:	4814      	ldr	r0, [pc, #80]	; (8000584 <MX_GPIO_Init+0xc0>)
 8000534:	f000 fccc 	bl	8000ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MOTOR_IN_1_RIGHT_Pin MOTOR_IN_2_RIGHT_Pin MOTOR_IN_3_LEFT_Pin PA5
                           LED_LEFT_Pin PA10 */
  GPIO_InitStruct.Pin = MOTOR_IN_1_RIGHT_Pin|MOTOR_IN_2_RIGHT_Pin|MOTOR_IN_3_LEFT_Pin|GPIO_PIN_5
 8000538:	f240 533c 	movw	r3, #1340	; 0x53c
 800053c:	613b      	str	r3, [r7, #16]
                          |LED_LEFT_Pin|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053e:	2301      	movs	r3, #1
 8000540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	2300      	movs	r3, #0
 8000544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000546:	2302      	movs	r3, #2
 8000548:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054a:	f107 0310 	add.w	r3, r7, #16
 800054e:	4619      	mov	r1, r3
 8000550:	480b      	ldr	r0, [pc, #44]	; (8000580 <MX_GPIO_Init+0xbc>)
 8000552:	f000 fb63 	bl	8000c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_BRAKES_Pin LED_REVERSE_Pin LED_FRONT_Pin LED_RIGHT_Pin */
  GPIO_InitStruct.Pin = LED_BRAKES_Pin|LED_REVERSE_Pin|LED_FRONT_Pin|LED_RIGHT_Pin;
 8000556:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800055a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055c:	2301      	movs	r3, #1
 800055e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000564:	2302      	movs	r3, #2
 8000566:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000568:	f107 0310 	add.w	r3, r7, #16
 800056c:	4619      	mov	r1, r3
 800056e:	4805      	ldr	r0, [pc, #20]	; (8000584 <MX_GPIO_Init+0xc0>)
 8000570:	f000 fb54 	bl	8000c1c <HAL_GPIO_Init>

}
 8000574:	bf00      	nop
 8000576:	3720      	adds	r7, #32
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40021000 	.word	0x40021000
 8000580:	40010800 	.word	0x40010800
 8000584:	40010c00 	.word	0x40010c00

08000588 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000590:	2001      	movs	r0, #1
 8000592:	f002 fcd1 	bl	8002f38 <osDelay>
 8000596:	e7fb      	b.n	8000590 <StartDefaultTask+0x8>

08000598 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005a8:	d101      	bne.n	80005ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005aa:	f000 fa3b 	bl	8000a24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005ba:	bf00      	nop
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr
	...

080005c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ca:	4b15      	ldr	r3, [pc, #84]	; (8000620 <HAL_MspInit+0x5c>)
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	4a14      	ldr	r2, [pc, #80]	; (8000620 <HAL_MspInit+0x5c>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6193      	str	r3, [r2, #24]
 80005d6:	4b12      	ldr	r3, [pc, #72]	; (8000620 <HAL_MspInit+0x5c>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e2:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <HAL_MspInit+0x5c>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	4a0e      	ldr	r2, [pc, #56]	; (8000620 <HAL_MspInit+0x5c>)
 80005e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ec:	61d3      	str	r3, [r2, #28]
 80005ee:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <HAL_MspInit+0x5c>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005fa:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <HAL_MspInit+0x60>)
 80005fc:	685b      	ldr	r3, [r3, #4]
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	4a04      	ldr	r2, [pc, #16]	; (8000624 <HAL_MspInit+0x60>)
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000616:	bf00      	nop
 8000618:	3714      	adds	r7, #20
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr
 8000620:	40021000 	.word	0x40021000
 8000624:	40010000 	.word	0x40010000

08000628 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08a      	sub	sp, #40	; 0x28
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a1d      	ldr	r2, [pc, #116]	; (80006b8 <HAL_I2C_MspInit+0x90>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d132      	bne.n	80006ae <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000648:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <HAL_I2C_MspInit+0x94>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	4a1b      	ldr	r2, [pc, #108]	; (80006bc <HAL_I2C_MspInit+0x94>)
 800064e:	f043 0308 	orr.w	r3, r3, #8
 8000652:	6193      	str	r3, [r2, #24]
 8000654:	4b19      	ldr	r3, [pc, #100]	; (80006bc <HAL_I2C_MspInit+0x94>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	f003 0308 	and.w	r3, r3, #8
 800065c:	613b      	str	r3, [r7, #16]
 800065e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8000660:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000666:	2312      	movs	r3, #18
 8000668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800066a:	2303      	movs	r3, #3
 800066c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	4619      	mov	r1, r3
 8000674:	4812      	ldr	r0, [pc, #72]	; (80006c0 <HAL_I2C_MspInit+0x98>)
 8000676:	f000 fad1 	bl	8000c1c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800067a:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <HAL_I2C_MspInit+0x9c>)
 800067c:	685b      	ldr	r3, [r3, #4]
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
 8000680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000682:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000686:	627b      	str	r3, [r7, #36]	; 0x24
 8000688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800068a:	f043 0302 	orr.w	r3, r3, #2
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
 8000690:	4a0c      	ldr	r2, [pc, #48]	; (80006c4 <HAL_I2C_MspInit+0x9c>)
 8000692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000694:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <HAL_I2C_MspInit+0x94>)
 8000698:	69db      	ldr	r3, [r3, #28]
 800069a:	4a08      	ldr	r2, [pc, #32]	; (80006bc <HAL_I2C_MspInit+0x94>)
 800069c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006a0:	61d3      	str	r3, [r2, #28]
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <HAL_I2C_MspInit+0x94>)
 80006a4:	69db      	ldr	r3, [r3, #28]
 80006a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80006ae:	bf00      	nop
 80006b0:	3728      	adds	r7, #40	; 0x28
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40005400 	.word	0x40005400
 80006bc:	40021000 	.word	0x40021000
 80006c0:	40010c00 	.word	0x40010c00
 80006c4:	40010000 	.word	0x40010000

080006c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	; 0x28
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d0:	f107 0318 	add.w	r3, r7, #24
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a23      	ldr	r2, [pc, #140]	; (8000770 <HAL_TIM_Base_MspInit+0xa8>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d12d      	bne.n	8000744 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80006e8:	4b22      	ldr	r3, [pc, #136]	; (8000774 <HAL_TIM_Base_MspInit+0xac>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	4a21      	ldr	r2, [pc, #132]	; (8000774 <HAL_TIM_Base_MspInit+0xac>)
 80006ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006f2:	6193      	str	r3, [r2, #24]
 80006f4:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <HAL_TIM_Base_MspInit+0xac>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006fc:	617b      	str	r3, [r7, #20]
 80006fe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000700:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <HAL_TIM_Base_MspInit+0xac>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	4a1b      	ldr	r2, [pc, #108]	; (8000774 <HAL_TIM_Base_MspInit+0xac>)
 8000706:	f043 0304 	orr.w	r3, r3, #4
 800070a:	6193      	str	r3, [r2, #24]
 800070c:	4b19      	ldr	r3, [pc, #100]	; (8000774 <HAL_TIM_Base_MspInit+0xac>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	f003 0304 	and.w	r3, r3, #4
 8000714:	613b      	str	r3, [r7, #16]
 8000716:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = HHHHHH_Pin;
 8000718:	f44f 7300 	mov.w	r3, #512	; 0x200
 800071c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071e:	2300      	movs	r3, #0
 8000720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(HHHHHH_GPIO_Port, &GPIO_InitStruct);
 8000726:	f107 0318 	add.w	r3, r7, #24
 800072a:	4619      	mov	r1, r3
 800072c:	4812      	ldr	r0, [pc, #72]	; (8000778 <HAL_TIM_Base_MspInit+0xb0>)
 800072e:	f000 fa75 	bl	8000c1c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	2100      	movs	r1, #0
 8000736:	201b      	movs	r0, #27
 8000738:	f000 fa45 	bl	8000bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800073c:	201b      	movs	r0, #27
 800073e:	f000 fa5e 	bl	8000bfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000742:	e010      	b.n	8000766 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a0c      	ldr	r2, [pc, #48]	; (800077c <HAL_TIM_Base_MspInit+0xb4>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d10b      	bne.n	8000766 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <HAL_TIM_Base_MspInit+0xac>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	4a08      	ldr	r2, [pc, #32]	; (8000774 <HAL_TIM_Base_MspInit+0xac>)
 8000754:	f043 0302 	orr.w	r3, r3, #2
 8000758:	61d3      	str	r3, [r2, #28]
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <HAL_TIM_Base_MspInit+0xac>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
}
 8000766:	bf00      	nop
 8000768:	3728      	adds	r7, #40	; 0x28
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40012c00 	.word	0x40012c00
 8000774:	40021000 	.word	0x40021000
 8000778:	40010800 	.word	0x40010800
 800077c:	40000400 	.word	0x40000400

08000780 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000788:	f107 0310 	add.w	r3, r7, #16
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a0f      	ldr	r2, [pc, #60]	; (80007d8 <HAL_TIM_MspPostInit+0x58>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d117      	bne.n	80007d0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a0:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <HAL_TIM_MspPostInit+0x5c>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	4a0d      	ldr	r2, [pc, #52]	; (80007dc <HAL_TIM_MspPostInit+0x5c>)
 80007a6:	f043 0304 	orr.w	r3, r3, #4
 80007aa:	6193      	str	r3, [r2, #24]
 80007ac:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <HAL_TIM_MspPostInit+0x5c>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	f003 0304 	and.w	r3, r3, #4
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_EN_A_RIGHT_Pin|MOTOT_EN_B_LEFT_Pin;
 80007b8:	23c0      	movs	r3, #192	; 0xc0
 80007ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007bc:	2302      	movs	r3, #2
 80007be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2302      	movs	r3, #2
 80007c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c4:	f107 0310 	add.w	r3, r7, #16
 80007c8:	4619      	mov	r1, r3
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <HAL_TIM_MspPostInit+0x60>)
 80007cc:	f000 fa26 	bl	8000c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80007d0:	bf00      	nop
 80007d2:	3720      	adds	r7, #32
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40000400 	.word	0x40000400
 80007dc:	40021000 	.word	0x40021000
 80007e0:	40010800 	.word	0x40010800

080007e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	; 0x28
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a22      	ldr	r2, [pc, #136]	; (8000888 <HAL_UART_MspInit+0xa4>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d13d      	bne.n	8000880 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000804:	4b21      	ldr	r3, [pc, #132]	; (800088c <HAL_UART_MspInit+0xa8>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a20      	ldr	r2, [pc, #128]	; (800088c <HAL_UART_MspInit+0xa8>)
 800080a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b1e      	ldr	r3, [pc, #120]	; (800088c <HAL_UART_MspInit+0xa8>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800081c:	4b1b      	ldr	r3, [pc, #108]	; (800088c <HAL_UART_MspInit+0xa8>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	4a1a      	ldr	r2, [pc, #104]	; (800088c <HAL_UART_MspInit+0xa8>)
 8000822:	f043 0308 	orr.w	r3, r3, #8
 8000826:	6193      	str	r3, [r2, #24]
 8000828:	4b18      	ldr	r3, [pc, #96]	; (800088c <HAL_UART_MspInit+0xa8>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f003 0308 	and.w	r3, r3, #8
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ESP_TX_Pin;
 8000834:	2340      	movs	r3, #64	; 0x40
 8000836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000838:	2302      	movs	r3, #2
 800083a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800083c:	2303      	movs	r3, #3
 800083e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(ESP_TX_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	4619      	mov	r1, r3
 8000846:	4812      	ldr	r0, [pc, #72]	; (8000890 <HAL_UART_MspInit+0xac>)
 8000848:	f000 f9e8 	bl	8000c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ESP_RX_Pin;
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000850:	2300      	movs	r3, #0
 8000852:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ESP_RX_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4619      	mov	r1, r3
 800085e:	480c      	ldr	r0, [pc, #48]	; (8000890 <HAL_UART_MspInit+0xac>)
 8000860:	f000 f9dc 	bl	8000c1c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000864:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <HAL_UART_MspInit+0xb0>)
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
 800086a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800086c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
 8000872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000874:	f043 0304 	orr.w	r3, r3, #4
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
 800087a:	4a06      	ldr	r2, [pc, #24]	; (8000894 <HAL_UART_MspInit+0xb0>)
 800087c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000880:	bf00      	nop
 8000882:	3728      	adds	r7, #40	; 0x28
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40013800 	.word	0x40013800
 800088c:	40021000 	.word	0x40021000
 8000890:	40010c00 	.word	0x40010c00
 8000894:	40010000 	.word	0x40010000

08000898 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08c      	sub	sp, #48	; 0x30
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 80008a8:	2200      	movs	r2, #0
 80008aa:	6879      	ldr	r1, [r7, #4]
 80008ac:	201c      	movs	r0, #28
 80008ae:	f000 f98a 	bl	8000bc6 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008b2:	201c      	movs	r0, #28
 80008b4:	f000 f9a3 	bl	8000bfe <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80008b8:	4b20      	ldr	r3, [pc, #128]	; (800093c <HAL_InitTick+0xa4>)
 80008ba:	69db      	ldr	r3, [r3, #28]
 80008bc:	4a1f      	ldr	r2, [pc, #124]	; (800093c <HAL_InitTick+0xa4>)
 80008be:	f043 0301 	orr.w	r3, r3, #1
 80008c2:	61d3      	str	r3, [r2, #28]
 80008c4:	4b1d      	ldr	r3, [pc, #116]	; (800093c <HAL_InitTick+0xa4>)
 80008c6:	69db      	ldr	r3, [r3, #28]
 80008c8:	f003 0301 	and.w	r3, r3, #1
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008d0:	f107 0210 	add.w	r2, r7, #16
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4611      	mov	r1, r2
 80008da:	4618      	mov	r0, r3
 80008dc:	f001 f852 	bl	8001984 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80008e0:	f001 f828 	bl	8001934 <HAL_RCC_GetPCLK1Freq>
 80008e4:	4603      	mov	r3, r0
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80008ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ec:	4a14      	ldr	r2, [pc, #80]	; (8000940 <HAL_InitTick+0xa8>)
 80008ee:	fba2 2303 	umull	r2, r3, r2, r3
 80008f2:	0c9b      	lsrs	r3, r3, #18
 80008f4:	3b01      	subs	r3, #1
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <HAL_InitTick+0xac>)
 80008fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008fe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8000900:	4b10      	ldr	r3, [pc, #64]	; (8000944 <HAL_InitTick+0xac>)
 8000902:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000906:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000908:	4a0e      	ldr	r2, [pc, #56]	; (8000944 <HAL_InitTick+0xac>)
 800090a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800090c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800090e:	4b0d      	ldr	r3, [pc, #52]	; (8000944 <HAL_InitTick+0xac>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000914:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <HAL_InitTick+0xac>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800091a:	480a      	ldr	r0, [pc, #40]	; (8000944 <HAL_InitTick+0xac>)
 800091c:	f001 f89a 	bl	8001a54 <HAL_TIM_Base_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d104      	bne.n	8000930 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000926:	4807      	ldr	r0, [pc, #28]	; (8000944 <HAL_InitTick+0xac>)
 8000928:	f001 f8e4 	bl	8001af4 <HAL_TIM_Base_Start_IT>
 800092c:	4603      	mov	r3, r0
 800092e:	e000      	b.n	8000932 <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8000930:	2301      	movs	r3, #1
}
 8000932:	4618      	mov	r0, r3
 8000934:	3730      	adds	r7, #48	; 0x30
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40021000 	.word	0x40021000
 8000940:	431bde83 	.word	0x431bde83
 8000944:	20001a60 	.word	0x20001a60

08000948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800094c:	f001 f84a 	bl	80019e4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}

08000954 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <HardFault_Handler+0x4>

0800095a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800095e:	e7fe      	b.n	800095e <MemManage_Handler+0x4>

08000960 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <BusFault_Handler+0x4>

08000966 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <UsageFault_Handler+0x4>

0800096c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr

08000978 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800097c:	4802      	ldr	r0, [pc, #8]	; (8000988 <TIM1_CC_IRQHandler+0x10>)
 800097e:	f001 f9bb 	bl	8001cf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20001a18 	.word	0x20001a18

0800098c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000990:	4802      	ldr	r0, [pc, #8]	; (800099c <TIM2_IRQHandler+0x10>)
 8000992:	f001 f9b1 	bl	8001cf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20001a60 	.word	0x20001a60

080009a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr

080009ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009ac:	480c      	ldr	r0, [pc, #48]	; (80009e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009ae:	490d      	ldr	r1, [pc, #52]	; (80009e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009b0:	4a0d      	ldr	r2, [pc, #52]	; (80009e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b4:	e002      	b.n	80009bc <LoopCopyDataInit>

080009b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ba:	3304      	adds	r3, #4

080009bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c0:	d3f9      	bcc.n	80009b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c2:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009c4:	4c0a      	ldr	r4, [pc, #40]	; (80009f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c8:	e001      	b.n	80009ce <LoopFillZerobss>

080009ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009cc:	3204      	adds	r2, #4

080009ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d0:	d3fb      	bcc.n	80009ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009d2:	f7ff ffe5 	bl	80009a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009d6:	f004 fe39 	bl	800564c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009da:	f7ff fbb9 	bl	8000150 <main>
  bx lr
 80009de:	4770      	bx	lr
  ldr r0, =_sdata
 80009e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80009e8:	08005750 	.word	0x08005750
  ldr r2, =_sbss
 80009ec:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80009f0:	20001aec 	.word	0x20001aec

080009f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009f4:	e7fe      	b.n	80009f4 <ADC1_2_IRQHandler>
	...

080009f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <HAL_Init+0x28>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a07      	ldr	r2, [pc, #28]	; (8000a20 <HAL_Init+0x28>)
 8000a02:	f043 0310 	orr.w	r3, r3, #16
 8000a06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a08:	2003      	movs	r0, #3
 8000a0a:	f000 f8d1 	bl	8000bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a0e:	2000      	movs	r0, #0
 8000a10:	f7ff ff42 	bl	8000898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a14:	f7ff fdd6 	bl	80005c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40022000 	.word	0x40022000

08000a24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a28:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <HAL_IncTick+0x1c>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <HAL_IncTick+0x20>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4413      	add	r3, r2
 8000a34:	4a03      	ldr	r2, [pc, #12]	; (8000a44 <HAL_IncTick+0x20>)
 8000a36:	6013      	str	r3, [r2, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr
 8000a40:	20000008 	.word	0x20000008
 8000a44:	20001aa8 	.word	0x20001aa8

08000a48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a4c:	4b02      	ldr	r3, [pc, #8]	; (8000a58 <HAL_GetTick+0x10>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr
 8000a58:	20001aa8 	.word	0x20001aa8

08000a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f003 0307 	and.w	r3, r3, #7
 8000a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a78:	4013      	ands	r3, r2
 8000a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a8e:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	60d3      	str	r3, [r2, #12]
}
 8000a94:	bf00      	nop
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa8:	4b04      	ldr	r3, [pc, #16]	; (8000abc <__NVIC_GetPriorityGrouping+0x18>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	0a1b      	lsrs	r3, r3, #8
 8000aae:	f003 0307 	and.w	r3, r3, #7
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	db0b      	blt.n	8000aea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	f003 021f 	and.w	r2, r3, #31
 8000ad8:	4906      	ldr	r1, [pc, #24]	; (8000af4 <__NVIC_EnableIRQ+0x34>)
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	095b      	lsrs	r3, r3, #5
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	e000e100 	.word	0xe000e100

08000af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	6039      	str	r1, [r7, #0]
 8000b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	db0a      	blt.n	8000b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	490c      	ldr	r1, [pc, #48]	; (8000b44 <__NVIC_SetPriority+0x4c>)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	0112      	lsls	r2, r2, #4
 8000b18:	b2d2      	uxtb	r2, r2
 8000b1a:	440b      	add	r3, r1
 8000b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b20:	e00a      	b.n	8000b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	4908      	ldr	r1, [pc, #32]	; (8000b48 <__NVIC_SetPriority+0x50>)
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	f003 030f 	and.w	r3, r3, #15
 8000b2e:	3b04      	subs	r3, #4
 8000b30:	0112      	lsls	r2, r2, #4
 8000b32:	b2d2      	uxtb	r2, r2
 8000b34:	440b      	add	r3, r1
 8000b36:	761a      	strb	r2, [r3, #24]
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	e000e100 	.word	0xe000e100
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b089      	sub	sp, #36	; 0x24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f003 0307 	and.w	r3, r3, #7
 8000b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	f1c3 0307 	rsb	r3, r3, #7
 8000b66:	2b04      	cmp	r3, #4
 8000b68:	bf28      	it	cs
 8000b6a:	2304      	movcs	r3, #4
 8000b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	3304      	adds	r3, #4
 8000b72:	2b06      	cmp	r3, #6
 8000b74:	d902      	bls.n	8000b7c <NVIC_EncodePriority+0x30>
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	3b03      	subs	r3, #3
 8000b7a:	e000      	b.n	8000b7e <NVIC_EncodePriority+0x32>
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b80:	f04f 32ff 	mov.w	r2, #4294967295
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	43da      	mvns	r2, r3
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	401a      	ands	r2, r3
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b94:	f04f 31ff 	mov.w	r1, #4294967295
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9e:	43d9      	mvns	r1, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba4:	4313      	orrs	r3, r2
         );
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3724      	adds	r7, #36	; 0x24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr

08000bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff ff4f 	bl	8000a5c <__NVIC_SetPriorityGrouping>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b086      	sub	sp, #24
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	4603      	mov	r3, r0
 8000bce:	60b9      	str	r1, [r7, #8]
 8000bd0:	607a      	str	r2, [r7, #4]
 8000bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd8:	f7ff ff64 	bl	8000aa4 <__NVIC_GetPriorityGrouping>
 8000bdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	68b9      	ldr	r1, [r7, #8]
 8000be2:	6978      	ldr	r0, [r7, #20]
 8000be4:	f7ff ffb2 	bl	8000b4c <NVIC_EncodePriority>
 8000be8:	4602      	mov	r2, r0
 8000bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bee:	4611      	mov	r1, r2
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff ff81 	bl	8000af8 <__NVIC_SetPriority>
}
 8000bf6:	bf00      	nop
 8000bf8:	3718      	adds	r7, #24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b082      	sub	sp, #8
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	4603      	mov	r3, r0
 8000c06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff ff57 	bl	8000ac0 <__NVIC_EnableIRQ>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b08b      	sub	sp, #44	; 0x2c
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c2e:	e127      	b.n	8000e80 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c30:	2201      	movs	r2, #1
 8000c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	69fa      	ldr	r2, [r7, #28]
 8000c40:	4013      	ands	r3, r2
 8000c42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	f040 8116 	bne.w	8000e7a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	2b12      	cmp	r3, #18
 8000c54:	d034      	beq.n	8000cc0 <HAL_GPIO_Init+0xa4>
 8000c56:	2b12      	cmp	r3, #18
 8000c58:	d80d      	bhi.n	8000c76 <HAL_GPIO_Init+0x5a>
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d02b      	beq.n	8000cb6 <HAL_GPIO_Init+0x9a>
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	d804      	bhi.n	8000c6c <HAL_GPIO_Init+0x50>
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d031      	beq.n	8000cca <HAL_GPIO_Init+0xae>
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d01c      	beq.n	8000ca4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c6a:	e048      	b.n	8000cfe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c6c:	2b03      	cmp	r3, #3
 8000c6e:	d043      	beq.n	8000cf8 <HAL_GPIO_Init+0xdc>
 8000c70:	2b11      	cmp	r3, #17
 8000c72:	d01b      	beq.n	8000cac <HAL_GPIO_Init+0x90>
          break;
 8000c74:	e043      	b.n	8000cfe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c76:	4a89      	ldr	r2, [pc, #548]	; (8000e9c <HAL_GPIO_Init+0x280>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d026      	beq.n	8000cca <HAL_GPIO_Init+0xae>
 8000c7c:	4a87      	ldr	r2, [pc, #540]	; (8000e9c <HAL_GPIO_Init+0x280>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d806      	bhi.n	8000c90 <HAL_GPIO_Init+0x74>
 8000c82:	4a87      	ldr	r2, [pc, #540]	; (8000ea0 <HAL_GPIO_Init+0x284>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d020      	beq.n	8000cca <HAL_GPIO_Init+0xae>
 8000c88:	4a86      	ldr	r2, [pc, #536]	; (8000ea4 <HAL_GPIO_Init+0x288>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d01d      	beq.n	8000cca <HAL_GPIO_Init+0xae>
          break;
 8000c8e:	e036      	b.n	8000cfe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c90:	4a85      	ldr	r2, [pc, #532]	; (8000ea8 <HAL_GPIO_Init+0x28c>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d019      	beq.n	8000cca <HAL_GPIO_Init+0xae>
 8000c96:	4a85      	ldr	r2, [pc, #532]	; (8000eac <HAL_GPIO_Init+0x290>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d016      	beq.n	8000cca <HAL_GPIO_Init+0xae>
 8000c9c:	4a84      	ldr	r2, [pc, #528]	; (8000eb0 <HAL_GPIO_Init+0x294>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d013      	beq.n	8000cca <HAL_GPIO_Init+0xae>
          break;
 8000ca2:	e02c      	b.n	8000cfe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	623b      	str	r3, [r7, #32]
          break;
 8000caa:	e028      	b.n	8000cfe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	3304      	adds	r3, #4
 8000cb2:	623b      	str	r3, [r7, #32]
          break;
 8000cb4:	e023      	b.n	8000cfe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	68db      	ldr	r3, [r3, #12]
 8000cba:	3308      	adds	r3, #8
 8000cbc:	623b      	str	r3, [r7, #32]
          break;
 8000cbe:	e01e      	b.n	8000cfe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	330c      	adds	r3, #12
 8000cc6:	623b      	str	r3, [r7, #32]
          break;
 8000cc8:	e019      	b.n	8000cfe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d102      	bne.n	8000cd8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	623b      	str	r3, [r7, #32]
          break;
 8000cd6:	e012      	b.n	8000cfe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d105      	bne.n	8000cec <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ce0:	2308      	movs	r3, #8
 8000ce2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	69fa      	ldr	r2, [r7, #28]
 8000ce8:	611a      	str	r2, [r3, #16]
          break;
 8000cea:	e008      	b.n	8000cfe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cec:	2308      	movs	r3, #8
 8000cee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	69fa      	ldr	r2, [r7, #28]
 8000cf4:	615a      	str	r2, [r3, #20]
          break;
 8000cf6:	e002      	b.n	8000cfe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	623b      	str	r3, [r7, #32]
          break;
 8000cfc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	2bff      	cmp	r3, #255	; 0xff
 8000d02:	d801      	bhi.n	8000d08 <HAL_GPIO_Init+0xec>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	e001      	b.n	8000d0c <HAL_GPIO_Init+0xf0>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3304      	adds	r3, #4
 8000d0c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	2bff      	cmp	r3, #255	; 0xff
 8000d12:	d802      	bhi.n	8000d1a <HAL_GPIO_Init+0xfe>
 8000d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	e002      	b.n	8000d20 <HAL_GPIO_Init+0x104>
 8000d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1c:	3b08      	subs	r3, #8
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	210f      	movs	r1, #15
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	401a      	ands	r2, r3
 8000d32:	6a39      	ldr	r1, [r7, #32]
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3a:	431a      	orrs	r2, r3
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	f000 8096 	beq.w	8000e7a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d4e:	4b59      	ldr	r3, [pc, #356]	; (8000eb4 <HAL_GPIO_Init+0x298>)
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	4a58      	ldr	r2, [pc, #352]	; (8000eb4 <HAL_GPIO_Init+0x298>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6193      	str	r3, [r2, #24]
 8000d5a:	4b56      	ldr	r3, [pc, #344]	; (8000eb4 <HAL_GPIO_Init+0x298>)
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d66:	4a54      	ldr	r2, [pc, #336]	; (8000eb8 <HAL_GPIO_Init+0x29c>)
 8000d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6a:	089b      	lsrs	r3, r3, #2
 8000d6c:	3302      	adds	r3, #2
 8000d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d72:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d76:	f003 0303 	and.w	r3, r3, #3
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	220f      	movs	r2, #15
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43db      	mvns	r3, r3
 8000d84:	68fa      	ldr	r2, [r7, #12]
 8000d86:	4013      	ands	r3, r2
 8000d88:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a4b      	ldr	r2, [pc, #300]	; (8000ebc <HAL_GPIO_Init+0x2a0>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d013      	beq.n	8000dba <HAL_GPIO_Init+0x19e>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a4a      	ldr	r2, [pc, #296]	; (8000ec0 <HAL_GPIO_Init+0x2a4>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d00d      	beq.n	8000db6 <HAL_GPIO_Init+0x19a>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a49      	ldr	r2, [pc, #292]	; (8000ec4 <HAL_GPIO_Init+0x2a8>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d007      	beq.n	8000db2 <HAL_GPIO_Init+0x196>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a48      	ldr	r2, [pc, #288]	; (8000ec8 <HAL_GPIO_Init+0x2ac>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d101      	bne.n	8000dae <HAL_GPIO_Init+0x192>
 8000daa:	2303      	movs	r3, #3
 8000dac:	e006      	b.n	8000dbc <HAL_GPIO_Init+0x1a0>
 8000dae:	2304      	movs	r3, #4
 8000db0:	e004      	b.n	8000dbc <HAL_GPIO_Init+0x1a0>
 8000db2:	2302      	movs	r3, #2
 8000db4:	e002      	b.n	8000dbc <HAL_GPIO_Init+0x1a0>
 8000db6:	2301      	movs	r3, #1
 8000db8:	e000      	b.n	8000dbc <HAL_GPIO_Init+0x1a0>
 8000dba:	2300      	movs	r3, #0
 8000dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dbe:	f002 0203 	and.w	r2, r2, #3
 8000dc2:	0092      	lsls	r2, r2, #2
 8000dc4:	4093      	lsls	r3, r2
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dcc:	493a      	ldr	r1, [pc, #232]	; (8000eb8 <HAL_GPIO_Init+0x29c>)
 8000dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd0:	089b      	lsrs	r3, r3, #2
 8000dd2:	3302      	adds	r3, #2
 8000dd4:	68fa      	ldr	r2, [r7, #12]
 8000dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d006      	beq.n	8000df4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000de6:	4b39      	ldr	r3, [pc, #228]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	4938      	ldr	r1, [pc, #224]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	600b      	str	r3, [r1, #0]
 8000df2:	e006      	b.n	8000e02 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000df4:	4b35      	ldr	r3, [pc, #212]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	4933      	ldr	r1, [pc, #204]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000dfe:	4013      	ands	r3, r2
 8000e00:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d006      	beq.n	8000e1c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e0e:	4b2f      	ldr	r3, [pc, #188]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000e10:	685a      	ldr	r2, [r3, #4]
 8000e12:	492e      	ldr	r1, [pc, #184]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	604b      	str	r3, [r1, #4]
 8000e1a:	e006      	b.n	8000e2a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e1c:	4b2b      	ldr	r3, [pc, #172]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000e1e:	685a      	ldr	r2, [r3, #4]
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	43db      	mvns	r3, r3
 8000e24:	4929      	ldr	r1, [pc, #164]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000e26:	4013      	ands	r3, r2
 8000e28:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d006      	beq.n	8000e44 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e36:	4b25      	ldr	r3, [pc, #148]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000e38:	689a      	ldr	r2, [r3, #8]
 8000e3a:	4924      	ldr	r1, [pc, #144]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	608b      	str	r3, [r1, #8]
 8000e42:	e006      	b.n	8000e52 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e44:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000e46:	689a      	ldr	r2, [r3, #8]
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	491f      	ldr	r1, [pc, #124]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000e4e:	4013      	ands	r3, r2
 8000e50:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d006      	beq.n	8000e6c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000e60:	68da      	ldr	r2, [r3, #12]
 8000e62:	491a      	ldr	r1, [pc, #104]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	60cb      	str	r3, [r1, #12]
 8000e6a:	e006      	b.n	8000e7a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e6c:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000e6e:	68da      	ldr	r2, [r3, #12]
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	43db      	mvns	r3, r3
 8000e74:	4915      	ldr	r1, [pc, #84]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000e76:	4013      	ands	r3, r2
 8000e78:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e86:	fa22 f303 	lsr.w	r3, r2, r3
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f47f aed0 	bne.w	8000c30 <HAL_GPIO_Init+0x14>
  }
}
 8000e90:	bf00      	nop
 8000e92:	372c      	adds	r7, #44	; 0x2c
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	10210000 	.word	0x10210000
 8000ea0:	10110000 	.word	0x10110000
 8000ea4:	10120000 	.word	0x10120000
 8000ea8:	10310000 	.word	0x10310000
 8000eac:	10320000 	.word	0x10320000
 8000eb0:	10220000 	.word	0x10220000
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	40010000 	.word	0x40010000
 8000ebc:	40010800 	.word	0x40010800
 8000ec0:	40010c00 	.word	0x40010c00
 8000ec4:	40011000 	.word	0x40011000
 8000ec8:	40011400 	.word	0x40011400
 8000ecc:	40010400 	.word	0x40010400

08000ed0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	807b      	strh	r3, [r7, #2]
 8000edc:	4613      	mov	r3, r2
 8000ede:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ee0:	787b      	ldrb	r3, [r7, #1]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ee6:	887a      	ldrh	r2, [r7, #2]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000eec:	e003      	b.n	8000ef6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000eee:	887b      	ldrh	r3, [r7, #2]
 8000ef0:	041a      	lsls	r2, r3, #16
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	611a      	str	r2, [r3, #16]
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr

08000f00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d101      	bne.n	8000f12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e11f      	b.n	8001152 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d106      	bne.n	8000f2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff fb7e 	bl	8000628 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2224      	movs	r2, #36	; 0x24
 8000f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f022 0201 	bic.w	r2, r2, #1
 8000f42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000f64:	f000 fce6 	bl	8001934 <HAL_RCC_GetPCLK1Freq>
 8000f68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	4a7b      	ldr	r2, [pc, #492]	; (800115c <HAL_I2C_Init+0x25c>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d807      	bhi.n	8000f84 <HAL_I2C_Init+0x84>
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4a7a      	ldr	r2, [pc, #488]	; (8001160 <HAL_I2C_Init+0x260>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	bf94      	ite	ls
 8000f7c:	2301      	movls	r3, #1
 8000f7e:	2300      	movhi	r3, #0
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	e006      	b.n	8000f92 <HAL_I2C_Init+0x92>
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4a77      	ldr	r2, [pc, #476]	; (8001164 <HAL_I2C_Init+0x264>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	bf94      	ite	ls
 8000f8c:	2301      	movls	r3, #1
 8000f8e:	2300      	movhi	r3, #0
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e0db      	b.n	8001152 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	4a72      	ldr	r2, [pc, #456]	; (8001168 <HAL_I2C_Init+0x268>)
 8000f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa2:	0c9b      	lsrs	r3, r3, #18
 8000fa4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	68ba      	ldr	r2, [r7, #8]
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	6a1b      	ldr	r3, [r3, #32]
 8000fc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	4a64      	ldr	r2, [pc, #400]	; (800115c <HAL_I2C_Init+0x25c>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d802      	bhi.n	8000fd4 <HAL_I2C_Init+0xd4>
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	e009      	b.n	8000fe8 <HAL_I2C_Init+0xe8>
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000fda:	fb02 f303 	mul.w	r3, r2, r3
 8000fde:	4a63      	ldr	r2, [pc, #396]	; (800116c <HAL_I2C_Init+0x26c>)
 8000fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe4:	099b      	lsrs	r3, r3, #6
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	6812      	ldr	r2, [r2, #0]
 8000fec:	430b      	orrs	r3, r1
 8000fee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000ffa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	4956      	ldr	r1, [pc, #344]	; (800115c <HAL_I2C_Init+0x25c>)
 8001004:	428b      	cmp	r3, r1
 8001006:	d80d      	bhi.n	8001024 <HAL_I2C_Init+0x124>
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	1e59      	subs	r1, r3, #1
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	fbb1 f3f3 	udiv	r3, r1, r3
 8001016:	3301      	adds	r3, #1
 8001018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800101c:	2b04      	cmp	r3, #4
 800101e:	bf38      	it	cc
 8001020:	2304      	movcc	r3, #4
 8001022:	e04f      	b.n	80010c4 <HAL_I2C_Init+0x1c4>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d111      	bne.n	8001050 <HAL_I2C_Init+0x150>
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	1e58      	subs	r0, r3, #1
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6859      	ldr	r1, [r3, #4]
 8001034:	460b      	mov	r3, r1
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	440b      	add	r3, r1
 800103a:	fbb0 f3f3 	udiv	r3, r0, r3
 800103e:	3301      	adds	r3, #1
 8001040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001044:	2b00      	cmp	r3, #0
 8001046:	bf0c      	ite	eq
 8001048:	2301      	moveq	r3, #1
 800104a:	2300      	movne	r3, #0
 800104c:	b2db      	uxtb	r3, r3
 800104e:	e012      	b.n	8001076 <HAL_I2C_Init+0x176>
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	1e58      	subs	r0, r3, #1
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6859      	ldr	r1, [r3, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	440b      	add	r3, r1
 800105e:	0099      	lsls	r1, r3, #2
 8001060:	440b      	add	r3, r1
 8001062:	fbb0 f3f3 	udiv	r3, r0, r3
 8001066:	3301      	adds	r3, #1
 8001068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800106c:	2b00      	cmp	r3, #0
 800106e:	bf0c      	ite	eq
 8001070:	2301      	moveq	r3, #1
 8001072:	2300      	movne	r3, #0
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_I2C_Init+0x17e>
 800107a:	2301      	movs	r3, #1
 800107c:	e022      	b.n	80010c4 <HAL_I2C_Init+0x1c4>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10e      	bne.n	80010a4 <HAL_I2C_Init+0x1a4>
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	1e58      	subs	r0, r3, #1
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6859      	ldr	r1, [r3, #4]
 800108e:	460b      	mov	r3, r1
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	440b      	add	r3, r1
 8001094:	fbb0 f3f3 	udiv	r3, r0, r3
 8001098:	3301      	adds	r3, #1
 800109a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800109e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010a2:	e00f      	b.n	80010c4 <HAL_I2C_Init+0x1c4>
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	1e58      	subs	r0, r3, #1
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6859      	ldr	r1, [r3, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	440b      	add	r3, r1
 80010b2:	0099      	lsls	r1, r3, #2
 80010b4:	440b      	add	r3, r1
 80010b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80010ba:	3301      	adds	r3, #1
 80010bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010c4:	6879      	ldr	r1, [r7, #4]
 80010c6:	6809      	ldr	r1, [r1, #0]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69da      	ldr	r2, [r3, #28]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a1b      	ldr	r3, [r3, #32]
 80010de:	431a      	orrs	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	430a      	orrs	r2, r1
 80010e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80010f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	6911      	ldr	r1, [r2, #16]
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	68d2      	ldr	r2, [r2, #12]
 80010fe:	4311      	orrs	r1, r2
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	6812      	ldr	r2, [r2, #0]
 8001104:	430b      	orrs	r3, r1
 8001106:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	695a      	ldr	r2, [r3, #20]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	699b      	ldr	r3, [r3, #24]
 800111a:	431a      	orrs	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	430a      	orrs	r2, r1
 8001122:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f042 0201 	orr.w	r2, r2, #1
 8001132:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2220      	movs	r2, #32
 800113e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	000186a0 	.word	0x000186a0
 8001160:	001e847f 	.word	0x001e847f
 8001164:	003d08ff 	.word	0x003d08ff
 8001168:	431bde83 	.word	0x431bde83
 800116c:	10624dd3 	.word	0x10624dd3

08001170 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e26c      	b.n	800165c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	2b00      	cmp	r3, #0
 800118c:	f000 8087 	beq.w	800129e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001190:	4b92      	ldr	r3, [pc, #584]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 030c 	and.w	r3, r3, #12
 8001198:	2b04      	cmp	r3, #4
 800119a:	d00c      	beq.n	80011b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800119c:	4b8f      	ldr	r3, [pc, #572]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 030c 	and.w	r3, r3, #12
 80011a4:	2b08      	cmp	r3, #8
 80011a6:	d112      	bne.n	80011ce <HAL_RCC_OscConfig+0x5e>
 80011a8:	4b8c      	ldr	r3, [pc, #560]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011b4:	d10b      	bne.n	80011ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b6:	4b89      	ldr	r3, [pc, #548]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d06c      	beq.n	800129c <HAL_RCC_OscConfig+0x12c>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d168      	bne.n	800129c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e246      	b.n	800165c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011d6:	d106      	bne.n	80011e6 <HAL_RCC_OscConfig+0x76>
 80011d8:	4b80      	ldr	r3, [pc, #512]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a7f      	ldr	r2, [pc, #508]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80011de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	e02e      	b.n	8001244 <HAL_RCC_OscConfig+0xd4>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10c      	bne.n	8001208 <HAL_RCC_OscConfig+0x98>
 80011ee:	4b7b      	ldr	r3, [pc, #492]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a7a      	ldr	r2, [pc, #488]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80011f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	4b78      	ldr	r3, [pc, #480]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a77      	ldr	r2, [pc, #476]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001200:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	e01d      	b.n	8001244 <HAL_RCC_OscConfig+0xd4>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001210:	d10c      	bne.n	800122c <HAL_RCC_OscConfig+0xbc>
 8001212:	4b72      	ldr	r3, [pc, #456]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a71      	ldr	r2, [pc, #452]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	4b6f      	ldr	r3, [pc, #444]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a6e      	ldr	r2, [pc, #440]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	e00b      	b.n	8001244 <HAL_RCC_OscConfig+0xd4>
 800122c:	4b6b      	ldr	r3, [pc, #428]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a6a      	ldr	r2, [pc, #424]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001236:	6013      	str	r3, [r2, #0]
 8001238:	4b68      	ldr	r3, [pc, #416]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a67      	ldr	r2, [pc, #412]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 800123e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001242:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d013      	beq.n	8001274 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124c:	f7ff fbfc 	bl	8000a48 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001254:	f7ff fbf8 	bl	8000a48 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b64      	cmp	r3, #100	; 0x64
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e1fa      	b.n	800165c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001266:	4b5d      	ldr	r3, [pc, #372]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0f0      	beq.n	8001254 <HAL_RCC_OscConfig+0xe4>
 8001272:	e014      	b.n	800129e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001274:	f7ff fbe8 	bl	8000a48 <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800127c:	f7ff fbe4 	bl	8000a48 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b64      	cmp	r3, #100	; 0x64
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e1e6      	b.n	800165c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800128e:	4b53      	ldr	r3, [pc, #332]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f0      	bne.n	800127c <HAL_RCC_OscConfig+0x10c>
 800129a:	e000      	b.n	800129e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800129c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d063      	beq.n	8001372 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012aa:	4b4c      	ldr	r3, [pc, #304]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 030c 	and.w	r3, r3, #12
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d00b      	beq.n	80012ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012b6:	4b49      	ldr	r3, [pc, #292]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 030c 	and.w	r3, r3, #12
 80012be:	2b08      	cmp	r3, #8
 80012c0:	d11c      	bne.n	80012fc <HAL_RCC_OscConfig+0x18c>
 80012c2:	4b46      	ldr	r3, [pc, #280]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d116      	bne.n	80012fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ce:	4b43      	ldr	r3, [pc, #268]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d005      	beq.n	80012e6 <HAL_RCC_OscConfig+0x176>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d001      	beq.n	80012e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e1ba      	b.n	800165c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e6:	4b3d      	ldr	r3, [pc, #244]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	4939      	ldr	r1, [pc, #228]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012fa:	e03a      	b.n	8001372 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d020      	beq.n	8001346 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001304:	4b36      	ldr	r3, [pc, #216]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 8001306:	2201      	movs	r2, #1
 8001308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130a:	f7ff fb9d 	bl	8000a48 <HAL_GetTick>
 800130e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001312:	f7ff fb99 	bl	8000a48 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e19b      	b.n	800165c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001324:	4b2d      	ldr	r3, [pc, #180]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0f0      	beq.n	8001312 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001330:	4b2a      	ldr	r3, [pc, #168]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	4927      	ldr	r1, [pc, #156]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001340:	4313      	orrs	r3, r2
 8001342:	600b      	str	r3, [r1, #0]
 8001344:	e015      	b.n	8001372 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001346:	4b26      	ldr	r3, [pc, #152]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134c:	f7ff fb7c 	bl	8000a48 <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001354:	f7ff fb78 	bl	8000a48 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e17a      	b.n	800165c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001366:	4b1d      	ldr	r3, [pc, #116]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f0      	bne.n	8001354 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0308 	and.w	r3, r3, #8
 800137a:	2b00      	cmp	r3, #0
 800137c:	d03a      	beq.n	80013f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d019      	beq.n	80013ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001386:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <HAL_RCC_OscConfig+0x274>)
 8001388:	2201      	movs	r2, #1
 800138a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800138c:	f7ff fb5c 	bl	8000a48 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001394:	f7ff fb58 	bl	8000a48 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e15a      	b.n	800165c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a6:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80013a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f0      	beq.n	8001394 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013b2:	2001      	movs	r0, #1
 80013b4:	f000 fb2a 	bl	8001a0c <RCC_Delay>
 80013b8:	e01c      	b.n	80013f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <HAL_RCC_OscConfig+0x274>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c0:	f7ff fb42 	bl	8000a48 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c6:	e00f      	b.n	80013e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013c8:	f7ff fb3e 	bl	8000a48 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d908      	bls.n	80013e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e140      	b.n	800165c <HAL_RCC_OscConfig+0x4ec>
 80013da:	bf00      	nop
 80013dc:	40021000 	.word	0x40021000
 80013e0:	42420000 	.word	0x42420000
 80013e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e8:	4b9e      	ldr	r3, [pc, #632]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 80013ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1e9      	bne.n	80013c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 80a6 	beq.w	800154e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001402:	2300      	movs	r3, #0
 8001404:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001406:	4b97      	ldr	r3, [pc, #604]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d10d      	bne.n	800142e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001412:	4b94      	ldr	r3, [pc, #592]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	4a93      	ldr	r2, [pc, #588]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 8001418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141c:	61d3      	str	r3, [r2, #28]
 800141e:	4b91      	ldr	r3, [pc, #580]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800142a:	2301      	movs	r3, #1
 800142c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800142e:	4b8e      	ldr	r3, [pc, #568]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001436:	2b00      	cmp	r3, #0
 8001438:	d118      	bne.n	800146c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800143a:	4b8b      	ldr	r3, [pc, #556]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a8a      	ldr	r2, [pc, #552]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 8001440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001444:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001446:	f7ff faff 	bl	8000a48 <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800144e:	f7ff fafb 	bl	8000a48 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b64      	cmp	r3, #100	; 0x64
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e0fd      	b.n	800165c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001460:	4b81      	ldr	r3, [pc, #516]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0f0      	beq.n	800144e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d106      	bne.n	8001482 <HAL_RCC_OscConfig+0x312>
 8001474:	4b7b      	ldr	r3, [pc, #492]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	4a7a      	ldr	r2, [pc, #488]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	6213      	str	r3, [r2, #32]
 8001480:	e02d      	b.n	80014de <HAL_RCC_OscConfig+0x36e>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d10c      	bne.n	80014a4 <HAL_RCC_OscConfig+0x334>
 800148a:	4b76      	ldr	r3, [pc, #472]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 800148c:	6a1b      	ldr	r3, [r3, #32]
 800148e:	4a75      	ldr	r2, [pc, #468]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 8001490:	f023 0301 	bic.w	r3, r3, #1
 8001494:	6213      	str	r3, [r2, #32]
 8001496:	4b73      	ldr	r3, [pc, #460]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	4a72      	ldr	r2, [pc, #456]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 800149c:	f023 0304 	bic.w	r3, r3, #4
 80014a0:	6213      	str	r3, [r2, #32]
 80014a2:	e01c      	b.n	80014de <HAL_RCC_OscConfig+0x36e>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	2b05      	cmp	r3, #5
 80014aa:	d10c      	bne.n	80014c6 <HAL_RCC_OscConfig+0x356>
 80014ac:	4b6d      	ldr	r3, [pc, #436]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	4a6c      	ldr	r2, [pc, #432]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 80014b2:	f043 0304 	orr.w	r3, r3, #4
 80014b6:	6213      	str	r3, [r2, #32]
 80014b8:	4b6a      	ldr	r3, [pc, #424]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	4a69      	ldr	r2, [pc, #420]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	6213      	str	r3, [r2, #32]
 80014c4:	e00b      	b.n	80014de <HAL_RCC_OscConfig+0x36e>
 80014c6:	4b67      	ldr	r3, [pc, #412]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 80014c8:	6a1b      	ldr	r3, [r3, #32]
 80014ca:	4a66      	ldr	r2, [pc, #408]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 80014cc:	f023 0301 	bic.w	r3, r3, #1
 80014d0:	6213      	str	r3, [r2, #32]
 80014d2:	4b64      	ldr	r3, [pc, #400]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 80014d4:	6a1b      	ldr	r3, [r3, #32]
 80014d6:	4a63      	ldr	r2, [pc, #396]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 80014d8:	f023 0304 	bic.w	r3, r3, #4
 80014dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d015      	beq.n	8001512 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e6:	f7ff faaf 	bl	8000a48 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ec:	e00a      	b.n	8001504 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ee:	f7ff faab 	bl	8000a48 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e0ab      	b.n	800165c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001504:	4b57      	ldr	r3, [pc, #348]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0ee      	beq.n	80014ee <HAL_RCC_OscConfig+0x37e>
 8001510:	e014      	b.n	800153c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001512:	f7ff fa99 	bl	8000a48 <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001518:	e00a      	b.n	8001530 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800151a:	f7ff fa95 	bl	8000a48 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	f241 3288 	movw	r2, #5000	; 0x1388
 8001528:	4293      	cmp	r3, r2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e095      	b.n	800165c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001530:	4b4c      	ldr	r3, [pc, #304]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 8001532:	6a1b      	ldr	r3, [r3, #32]
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1ee      	bne.n	800151a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800153c:	7dfb      	ldrb	r3, [r7, #23]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d105      	bne.n	800154e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001542:	4b48      	ldr	r3, [pc, #288]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	4a47      	ldr	r2, [pc, #284]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 8001548:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800154c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	2b00      	cmp	r3, #0
 8001554:	f000 8081 	beq.w	800165a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001558:	4b42      	ldr	r3, [pc, #264]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 030c 	and.w	r3, r3, #12
 8001560:	2b08      	cmp	r3, #8
 8001562:	d061      	beq.n	8001628 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	2b02      	cmp	r3, #2
 800156a:	d146      	bne.n	80015fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800156c:	4b3f      	ldr	r3, [pc, #252]	; (800166c <HAL_RCC_OscConfig+0x4fc>)
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001572:	f7ff fa69 	bl	8000a48 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800157a:	f7ff fa65 	bl	8000a48 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e067      	b.n	800165c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800158c:	4b35      	ldr	r3, [pc, #212]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1f0      	bne.n	800157a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015a0:	d108      	bne.n	80015b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015a2:	4b30      	ldr	r3, [pc, #192]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	492d      	ldr	r1, [pc, #180]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015b4:	4b2b      	ldr	r3, [pc, #172]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a19      	ldr	r1, [r3, #32]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c4:	430b      	orrs	r3, r1
 80015c6:	4927      	ldr	r1, [pc, #156]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015cc:	4b27      	ldr	r3, [pc, #156]	; (800166c <HAL_RCC_OscConfig+0x4fc>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d2:	f7ff fa39 	bl	8000a48 <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015da:	f7ff fa35 	bl	8000a48 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e037      	b.n	800165c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015ec:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d0f0      	beq.n	80015da <HAL_RCC_OscConfig+0x46a>
 80015f8:	e02f      	b.n	800165a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015fa:	4b1c      	ldr	r3, [pc, #112]	; (800166c <HAL_RCC_OscConfig+0x4fc>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001600:	f7ff fa22 	bl	8000a48 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001608:	f7ff fa1e 	bl	8000a48 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e020      	b.n	800165c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800161a:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1f0      	bne.n	8001608 <HAL_RCC_OscConfig+0x498>
 8001626:	e018      	b.n	800165a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69db      	ldr	r3, [r3, #28]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d101      	bne.n	8001634 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e013      	b.n	800165c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001634:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	429a      	cmp	r2, r3
 8001646:	d106      	bne.n	8001656 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001652:	429a      	cmp	r2, r3
 8001654:	d001      	beq.n	800165a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e000      	b.n	800165c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40021000 	.word	0x40021000
 8001668:	40007000 	.word	0x40007000
 800166c:	42420060 	.word	0x42420060

08001670 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d101      	bne.n	8001684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e0d0      	b.n	8001826 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001684:	4b6a      	ldr	r3, [pc, #424]	; (8001830 <HAL_RCC_ClockConfig+0x1c0>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0307 	and.w	r3, r3, #7
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	429a      	cmp	r2, r3
 8001690:	d910      	bls.n	80016b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001692:	4b67      	ldr	r3, [pc, #412]	; (8001830 <HAL_RCC_ClockConfig+0x1c0>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f023 0207 	bic.w	r2, r3, #7
 800169a:	4965      	ldr	r1, [pc, #404]	; (8001830 <HAL_RCC_ClockConfig+0x1c0>)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	4313      	orrs	r3, r2
 80016a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a2:	4b63      	ldr	r3, [pc, #396]	; (8001830 <HAL_RCC_ClockConfig+0x1c0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	683a      	ldr	r2, [r7, #0]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d001      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e0b8      	b.n	8001826 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d020      	beq.n	8001702 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d005      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016cc:	4b59      	ldr	r3, [pc, #356]	; (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	4a58      	ldr	r2, [pc, #352]	; (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 80016d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0308 	and.w	r3, r3, #8
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d005      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016e4:	4b53      	ldr	r3, [pc, #332]	; (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	4a52      	ldr	r2, [pc, #328]	; (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 80016ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f0:	4b50      	ldr	r3, [pc, #320]	; (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	494d      	ldr	r1, [pc, #308]	; (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b00      	cmp	r3, #0
 800170c:	d040      	beq.n	8001790 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d107      	bne.n	8001726 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001716:	4b47      	ldr	r3, [pc, #284]	; (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d115      	bne.n	800174e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e07f      	b.n	8001826 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b02      	cmp	r3, #2
 800172c:	d107      	bne.n	800173e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800172e:	4b41      	ldr	r3, [pc, #260]	; (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d109      	bne.n	800174e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e073      	b.n	8001826 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800173e:	4b3d      	ldr	r3, [pc, #244]	; (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e06b      	b.n	8001826 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800174e:	4b39      	ldr	r3, [pc, #228]	; (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f023 0203 	bic.w	r2, r3, #3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	4936      	ldr	r1, [pc, #216]	; (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 800175c:	4313      	orrs	r3, r2
 800175e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001760:	f7ff f972 	bl	8000a48 <HAL_GetTick>
 8001764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001766:	e00a      	b.n	800177e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001768:	f7ff f96e 	bl	8000a48 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	f241 3288 	movw	r2, #5000	; 0x1388
 8001776:	4293      	cmp	r3, r2
 8001778:	d901      	bls.n	800177e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e053      	b.n	8001826 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800177e:	4b2d      	ldr	r3, [pc, #180]	; (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f003 020c 	and.w	r2, r3, #12
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	429a      	cmp	r2, r3
 800178e:	d1eb      	bne.n	8001768 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001790:	4b27      	ldr	r3, [pc, #156]	; (8001830 <HAL_RCC_ClockConfig+0x1c0>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0307 	and.w	r3, r3, #7
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	429a      	cmp	r2, r3
 800179c:	d210      	bcs.n	80017c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800179e:	4b24      	ldr	r3, [pc, #144]	; (8001830 <HAL_RCC_ClockConfig+0x1c0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f023 0207 	bic.w	r2, r3, #7
 80017a6:	4922      	ldr	r1, [pc, #136]	; (8001830 <HAL_RCC_ClockConfig+0x1c0>)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ae:	4b20      	ldr	r3, [pc, #128]	; (8001830 <HAL_RCC_ClockConfig+0x1c0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d001      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e032      	b.n	8001826 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d008      	beq.n	80017de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017cc:	4b19      	ldr	r3, [pc, #100]	; (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	4916      	ldr	r1, [pc, #88]	; (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d009      	beq.n	80017fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017ea:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	490e      	ldr	r1, [pc, #56]	; (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017fe:	f000 f82d 	bl	800185c <HAL_RCC_GetSysClockFreq>
 8001802:	4601      	mov	r1, r0
 8001804:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	091b      	lsrs	r3, r3, #4
 800180a:	f003 030f 	and.w	r3, r3, #15
 800180e:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <HAL_RCC_ClockConfig+0x1c8>)
 8001810:	5cd3      	ldrb	r3, [r2, r3]
 8001812:	fa21 f303 	lsr.w	r3, r1, r3
 8001816:	4a09      	ldr	r2, [pc, #36]	; (800183c <HAL_RCC_ClockConfig+0x1cc>)
 8001818:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_RCC_ClockConfig+0x1d0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff f83a 	bl	8000898 <HAL_InitTick>

  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40022000 	.word	0x40022000
 8001834:	40021000 	.word	0x40021000
 8001838:	08005730 	.word	0x08005730
 800183c:	20000000 	.word	0x20000000
 8001840:	20000004 	.word	0x20000004

08001844 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8001848:	4b03      	ldr	r3, [pc, #12]	; (8001858 <HAL_RCC_EnableCSS+0x14>)
 800184a:	2201      	movs	r2, #1
 800184c:	601a      	str	r2, [r3, #0]
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	4242004c 	.word	0x4242004c

0800185c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800185c:	b490      	push	{r4, r7}
 800185e:	b08a      	sub	sp, #40	; 0x28
 8001860:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001862:	4b2a      	ldr	r3, [pc, #168]	; (800190c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001864:	1d3c      	adds	r4, r7, #4
 8001866:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001868:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800186c:	4b28      	ldr	r3, [pc, #160]	; (8001910 <HAL_RCC_GetSysClockFreq+0xb4>)
 800186e:	881b      	ldrh	r3, [r3, #0]
 8001870:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
 8001876:	2300      	movs	r3, #0
 8001878:	61bb      	str	r3, [r7, #24]
 800187a:	2300      	movs	r3, #0
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001882:	2300      	movs	r3, #0
 8001884:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001886:	4b23      	ldr	r3, [pc, #140]	; (8001914 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	f003 030c 	and.w	r3, r3, #12
 8001892:	2b04      	cmp	r3, #4
 8001894:	d002      	beq.n	800189c <HAL_RCC_GetSysClockFreq+0x40>
 8001896:	2b08      	cmp	r3, #8
 8001898:	d003      	beq.n	80018a2 <HAL_RCC_GetSysClockFreq+0x46>
 800189a:	e02d      	b.n	80018f8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800189c:	4b1e      	ldr	r3, [pc, #120]	; (8001918 <HAL_RCC_GetSysClockFreq+0xbc>)
 800189e:	623b      	str	r3, [r7, #32]
      break;
 80018a0:	e02d      	b.n	80018fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	0c9b      	lsrs	r3, r3, #18
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018ae:	4413      	add	r3, r2
 80018b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80018b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d013      	beq.n	80018e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018c0:	4b14      	ldr	r3, [pc, #80]	; (8001914 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	0c5b      	lsrs	r3, r3, #17
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018ce:	4413      	add	r3, r2
 80018d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80018d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	4a0f      	ldr	r2, [pc, #60]	; (8001918 <HAL_RCC_GetSysClockFreq+0xbc>)
 80018da:	fb02 f203 	mul.w	r2, r2, r3
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
 80018e6:	e004      	b.n	80018f2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	4a0c      	ldr	r2, [pc, #48]	; (800191c <HAL_RCC_GetSysClockFreq+0xc0>)
 80018ec:	fb02 f303 	mul.w	r3, r2, r3
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	623b      	str	r3, [r7, #32]
      break;
 80018f6:	e002      	b.n	80018fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018f8:	4b07      	ldr	r3, [pc, #28]	; (8001918 <HAL_RCC_GetSysClockFreq+0xbc>)
 80018fa:	623b      	str	r3, [r7, #32]
      break;
 80018fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018fe:	6a3b      	ldr	r3, [r7, #32]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3728      	adds	r7, #40	; 0x28
 8001904:	46bd      	mov	sp, r7
 8001906:	bc90      	pop	{r4, r7}
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	080056e0 	.word	0x080056e0
 8001910:	080056f0 	.word	0x080056f0
 8001914:	40021000 	.word	0x40021000
 8001918:	007a1200 	.word	0x007a1200
 800191c:	003d0900 	.word	0x003d0900

08001920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001924:	4b02      	ldr	r3, [pc, #8]	; (8001930 <HAL_RCC_GetHCLKFreq+0x10>)
 8001926:	681b      	ldr	r3, [r3, #0]
}
 8001928:	4618      	mov	r0, r3
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr
 8001930:	20000000 	.word	0x20000000

08001934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001938:	f7ff fff2 	bl	8001920 <HAL_RCC_GetHCLKFreq>
 800193c:	4601      	mov	r1, r0
 800193e:	4b05      	ldr	r3, [pc, #20]	; (8001954 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	0a1b      	lsrs	r3, r3, #8
 8001944:	f003 0307 	and.w	r3, r3, #7
 8001948:	4a03      	ldr	r2, [pc, #12]	; (8001958 <HAL_RCC_GetPCLK1Freq+0x24>)
 800194a:	5cd3      	ldrb	r3, [r2, r3]
 800194c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001950:	4618      	mov	r0, r3
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40021000 	.word	0x40021000
 8001958:	08005740 	.word	0x08005740

0800195c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001960:	f7ff ffde 	bl	8001920 <HAL_RCC_GetHCLKFreq>
 8001964:	4601      	mov	r1, r0
 8001966:	4b05      	ldr	r3, [pc, #20]	; (800197c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	0adb      	lsrs	r3, r3, #11
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	4a03      	ldr	r2, [pc, #12]	; (8001980 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001972:	5cd3      	ldrb	r3, [r2, r3]
 8001974:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001978:	4618      	mov	r0, r3
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40021000 	.word	0x40021000
 8001980:	08005740 	.word	0x08005740

08001984 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	220f      	movs	r2, #15
 8001992:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <HAL_RCC_GetClockConfig+0x58>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 0203 	and.w	r2, r3, #3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019a0:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <HAL_RCC_GetClockConfig+0x58>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019ac:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <HAL_RCC_GetClockConfig+0x58>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80019b8:	4b08      	ldr	r3, [pc, #32]	; (80019dc <HAL_RCC_GetClockConfig+0x58>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	08db      	lsrs	r3, r3, #3
 80019be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <HAL_RCC_GetClockConfig+0x5c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0207 	and.w	r2, r3, #7
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40022000 	.word	0x40022000

080019e4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_RCC_NMI_IRQHandler+0x20>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f0:	2b80      	cmp	r3, #128	; 0x80
 80019f2:	d104      	bne.n	80019fe <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80019f4:	f000 f828 	bl	8001a48 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80019f8:	4b03      	ldr	r3, [pc, #12]	; (8001a08 <HAL_RCC_NMI_IRQHandler+0x24>)
 80019fa:	2280      	movs	r2, #128	; 0x80
 80019fc:	701a      	strb	r2, [r3, #0]
  }
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40021000 	.word	0x40021000
 8001a08:	4002100a 	.word	0x4002100a

08001a0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a14:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <RCC_Delay+0x34>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <RCC_Delay+0x38>)
 8001a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1e:	0a5b      	lsrs	r3, r3, #9
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	fb02 f303 	mul.w	r3, r2, r3
 8001a26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a28:	bf00      	nop
  }
  while (Delay --);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	1e5a      	subs	r2, r3, #1
 8001a2e:	60fa      	str	r2, [r7, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1f9      	bne.n	8001a28 <RCC_Delay+0x1c>
}
 8001a34:	bf00      	nop
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	20000000 	.word	0x20000000
 8001a44:	10624dd3 	.word	0x10624dd3

08001a48 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr

08001a54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e041      	b.n	8001aea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d106      	bne.n	8001a80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7fe fe24 	bl	80006c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2202      	movs	r2, #2
 8001a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3304      	adds	r3, #4
 8001a90:	4619      	mov	r1, r3
 8001a92:	4610      	mov	r0, r2
 8001a94:	f000 fc66 	bl	8002364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d001      	beq.n	8001b0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e03a      	b.n	8001b82 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2202      	movs	r2, #2
 8001b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68da      	ldr	r2, [r3, #12]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0201 	orr.w	r2, r2, #1
 8001b22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a18      	ldr	r2, [pc, #96]	; (8001b8c <HAL_TIM_Base_Start_IT+0x98>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d00e      	beq.n	8001b4c <HAL_TIM_Base_Start_IT+0x58>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b36:	d009      	beq.n	8001b4c <HAL_TIM_Base_Start_IT+0x58>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a14      	ldr	r2, [pc, #80]	; (8001b90 <HAL_TIM_Base_Start_IT+0x9c>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d004      	beq.n	8001b4c <HAL_TIM_Base_Start_IT+0x58>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a13      	ldr	r2, [pc, #76]	; (8001b94 <HAL_TIM_Base_Start_IT+0xa0>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d111      	bne.n	8001b70 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2b06      	cmp	r3, #6
 8001b5c:	d010      	beq.n	8001b80 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f042 0201 	orr.w	r2, r2, #1
 8001b6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b6e:	e007      	b.n	8001b80 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0201 	orr.w	r2, r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr
 8001b8c:	40012c00 	.word	0x40012c00
 8001b90:	40000400 	.word	0x40000400
 8001b94:	40000800 	.word	0x40000800

08001b98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e041      	b.n	8001c2e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d106      	bne.n	8001bc4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f839 	bl	8001c36 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3304      	adds	r3, #4
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	f000 fbc4 	bl	8002364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr

08001c48 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e041      	b.n	8001cde <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d106      	bne.n	8001c74 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f839 	bl	8001ce6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2202      	movs	r2, #2
 8001c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3304      	adds	r3, #4
 8001c84:	4619      	mov	r1, r3
 8001c86:	4610      	mov	r0, r2
 8001c88:	f000 fb6c 	bl	8002364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d122      	bne.n	8001d54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d11b      	bne.n	8001d54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f06f 0202 	mvn.w	r2, #2
 8001d24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 faf6 	bl	800232c <HAL_TIM_IC_CaptureCallback>
 8001d40:	e005      	b.n	8001d4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 fae9 	bl	800231a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 faf8 	bl	800233e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	f003 0304 	and.w	r3, r3, #4
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	d122      	bne.n	8001da8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d11b      	bne.n	8001da8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f06f 0204 	mvn.w	r2, #4
 8001d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 facc 	bl	800232c <HAL_TIM_IC_CaptureCallback>
 8001d94:	e005      	b.n	8001da2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 fabf 	bl	800231a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 face 	bl	800233e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b08      	cmp	r3, #8
 8001db4:	d122      	bne.n	8001dfc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	f003 0308 	and.w	r3, r3, #8
 8001dc0:	2b08      	cmp	r3, #8
 8001dc2:	d11b      	bne.n	8001dfc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f06f 0208 	mvn.w	r2, #8
 8001dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2204      	movs	r2, #4
 8001dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 faa2 	bl	800232c <HAL_TIM_IC_CaptureCallback>
 8001de8:	e005      	b.n	8001df6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 fa95 	bl	800231a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 faa4 	bl	800233e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	f003 0310 	and.w	r3, r3, #16
 8001e06:	2b10      	cmp	r3, #16
 8001e08:	d122      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	f003 0310 	and.w	r3, r3, #16
 8001e14:	2b10      	cmp	r3, #16
 8001e16:	d11b      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f06f 0210 	mvn.w	r2, #16
 8001e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2208      	movs	r2, #8
 8001e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 fa78 	bl	800232c <HAL_TIM_IC_CaptureCallback>
 8001e3c:	e005      	b.n	8001e4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 fa6b 	bl	800231a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 fa7a 	bl	800233e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d10e      	bne.n	8001e7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d107      	bne.n	8001e7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0201 	mvn.w	r2, #1
 8001e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7fe fb8e 	bl	8000598 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e86:	2b80      	cmp	r3, #128	; 0x80
 8001e88:	d10e      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e94:	2b80      	cmp	r3, #128	; 0x80
 8001e96:	d107      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 fe53 	bl	8002b4e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb2:	2b40      	cmp	r3, #64	; 0x40
 8001eb4:	d10e      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec0:	2b40      	cmp	r3, #64	; 0x40
 8001ec2:	d107      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 fa3e 	bl	8002350 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	f003 0320 	and.w	r3, r3, #32
 8001ede:	2b20      	cmp	r3, #32
 8001ee0:	d10e      	bne.n	8001f00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f003 0320 	and.w	r3, r3, #32
 8001eec:	2b20      	cmp	r3, #32
 8001eee:	d107      	bne.n	8001f00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f06f 0220 	mvn.w	r2, #32
 8001ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 fe1e 	bl	8002b3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f00:	bf00      	nop
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d101      	bne.n	8001f22 <HAL_TIM_IC_ConfigChannel+0x1a>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e082      	b.n	8002028 <HAL_TIM_IC_ConfigChannel+0x120>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d11b      	bne.n	8001f68 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6818      	ldr	r0, [r3, #0]
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	6819      	ldr	r1, [r3, #0]
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	f000 fbfa 	bl	8002738 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	699a      	ldr	r2, [r3, #24]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 020c 	bic.w	r2, r2, #12
 8001f52:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6999      	ldr	r1, [r3, #24]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	619a      	str	r2, [r3, #24]
 8001f66:	e05a      	b.n	800201e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	d11c      	bne.n	8001fa8 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6818      	ldr	r0, [r3, #0]
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	6819      	ldr	r1, [r3, #0]
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	f000 fc63 	bl	8002848 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	699a      	ldr	r2, [r3, #24]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001f90:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6999      	ldr	r1, [r3, #24]
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	021a      	lsls	r2, r3, #8
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	619a      	str	r2, [r3, #24]
 8001fa6:	e03a      	b.n	800201e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b08      	cmp	r3, #8
 8001fac:	d11b      	bne.n	8001fe6 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6818      	ldr	r0, [r3, #0]
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	6819      	ldr	r1, [r3, #0]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	f000 fcae 	bl	800291e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	69da      	ldr	r2, [r3, #28]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 020c 	bic.w	r2, r2, #12
 8001fd0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	69d9      	ldr	r1, [r3, #28]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	61da      	str	r2, [r3, #28]
 8001fe4:	e01b      	b.n	800201e <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6818      	ldr	r0, [r3, #0]
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	6819      	ldr	r1, [r3, #0]
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	f000 fccd 	bl	8002994 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	69da      	ldr	r2, [r3, #28]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002008:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	69d9      	ldr	r1, [r3, #28]
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	021a      	lsls	r2, r3, #8
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002042:	2b01      	cmp	r3, #1
 8002044:	d101      	bne.n	800204a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002046:	2302      	movs	r3, #2
 8002048:	e0ac      	b.n	80021a4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b0c      	cmp	r3, #12
 8002056:	f200 809f 	bhi.w	8002198 <HAL_TIM_PWM_ConfigChannel+0x168>
 800205a:	a201      	add	r2, pc, #4	; (adr r2, 8002060 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800205c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002060:	08002095 	.word	0x08002095
 8002064:	08002199 	.word	0x08002199
 8002068:	08002199 	.word	0x08002199
 800206c:	08002199 	.word	0x08002199
 8002070:	080020d5 	.word	0x080020d5
 8002074:	08002199 	.word	0x08002199
 8002078:	08002199 	.word	0x08002199
 800207c:	08002199 	.word	0x08002199
 8002080:	08002117 	.word	0x08002117
 8002084:	08002199 	.word	0x08002199
 8002088:	08002199 	.word	0x08002199
 800208c:	08002199 	.word	0x08002199
 8002090:	08002157 	.word	0x08002157
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68b9      	ldr	r1, [r7, #8]
 800209a:	4618      	mov	r0, r3
 800209c:	f000 f9c4 	bl	8002428 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	699a      	ldr	r2, [r3, #24]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f042 0208 	orr.w	r2, r2, #8
 80020ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	699a      	ldr	r2, [r3, #24]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0204 	bic.w	r2, r2, #4
 80020be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6999      	ldr	r1, [r3, #24]
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	691a      	ldr	r2, [r3, #16]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	619a      	str	r2, [r3, #24]
      break;
 80020d2:	e062      	b.n	800219a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68b9      	ldr	r1, [r7, #8]
 80020da:	4618      	mov	r0, r3
 80020dc:	f000 fa0a 	bl	80024f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	699a      	ldr	r2, [r3, #24]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	699a      	ldr	r2, [r3, #24]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6999      	ldr	r1, [r3, #24]
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	021a      	lsls	r2, r3, #8
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	430a      	orrs	r2, r1
 8002112:	619a      	str	r2, [r3, #24]
      break;
 8002114:	e041      	b.n	800219a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68b9      	ldr	r1, [r7, #8]
 800211c:	4618      	mov	r0, r3
 800211e:	f000 fa53 	bl	80025c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	69da      	ldr	r2, [r3, #28]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f042 0208 	orr.w	r2, r2, #8
 8002130:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	69da      	ldr	r2, [r3, #28]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 0204 	bic.w	r2, r2, #4
 8002140:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	69d9      	ldr	r1, [r3, #28]
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	691a      	ldr	r2, [r3, #16]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	61da      	str	r2, [r3, #28]
      break;
 8002154:	e021      	b.n	800219a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68b9      	ldr	r1, [r7, #8]
 800215c:	4618      	mov	r0, r3
 800215e:	f000 fa9d 	bl	800269c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	69da      	ldr	r2, [r3, #28]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002170:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	69da      	ldr	r2, [r3, #28]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002180:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	69d9      	ldr	r1, [r3, #28]
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	021a      	lsls	r2, r3, #8
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	61da      	str	r2, [r3, #28]
      break;
 8002196:	e000      	b.n	800219a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002198:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d101      	bne.n	80021c4 <HAL_TIM_ConfigClockSource+0x18>
 80021c0:	2302      	movs	r3, #2
 80021c2:	e0a6      	b.n	8002312 <HAL_TIM_ConfigClockSource+0x166>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2202      	movs	r2, #2
 80021d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80021e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b40      	cmp	r3, #64	; 0x40
 80021fa:	d067      	beq.n	80022cc <HAL_TIM_ConfigClockSource+0x120>
 80021fc:	2b40      	cmp	r3, #64	; 0x40
 80021fe:	d80b      	bhi.n	8002218 <HAL_TIM_ConfigClockSource+0x6c>
 8002200:	2b10      	cmp	r3, #16
 8002202:	d073      	beq.n	80022ec <HAL_TIM_ConfigClockSource+0x140>
 8002204:	2b10      	cmp	r3, #16
 8002206:	d802      	bhi.n	800220e <HAL_TIM_ConfigClockSource+0x62>
 8002208:	2b00      	cmp	r3, #0
 800220a:	d06f      	beq.n	80022ec <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800220c:	e078      	b.n	8002300 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800220e:	2b20      	cmp	r3, #32
 8002210:	d06c      	beq.n	80022ec <HAL_TIM_ConfigClockSource+0x140>
 8002212:	2b30      	cmp	r3, #48	; 0x30
 8002214:	d06a      	beq.n	80022ec <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002216:	e073      	b.n	8002300 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002218:	2b70      	cmp	r3, #112	; 0x70
 800221a:	d00d      	beq.n	8002238 <HAL_TIM_ConfigClockSource+0x8c>
 800221c:	2b70      	cmp	r3, #112	; 0x70
 800221e:	d804      	bhi.n	800222a <HAL_TIM_ConfigClockSource+0x7e>
 8002220:	2b50      	cmp	r3, #80	; 0x50
 8002222:	d033      	beq.n	800228c <HAL_TIM_ConfigClockSource+0xe0>
 8002224:	2b60      	cmp	r3, #96	; 0x60
 8002226:	d041      	beq.n	80022ac <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002228:	e06a      	b.n	8002300 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800222a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800222e:	d066      	beq.n	80022fe <HAL_TIM_ConfigClockSource+0x152>
 8002230:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002234:	d017      	beq.n	8002266 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002236:	e063      	b.n	8002300 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6818      	ldr	r0, [r3, #0]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	6899      	ldr	r1, [r3, #8]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f000 fbfa 	bl	8002a40 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800225a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	609a      	str	r2, [r3, #8]
      break;
 8002264:	e04c      	b.n	8002300 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6818      	ldr	r0, [r3, #0]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	6899      	ldr	r1, [r3, #8]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	f000 fbe3 	bl	8002a40 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002288:	609a      	str	r2, [r3, #8]
      break;
 800228a:	e039      	b.n	8002300 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6818      	ldr	r0, [r3, #0]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	6859      	ldr	r1, [r3, #4]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	461a      	mov	r2, r3
 800229a:	f000 faa7 	bl	80027ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2150      	movs	r1, #80	; 0x50
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 fbb1 	bl	8002a0c <TIM_ITRx_SetConfig>
      break;
 80022aa:	e029      	b.n	8002300 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6818      	ldr	r0, [r3, #0]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	6859      	ldr	r1, [r3, #4]
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	461a      	mov	r2, r3
 80022ba:	f000 fb01 	bl	80028c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2160      	movs	r1, #96	; 0x60
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 fba1 	bl	8002a0c <TIM_ITRx_SetConfig>
      break;
 80022ca:	e019      	b.n	8002300 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6818      	ldr	r0, [r3, #0]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	6859      	ldr	r1, [r3, #4]
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	461a      	mov	r2, r3
 80022da:	f000 fa87 	bl	80027ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2140      	movs	r1, #64	; 0x40
 80022e4:	4618      	mov	r0, r3
 80022e6:	f000 fb91 	bl	8002a0c <TIM_ITRx_SetConfig>
      break;
 80022ea:	e009      	b.n	8002300 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4619      	mov	r1, r3
 80022f6:	4610      	mov	r0, r2
 80022f8:	f000 fb88 	bl	8002a0c <TIM_ITRx_SetConfig>
        break;
 80022fc:	e000      	b.n	8002300 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80022fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr

0800232c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	bc80      	pop	{r7}
 800233c:	4770      	bx	lr

0800233e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr

08002350 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr
	...

08002364 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a29      	ldr	r2, [pc, #164]	; (800241c <TIM_Base_SetConfig+0xb8>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d00b      	beq.n	8002394 <TIM_Base_SetConfig+0x30>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002382:	d007      	beq.n	8002394 <TIM_Base_SetConfig+0x30>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a26      	ldr	r2, [pc, #152]	; (8002420 <TIM_Base_SetConfig+0xbc>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d003      	beq.n	8002394 <TIM_Base_SetConfig+0x30>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a25      	ldr	r2, [pc, #148]	; (8002424 <TIM_Base_SetConfig+0xc0>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d108      	bne.n	80023a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800239a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a1c      	ldr	r2, [pc, #112]	; (800241c <TIM_Base_SetConfig+0xb8>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d00b      	beq.n	80023c6 <TIM_Base_SetConfig+0x62>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023b4:	d007      	beq.n	80023c6 <TIM_Base_SetConfig+0x62>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a19      	ldr	r2, [pc, #100]	; (8002420 <TIM_Base_SetConfig+0xbc>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d003      	beq.n	80023c6 <TIM_Base_SetConfig+0x62>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a18      	ldr	r2, [pc, #96]	; (8002424 <TIM_Base_SetConfig+0xc0>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d108      	bne.n	80023d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a07      	ldr	r2, [pc, #28]	; (800241c <TIM_Base_SetConfig+0xb8>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d103      	bne.n	800240c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	691a      	ldr	r2, [r3, #16]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	615a      	str	r2, [r3, #20]
}
 8002412:	bf00      	nop
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr
 800241c:	40012c00 	.word	0x40012c00
 8002420:	40000400 	.word	0x40000400
 8002424:	40000800 	.word	0x40000800

08002428 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002428:	b480      	push	{r7}
 800242a:	b087      	sub	sp, #28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	f023 0201 	bic.w	r2, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f023 0303 	bic.w	r3, r3, #3
 800245e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	4313      	orrs	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f023 0302 	bic.w	r3, r3, #2
 8002470:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	4313      	orrs	r3, r2
 800247a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a1c      	ldr	r2, [pc, #112]	; (80024f0 <TIM_OC1_SetConfig+0xc8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d10c      	bne.n	800249e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f023 0308 	bic.w	r3, r3, #8
 800248a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	4313      	orrs	r3, r2
 8002494:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f023 0304 	bic.w	r3, r3, #4
 800249c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a13      	ldr	r2, [pc, #76]	; (80024f0 <TIM_OC1_SetConfig+0xc8>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d111      	bne.n	80024ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	621a      	str	r2, [r3, #32]
}
 80024e4:	bf00      	nop
 80024e6:	371c      	adds	r7, #28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	40012c00 	.word	0x40012c00

080024f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b087      	sub	sp, #28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	f023 0210 	bic.w	r2, r3, #16
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800252a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	021b      	lsls	r3, r3, #8
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	4313      	orrs	r3, r2
 8002536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f023 0320 	bic.w	r3, r3, #32
 800253e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	4313      	orrs	r3, r2
 800254a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a1d      	ldr	r2, [pc, #116]	; (80025c4 <TIM_OC2_SetConfig+0xd0>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d10d      	bne.n	8002570 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800255a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	4313      	orrs	r3, r2
 8002566:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800256e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a14      	ldr	r2, [pc, #80]	; (80025c4 <TIM_OC2_SetConfig+0xd0>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d113      	bne.n	80025a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800257e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002586:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	621a      	str	r2, [r3, #32]
}
 80025ba:	bf00      	nop
 80025bc:	371c      	adds	r7, #28
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr
 80025c4:	40012c00 	.word	0x40012c00

080025c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b087      	sub	sp, #28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f023 0303 	bic.w	r3, r3, #3
 80025fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	4313      	orrs	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002610:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	021b      	lsls	r3, r3, #8
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	4313      	orrs	r3, r2
 800261c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a1d      	ldr	r2, [pc, #116]	; (8002698 <TIM_OC3_SetConfig+0xd0>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d10d      	bne.n	8002642 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800262c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	021b      	lsls	r3, r3, #8
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	4313      	orrs	r3, r2
 8002638:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002640:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a14      	ldr	r2, [pc, #80]	; (8002698 <TIM_OC3_SetConfig+0xd0>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d113      	bne.n	8002672 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002650:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002658:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	4313      	orrs	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	621a      	str	r2, [r3, #32]
}
 800268c:	bf00      	nop
 800268e:	371c      	adds	r7, #28
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	40012c00 	.word	0x40012c00

0800269c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	021b      	lsls	r3, r3, #8
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	4313      	orrs	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	031b      	lsls	r3, r3, #12
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a0f      	ldr	r2, [pc, #60]	; (8002734 <TIM_OC4_SetConfig+0x98>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d109      	bne.n	8002710 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002702:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	019b      	lsls	r3, r3, #6
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	4313      	orrs	r3, r2
 800270e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	621a      	str	r2, [r3, #32]
}
 800272a:	bf00      	nop
 800272c:	371c      	adds	r7, #28
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr
 8002734:	40012c00 	.word	0x40012c00

08002738 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002738:	b480      	push	{r7}
 800273a:	b087      	sub	sp, #28
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
 8002744:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	f023 0201 	bic.w	r2, r3, #1
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	4a1f      	ldr	r2, [pc, #124]	; (80027e0 <TIM_TI1_SetConfig+0xa8>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d00b      	beq.n	800277e <TIM_TI1_SetConfig+0x46>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800276c:	d007      	beq.n	800277e <TIM_TI1_SetConfig+0x46>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	4a1c      	ldr	r2, [pc, #112]	; (80027e4 <TIM_TI1_SetConfig+0xac>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d003      	beq.n	800277e <TIM_TI1_SetConfig+0x46>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4a1b      	ldr	r2, [pc, #108]	; (80027e8 <TIM_TI1_SetConfig+0xb0>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d101      	bne.n	8002782 <TIM_TI1_SetConfig+0x4a>
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <TIM_TI1_SetConfig+0x4c>
 8002782:	2300      	movs	r3, #0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d008      	beq.n	800279a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	f023 0303 	bic.w	r3, r3, #3
 800278e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4313      	orrs	r3, r2
 8002796:	617b      	str	r3, [r7, #20]
 8002798:	e003      	b.n	80027a2 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f043 0301 	orr.w	r3, r3, #1
 80027a0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	f023 030a 	bic.w	r3, r3, #10
 80027bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	f003 030a 	and.w	r3, r3, #10
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	621a      	str	r2, [r3, #32]
}
 80027d6:	bf00      	nop
 80027d8:	371c      	adds	r7, #28
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr
 80027e0:	40012c00 	.word	0x40012c00
 80027e4:	40000400 	.word	0x40000400
 80027e8:	40000800 	.word	0x40000800

080027ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b087      	sub	sp, #28
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	f023 0201 	bic.w	r2, r3, #1
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002816:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4313      	orrs	r3, r2
 8002820:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f023 030a 	bic.w	r3, r3, #10
 8002828:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	4313      	orrs	r3, r2
 8002830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	621a      	str	r2, [r3, #32]
}
 800283e:	bf00      	nop
 8002840:	371c      	adds	r7, #28
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr

08002848 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002848:	b480      	push	{r7}
 800284a:	b087      	sub	sp, #28
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
 8002854:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	f023 0210 	bic.w	r2, r3, #16
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002874:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	021b      	lsls	r3, r3, #8
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	4313      	orrs	r3, r2
 800287e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002886:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	031b      	lsls	r3, r3, #12
 800288c:	b29b      	uxth	r3, r3
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	4313      	orrs	r3, r2
 8002892:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800289a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	011b      	lsls	r3, r3, #4
 80028a0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	621a      	str	r2, [r3, #32]
}
 80028b6:	bf00      	nop
 80028b8:	371c      	adds	r7, #28
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	f023 0210 	bic.w	r2, r3, #16
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	031b      	lsls	r3, r3, #12
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	621a      	str	r2, [r3, #32]
}
 8002914:	bf00      	nop
 8002916:	371c      	adds	r7, #28
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr

0800291e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800291e:	b480      	push	{r7}
 8002920:	b087      	sub	sp, #28
 8002922:	af00      	add	r7, sp, #0
 8002924:	60f8      	str	r0, [r7, #12]
 8002926:	60b9      	str	r1, [r7, #8]
 8002928:	607a      	str	r2, [r7, #4]
 800292a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	f023 0303 	bic.w	r3, r3, #3
 800294a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4313      	orrs	r3, r2
 8002952:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800295a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	b2db      	uxtb	r3, r3
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	4313      	orrs	r3, r2
 8002966:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800296e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	021b      	lsls	r3, r3, #8
 8002974:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	4313      	orrs	r3, r2
 800297c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	621a      	str	r2, [r3, #32]
}
 800298a:	bf00      	nop
 800298c:	371c      	adds	r7, #28
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr

08002994 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002994:	b480      	push	{r7}
 8002996:	b087      	sub	sp, #28
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
 80029a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	021b      	lsls	r3, r3, #8
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029d2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	031b      	lsls	r3, r3, #12
 80029d8:	b29b      	uxth	r3, r3
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	4313      	orrs	r3, r2
 80029de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029e6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	031b      	lsls	r3, r3, #12
 80029ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	621a      	str	r2, [r3, #32]
}
 8002a02:	bf00      	nop
 8002a04:	371c      	adds	r7, #28
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr

08002a0c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a22:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	f043 0307 	orr.w	r3, r3, #7
 8002a2e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	609a      	str	r2, [r3, #8]
}
 8002a36:	bf00      	nop
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr

08002a40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b087      	sub	sp, #28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
 8002a4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	021a      	lsls	r2, r3, #8
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	431a      	orrs	r2, r3
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	609a      	str	r2, [r3, #8]
}
 8002a74:	bf00      	nop
 8002a76:	371c      	adds	r7, #28
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bc80      	pop	{r7}
 8002a7c:	4770      	bx	lr
	...

08002a80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a94:	2302      	movs	r3, #2
 8002a96:	e046      	b.n	8002b26 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002abe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a16      	ldr	r2, [pc, #88]	; (8002b30 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d00e      	beq.n	8002afa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae4:	d009      	beq.n	8002afa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a12      	ldr	r2, [pc, #72]	; (8002b34 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d004      	beq.n	8002afa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a10      	ldr	r2, [pc, #64]	; (8002b38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d10c      	bne.n	8002b14 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr
 8002b30:	40012c00 	.word	0x40012c00
 8002b34:	40000400 	.word	0x40000400
 8002b38:	40000800 	.word	0x40000800

08002b3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr

08002b4e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr

08002b60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e03f      	b.n	8002bf2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d106      	bne.n	8002b8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7fd fe2c 	bl	80007e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2224      	movs	r2, #36	; 0x24
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ba2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f829 	bl	8002bfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	691a      	ldr	r2, [r3, #16]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695a      	ldr	r2, [r3, #20]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68da      	ldr	r2, [r3, #12]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2220      	movs	r2, #32
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
	...

08002bfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c36:	f023 030c 	bic.w	r3, r3, #12
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	6812      	ldr	r2, [r2, #0]
 8002c3e:	68b9      	ldr	r1, [r7, #8]
 8002c40:	430b      	orrs	r3, r1
 8002c42:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	699a      	ldr	r2, [r3, #24]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a2c      	ldr	r2, [pc, #176]	; (8002d10 <UART_SetConfig+0x114>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d103      	bne.n	8002c6c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c64:	f7fe fe7a 	bl	800195c <HAL_RCC_GetPCLK2Freq>
 8002c68:	60f8      	str	r0, [r7, #12]
 8002c6a:	e002      	b.n	8002c72 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c6c:	f7fe fe62 	bl	8001934 <HAL_RCC_GetPCLK1Freq>
 8002c70:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	4613      	mov	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	009a      	lsls	r2, r3, #2
 8002c7c:	441a      	add	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c88:	4a22      	ldr	r2, [pc, #136]	; (8002d14 <UART_SetConfig+0x118>)
 8002c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8e:	095b      	lsrs	r3, r3, #5
 8002c90:	0119      	lsls	r1, r3, #4
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	4613      	mov	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	009a      	lsls	r2, r3, #2
 8002c9c:	441a      	add	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ca8:	4b1a      	ldr	r3, [pc, #104]	; (8002d14 <UART_SetConfig+0x118>)
 8002caa:	fba3 0302 	umull	r0, r3, r3, r2
 8002cae:	095b      	lsrs	r3, r3, #5
 8002cb0:	2064      	movs	r0, #100	; 0x64
 8002cb2:	fb00 f303 	mul.w	r3, r0, r3
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	011b      	lsls	r3, r3, #4
 8002cba:	3332      	adds	r3, #50	; 0x32
 8002cbc:	4a15      	ldr	r2, [pc, #84]	; (8002d14 <UART_SetConfig+0x118>)
 8002cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc2:	095b      	lsrs	r3, r3, #5
 8002cc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cc8:	4419      	add	r1, r3
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	009a      	lsls	r2, r3, #2
 8002cd4:	441a      	add	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ce0:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <UART_SetConfig+0x118>)
 8002ce2:	fba3 0302 	umull	r0, r3, r3, r2
 8002ce6:	095b      	lsrs	r3, r3, #5
 8002ce8:	2064      	movs	r0, #100	; 0x64
 8002cea:	fb00 f303 	mul.w	r3, r0, r3
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	011b      	lsls	r3, r3, #4
 8002cf2:	3332      	adds	r3, #50	; 0x32
 8002cf4:	4a07      	ldr	r2, [pc, #28]	; (8002d14 <UART_SetConfig+0x118>)
 8002cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfa:	095b      	lsrs	r3, r3, #5
 8002cfc:	f003 020f 	and.w	r2, r3, #15
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	440a      	add	r2, r1
 8002d06:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d08:	bf00      	nop
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40013800 	.word	0x40013800
 8002d14:	51eb851f 	.word	0x51eb851f

08002d18 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d1e:	f3ef 8305 	mrs	r3, IPSR
 8002d22:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d24:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10f      	bne.n	8002d4a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d2a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d2e:	607b      	str	r3, [r7, #4]
  return(result);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d109      	bne.n	8002d4a <osKernelInitialize+0x32>
 8002d36:	4b10      	ldr	r3, [pc, #64]	; (8002d78 <osKernelInitialize+0x60>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d109      	bne.n	8002d52 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002d3e:	f3ef 8311 	mrs	r3, BASEPRI
 8002d42:	603b      	str	r3, [r7, #0]
  return(result);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002d4a:	f06f 0305 	mvn.w	r3, #5
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	e00c      	b.n	8002d6c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002d52:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <osKernelInitialize+0x60>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d105      	bne.n	8002d66 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002d5a:	4b07      	ldr	r3, [pc, #28]	; (8002d78 <osKernelInitialize+0x60>)
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002d60:	2300      	movs	r3, #0
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	e002      	b.n	8002d6c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002d66:	f04f 33ff 	mov.w	r3, #4294967295
 8002d6a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3714      	adds	r7, #20
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bc80      	pop	{r7}
 8002d76:	4770      	bx	lr
 8002d78:	2000002c 	.word	0x2000002c

08002d7c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d82:	f3ef 8305 	mrs	r3, IPSR
 8002d86:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d88:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10f      	bne.n	8002dae <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d8e:	f3ef 8310 	mrs	r3, PRIMASK
 8002d92:	607b      	str	r3, [r7, #4]
  return(result);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d109      	bne.n	8002dae <osKernelStart+0x32>
 8002d9a:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <osKernelStart+0x64>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d109      	bne.n	8002db6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002da2:	f3ef 8311 	mrs	r3, BASEPRI
 8002da6:	603b      	str	r3, [r7, #0]
  return(result);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8002dae:	f06f 0305 	mvn.w	r3, #5
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	e00e      	b.n	8002dd4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002db6:	4b0a      	ldr	r3, [pc, #40]	; (8002de0 <osKernelStart+0x64>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d107      	bne.n	8002dce <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002dbe:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <osKernelStart+0x64>)
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002dc4:	f001 f864 	bl	8003e90 <vTaskStartScheduler>
      stat = osOK;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	e002      	b.n	8002dd4 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002dce:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	2000002c 	.word	0x2000002c

08002de4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b092      	sub	sp, #72	; 0x48
 8002de8:	af04      	add	r7, sp, #16
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002df4:	f3ef 8305 	mrs	r3, IPSR
 8002df8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f040 8094 	bne.w	8002f2a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e02:	f3ef 8310 	mrs	r3, PRIMASK
 8002e06:	623b      	str	r3, [r7, #32]
  return(result);
 8002e08:	6a3b      	ldr	r3, [r7, #32]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f040 808d 	bne.w	8002f2a <osThreadNew+0x146>
 8002e10:	4b48      	ldr	r3, [pc, #288]	; (8002f34 <osThreadNew+0x150>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d106      	bne.n	8002e26 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002e18:	f3ef 8311 	mrs	r3, BASEPRI
 8002e1c:	61fb      	str	r3, [r7, #28]
  return(result);
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f040 8082 	bne.w	8002f2a <osThreadNew+0x146>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d07e      	beq.n	8002f2a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002e2c:	2380      	movs	r3, #128	; 0x80
 8002e2e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002e30:	2318      	movs	r3, #24
 8002e32:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002e34:	2300      	movs	r3, #0
 8002e36:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002e38:	f107 031b 	add.w	r3, r7, #27
 8002e3c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e42:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d045      	beq.n	8002ed6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d002      	beq.n	8002e58 <osThreadNew+0x74>
        name = attr->name;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d002      	beq.n	8002e66 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d008      	beq.n	8002e7e <osThreadNew+0x9a>
 8002e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6e:	2b38      	cmp	r3, #56	; 0x38
 8002e70:	d805      	bhi.n	8002e7e <osThreadNew+0x9a>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <osThreadNew+0x9e>
        return (NULL);
 8002e7e:	2300      	movs	r3, #0
 8002e80:	e054      	b.n	8002f2c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	089b      	lsrs	r3, r3, #2
 8002e90:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00e      	beq.n	8002eb8 <osThreadNew+0xd4>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	2b5b      	cmp	r3, #91	; 0x5b
 8002ea0:	d90a      	bls.n	8002eb8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d006      	beq.n	8002eb8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d002      	beq.n	8002eb8 <osThreadNew+0xd4>
        mem = 1;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eb6:	e010      	b.n	8002eda <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10c      	bne.n	8002eda <osThreadNew+0xf6>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d108      	bne.n	8002eda <osThreadNew+0xf6>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d104      	bne.n	8002eda <osThreadNew+0xf6>
          mem = 0;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ed4:	e001      	b.n	8002eda <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d110      	bne.n	8002f02 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002ee8:	9202      	str	r2, [sp, #8]
 8002eea:	9301      	str	r3, [sp, #4]
 8002eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ef4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 fe02 	bl	8003b00 <xTaskCreateStatic>
 8002efc:	4603      	mov	r3, r0
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	e013      	b.n	8002f2a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d110      	bne.n	8002f2a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	f107 0314 	add.w	r3, r7, #20
 8002f10:	9301      	str	r3, [sp, #4]
 8002f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 fe49 	bl	8003bb2 <xTaskCreate>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d001      	beq.n	8002f2a <osThreadNew+0x146>
          hTask = NULL;
 8002f26:	2300      	movs	r3, #0
 8002f28:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002f2a:	697b      	ldr	r3, [r7, #20]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3738      	adds	r7, #56	; 0x38
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	2000002c 	.word	0x2000002c

08002f38 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f40:	f3ef 8305 	mrs	r3, IPSR
 8002f44:	613b      	str	r3, [r7, #16]
  return(result);
 8002f46:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10f      	bne.n	8002f6c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f4c:	f3ef 8310 	mrs	r3, PRIMASK
 8002f50:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d109      	bne.n	8002f6c <osDelay+0x34>
 8002f58:	4b0d      	ldr	r3, [pc, #52]	; (8002f90 <osDelay+0x58>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d109      	bne.n	8002f74 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002f60:	f3ef 8311 	mrs	r3, BASEPRI
 8002f64:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <osDelay+0x3c>
    stat = osErrorISR;
 8002f6c:	f06f 0305 	mvn.w	r3, #5
 8002f70:	617b      	str	r3, [r7, #20]
 8002f72:	e007      	b.n	8002f84 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d002      	beq.n	8002f84 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 ff52 	bl	8003e28 <vTaskDelay>
    }
  }

  return (stat);
 8002f84:	697b      	ldr	r3, [r7, #20]
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	2000002c 	.word	0x2000002c

08002f94 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4a06      	ldr	r2, [pc, #24]	; (8002fbc <vApplicationGetIdleTaskMemory+0x28>)
 8002fa4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	4a05      	ldr	r2, [pc, #20]	; (8002fc0 <vApplicationGetIdleTaskMemory+0x2c>)
 8002faa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2280      	movs	r2, #128	; 0x80
 8002fb0:	601a      	str	r2, [r3, #0]
}
 8002fb2:	bf00      	nop
 8002fb4:	3714      	adds	r7, #20
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr
 8002fbc:	20000030 	.word	0x20000030
 8002fc0:	2000008c 	.word	0x2000008c

08002fc4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4a07      	ldr	r2, [pc, #28]	; (8002ff0 <vApplicationGetTimerTaskMemory+0x2c>)
 8002fd4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	4a06      	ldr	r2, [pc, #24]	; (8002ff4 <vApplicationGetTimerTaskMemory+0x30>)
 8002fda:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fe2:	601a      	str	r2, [r3, #0]
}
 8002fe4:	bf00      	nop
 8002fe6:	3714      	adds	r7, #20
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bc80      	pop	{r7}
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	2000028c 	.word	0x2000028c
 8002ff4:	200002e8 	.word	0x200002e8

08002ff8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f103 0208 	add.w	r2, r3, #8
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f04f 32ff 	mov.w	r2, #4294967295
 8003010:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f103 0208 	add.w	r2, r3, #8
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f103 0208 	add.w	r2, r3, #8
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	bc80      	pop	{r7}
 8003034:	4770      	bx	lr

08003036 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	bc80      	pop	{r7}
 800304c:	4770      	bx	lr

0800304e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800304e:	b480      	push	{r7}
 8003050:	b085      	sub	sp, #20
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
 8003056:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	1c5a      	adds	r2, r3, #1
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	601a      	str	r2, [r3, #0]
}
 800308a:	bf00      	nop
 800308c:	3714      	adds	r7, #20
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr

08003094 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030aa:	d103      	bne.n	80030b4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	e00c      	b.n	80030ce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3308      	adds	r3, #8
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	e002      	b.n	80030c2 <vListInsert+0x2e>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d2f6      	bcs.n	80030bc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	1c5a      	adds	r2, r3, #1
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	601a      	str	r2, [r3, #0]
}
 80030fa:	bf00      	nop
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr

08003104 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	6892      	ldr	r2, [r2, #8]
 800311a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6852      	ldr	r2, [r2, #4]
 8003124:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	429a      	cmp	r2, r3
 800312e:	d103      	bne.n	8003138 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	1e5a      	subs	r2, r3, #1
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3714      	adds	r7, #20
 8003150:	46bd      	mov	sp, r7
 8003152:	bc80      	pop	{r7}
 8003154:	4770      	bx	lr
	...

08003158 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d109      	bne.n	8003180 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800316c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003170:	f383 8811 	msr	BASEPRI, r3
 8003174:	f3bf 8f6f 	isb	sy
 8003178:	f3bf 8f4f 	dsb	sy
 800317c:	60bb      	str	r3, [r7, #8]
 800317e:	e7fe      	b.n	800317e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003180:	f001 ff9a 	bl	80050b8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318c:	68f9      	ldr	r1, [r7, #12]
 800318e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003190:	fb01 f303 	mul.w	r3, r1, r3
 8003194:	441a      	add	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b0:	3b01      	subs	r3, #1
 80031b2:	68f9      	ldr	r1, [r7, #12]
 80031b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80031b6:	fb01 f303 	mul.w	r3, r1, r3
 80031ba:	441a      	add	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	22ff      	movs	r2, #255	; 0xff
 80031c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	22ff      	movs	r2, #255	; 0xff
 80031cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d114      	bne.n	8003200 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d01a      	beq.n	8003214 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	3310      	adds	r3, #16
 80031e2:	4618      	mov	r0, r3
 80031e4:	f001 f8d8 	bl	8004398 <xTaskRemoveFromEventList>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d012      	beq.n	8003214 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80031ee:	4b0d      	ldr	r3, [pc, #52]	; (8003224 <xQueueGenericReset+0xcc>)
 80031f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	f3bf 8f4f 	dsb	sy
 80031fa:	f3bf 8f6f 	isb	sy
 80031fe:	e009      	b.n	8003214 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	3310      	adds	r3, #16
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff fef7 	bl	8002ff8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	3324      	adds	r3, #36	; 0x24
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff fef2 	bl	8002ff8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003214:	f001 ff7e 	bl	8005114 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003218:	2301      	movs	r3, #1
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	e000ed04 	.word	0xe000ed04

08003228 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08e      	sub	sp, #56	; 0x38
 800322c:	af02      	add	r7, sp, #8
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
 8003234:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d109      	bne.n	8003250 <xQueueGenericCreateStatic+0x28>
 800323c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003240:	f383 8811 	msr	BASEPRI, r3
 8003244:	f3bf 8f6f 	isb	sy
 8003248:	f3bf 8f4f 	dsb	sy
 800324c:	62bb      	str	r3, [r7, #40]	; 0x28
 800324e:	e7fe      	b.n	800324e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d109      	bne.n	800326a <xQueueGenericCreateStatic+0x42>
 8003256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325a:	f383 8811 	msr	BASEPRI, r3
 800325e:	f3bf 8f6f 	isb	sy
 8003262:	f3bf 8f4f 	dsb	sy
 8003266:	627b      	str	r3, [r7, #36]	; 0x24
 8003268:	e7fe      	b.n	8003268 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d002      	beq.n	8003276 <xQueueGenericCreateStatic+0x4e>
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <xQueueGenericCreateStatic+0x52>
 8003276:	2301      	movs	r3, #1
 8003278:	e000      	b.n	800327c <xQueueGenericCreateStatic+0x54>
 800327a:	2300      	movs	r3, #0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d109      	bne.n	8003294 <xQueueGenericCreateStatic+0x6c>
 8003280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003284:	f383 8811 	msr	BASEPRI, r3
 8003288:	f3bf 8f6f 	isb	sy
 800328c:	f3bf 8f4f 	dsb	sy
 8003290:	623b      	str	r3, [r7, #32]
 8003292:	e7fe      	b.n	8003292 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d102      	bne.n	80032a0 <xQueueGenericCreateStatic+0x78>
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <xQueueGenericCreateStatic+0x7c>
 80032a0:	2301      	movs	r3, #1
 80032a2:	e000      	b.n	80032a6 <xQueueGenericCreateStatic+0x7e>
 80032a4:	2300      	movs	r3, #0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d109      	bne.n	80032be <xQueueGenericCreateStatic+0x96>
 80032aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ae:	f383 8811 	msr	BASEPRI, r3
 80032b2:	f3bf 8f6f 	isb	sy
 80032b6:	f3bf 8f4f 	dsb	sy
 80032ba:	61fb      	str	r3, [r7, #28]
 80032bc:	e7fe      	b.n	80032bc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80032be:	2350      	movs	r3, #80	; 0x50
 80032c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	2b50      	cmp	r3, #80	; 0x50
 80032c6:	d009      	beq.n	80032dc <xQueueGenericCreateStatic+0xb4>
 80032c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032cc:	f383 8811 	msr	BASEPRI, r3
 80032d0:	f3bf 8f6f 	isb	sy
 80032d4:	f3bf 8f4f 	dsb	sy
 80032d8:	61bb      	str	r3, [r7, #24]
 80032da:	e7fe      	b.n	80032da <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80032e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00d      	beq.n	8003302 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80032e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80032ee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80032f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	4613      	mov	r3, r2
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	68b9      	ldr	r1, [r7, #8]
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 f805 	bl	800330c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003304:	4618      	mov	r0, r3
 8003306:	3730      	adds	r7, #48	; 0x30
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
 8003318:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d103      	bne.n	8003328 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	e002      	b.n	800332e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800333a:	2101      	movs	r1, #1
 800333c:	69b8      	ldr	r0, [r7, #24]
 800333e:	f7ff ff0b 	bl	8003158 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	78fa      	ldrb	r2, [r7, #3]
 8003346:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800334a:	bf00      	nop
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
	...

08003354 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b08e      	sub	sp, #56	; 0x38
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
 8003360:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003362:	2300      	movs	r3, #0
 8003364:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800336a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336c:	2b00      	cmp	r3, #0
 800336e:	d109      	bne.n	8003384 <xQueueGenericSend+0x30>
 8003370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003374:	f383 8811 	msr	BASEPRI, r3
 8003378:	f3bf 8f6f 	isb	sy
 800337c:	f3bf 8f4f 	dsb	sy
 8003380:	62bb      	str	r3, [r7, #40]	; 0x28
 8003382:	e7fe      	b.n	8003382 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d103      	bne.n	8003392 <xQueueGenericSend+0x3e>
 800338a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <xQueueGenericSend+0x42>
 8003392:	2301      	movs	r3, #1
 8003394:	e000      	b.n	8003398 <xQueueGenericSend+0x44>
 8003396:	2300      	movs	r3, #0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d109      	bne.n	80033b0 <xQueueGenericSend+0x5c>
 800339c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a0:	f383 8811 	msr	BASEPRI, r3
 80033a4:	f3bf 8f6f 	isb	sy
 80033a8:	f3bf 8f4f 	dsb	sy
 80033ac:	627b      	str	r3, [r7, #36]	; 0x24
 80033ae:	e7fe      	b.n	80033ae <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d103      	bne.n	80033be <xQueueGenericSend+0x6a>
 80033b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d101      	bne.n	80033c2 <xQueueGenericSend+0x6e>
 80033be:	2301      	movs	r3, #1
 80033c0:	e000      	b.n	80033c4 <xQueueGenericSend+0x70>
 80033c2:	2300      	movs	r3, #0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d109      	bne.n	80033dc <xQueueGenericSend+0x88>
 80033c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033cc:	f383 8811 	msr	BASEPRI, r3
 80033d0:	f3bf 8f6f 	isb	sy
 80033d4:	f3bf 8f4f 	dsb	sy
 80033d8:	623b      	str	r3, [r7, #32]
 80033da:	e7fe      	b.n	80033da <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033dc:	f001 f996 	bl	800470c <xTaskGetSchedulerState>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d102      	bne.n	80033ec <xQueueGenericSend+0x98>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <xQueueGenericSend+0x9c>
 80033ec:	2301      	movs	r3, #1
 80033ee:	e000      	b.n	80033f2 <xQueueGenericSend+0x9e>
 80033f0:	2300      	movs	r3, #0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d109      	bne.n	800340a <xQueueGenericSend+0xb6>
 80033f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fa:	f383 8811 	msr	BASEPRI, r3
 80033fe:	f3bf 8f6f 	isb	sy
 8003402:	f3bf 8f4f 	dsb	sy
 8003406:	61fb      	str	r3, [r7, #28]
 8003408:	e7fe      	b.n	8003408 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800340a:	f001 fe55 	bl	80050b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800340e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003410:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003416:	429a      	cmp	r2, r3
 8003418:	d302      	bcc.n	8003420 <xQueueGenericSend+0xcc>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	2b02      	cmp	r3, #2
 800341e:	d129      	bne.n	8003474 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	68b9      	ldr	r1, [r7, #8]
 8003424:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003426:	f000 f9ff 	bl	8003828 <prvCopyDataToQueue>
 800342a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800342c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	2b00      	cmp	r3, #0
 8003432:	d010      	beq.n	8003456 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003436:	3324      	adds	r3, #36	; 0x24
 8003438:	4618      	mov	r0, r3
 800343a:	f000 ffad 	bl	8004398 <xTaskRemoveFromEventList>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d013      	beq.n	800346c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003444:	4b3f      	ldr	r3, [pc, #252]	; (8003544 <xQueueGenericSend+0x1f0>)
 8003446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	f3bf 8f4f 	dsb	sy
 8003450:	f3bf 8f6f 	isb	sy
 8003454:	e00a      	b.n	800346c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003458:	2b00      	cmp	r3, #0
 800345a:	d007      	beq.n	800346c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800345c:	4b39      	ldr	r3, [pc, #228]	; (8003544 <xQueueGenericSend+0x1f0>)
 800345e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	f3bf 8f4f 	dsb	sy
 8003468:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800346c:	f001 fe52 	bl	8005114 <vPortExitCritical>
				return pdPASS;
 8003470:	2301      	movs	r3, #1
 8003472:	e063      	b.n	800353c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d103      	bne.n	8003482 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800347a:	f001 fe4b 	bl	8005114 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800347e:	2300      	movs	r3, #0
 8003480:	e05c      	b.n	800353c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003484:	2b00      	cmp	r3, #0
 8003486:	d106      	bne.n	8003496 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003488:	f107 0314 	add.w	r3, r7, #20
 800348c:	4618      	mov	r0, r3
 800348e:	f000 ffe5 	bl	800445c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003492:	2301      	movs	r3, #1
 8003494:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003496:	f001 fe3d 	bl	8005114 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800349a:	f000 fd5d 	bl	8003f58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800349e:	f001 fe0b 	bl	80050b8 <vPortEnterCritical>
 80034a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034a8:	b25b      	sxtb	r3, r3
 80034aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ae:	d103      	bne.n	80034b8 <xQueueGenericSend+0x164>
 80034b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034be:	b25b      	sxtb	r3, r3
 80034c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c4:	d103      	bne.n	80034ce <xQueueGenericSend+0x17a>
 80034c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034ce:	f001 fe21 	bl	8005114 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034d2:	1d3a      	adds	r2, r7, #4
 80034d4:	f107 0314 	add.w	r3, r7, #20
 80034d8:	4611      	mov	r1, r2
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 ffd4 	bl	8004488 <xTaskCheckForTimeOut>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d124      	bne.n	8003530 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80034e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034e8:	f000 fa96 	bl	8003a18 <prvIsQueueFull>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d018      	beq.n	8003524 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80034f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f4:	3310      	adds	r3, #16
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	4611      	mov	r1, r2
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 fefe 	bl	80042fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003500:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003502:	f000 fa21 	bl	8003948 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003506:	f000 fd35 	bl	8003f74 <xTaskResumeAll>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	f47f af7c 	bne.w	800340a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003512:	4b0c      	ldr	r3, [pc, #48]	; (8003544 <xQueueGenericSend+0x1f0>)
 8003514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	f3bf 8f4f 	dsb	sy
 800351e:	f3bf 8f6f 	isb	sy
 8003522:	e772      	b.n	800340a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003524:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003526:	f000 fa0f 	bl	8003948 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800352a:	f000 fd23 	bl	8003f74 <xTaskResumeAll>
 800352e:	e76c      	b.n	800340a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003530:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003532:	f000 fa09 	bl	8003948 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003536:	f000 fd1d 	bl	8003f74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800353a:	2300      	movs	r3, #0
		}
	}
}
 800353c:	4618      	mov	r0, r3
 800353e:	3738      	adds	r7, #56	; 0x38
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	e000ed04 	.word	0xe000ed04

08003548 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b08e      	sub	sp, #56	; 0x38
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
 8003554:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800355a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355c:	2b00      	cmp	r3, #0
 800355e:	d109      	bne.n	8003574 <xQueueGenericSendFromISR+0x2c>
 8003560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003564:	f383 8811 	msr	BASEPRI, r3
 8003568:	f3bf 8f6f 	isb	sy
 800356c:	f3bf 8f4f 	dsb	sy
 8003570:	627b      	str	r3, [r7, #36]	; 0x24
 8003572:	e7fe      	b.n	8003572 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d103      	bne.n	8003582 <xQueueGenericSendFromISR+0x3a>
 800357a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <xQueueGenericSendFromISR+0x3e>
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <xQueueGenericSendFromISR+0x40>
 8003586:	2300      	movs	r3, #0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d109      	bne.n	80035a0 <xQueueGenericSendFromISR+0x58>
 800358c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003590:	f383 8811 	msr	BASEPRI, r3
 8003594:	f3bf 8f6f 	isb	sy
 8003598:	f3bf 8f4f 	dsb	sy
 800359c:	623b      	str	r3, [r7, #32]
 800359e:	e7fe      	b.n	800359e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d103      	bne.n	80035ae <xQueueGenericSendFromISR+0x66>
 80035a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d101      	bne.n	80035b2 <xQueueGenericSendFromISR+0x6a>
 80035ae:	2301      	movs	r3, #1
 80035b0:	e000      	b.n	80035b4 <xQueueGenericSendFromISR+0x6c>
 80035b2:	2300      	movs	r3, #0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d109      	bne.n	80035cc <xQueueGenericSendFromISR+0x84>
 80035b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035bc:	f383 8811 	msr	BASEPRI, r3
 80035c0:	f3bf 8f6f 	isb	sy
 80035c4:	f3bf 8f4f 	dsb	sy
 80035c8:	61fb      	str	r3, [r7, #28]
 80035ca:	e7fe      	b.n	80035ca <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80035cc:	f001 fe2e 	bl	800522c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80035d0:	f3ef 8211 	mrs	r2, BASEPRI
 80035d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d8:	f383 8811 	msr	BASEPRI, r3
 80035dc:	f3bf 8f6f 	isb	sy
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	61ba      	str	r2, [r7, #24]
 80035e6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80035e8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80035ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80035ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d302      	bcc.n	80035fe <xQueueGenericSendFromISR+0xb6>
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d12c      	bne.n	8003658 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80035fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003600:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003604:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	68b9      	ldr	r1, [r7, #8]
 800360c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800360e:	f000 f90b 	bl	8003828 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003612:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361a:	d112      	bne.n	8003642 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800361c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	2b00      	cmp	r3, #0
 8003622:	d016      	beq.n	8003652 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003626:	3324      	adds	r3, #36	; 0x24
 8003628:	4618      	mov	r0, r3
 800362a:	f000 feb5 	bl	8004398 <xTaskRemoveFromEventList>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00e      	beq.n	8003652 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00b      	beq.n	8003652 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	e007      	b.n	8003652 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003642:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003646:	3301      	adds	r3, #1
 8003648:	b2db      	uxtb	r3, r3
 800364a:	b25a      	sxtb	r2, r3
 800364c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003652:	2301      	movs	r3, #1
 8003654:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003656:	e001      	b.n	800365c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003658:	2300      	movs	r3, #0
 800365a:	637b      	str	r3, [r7, #52]	; 0x34
 800365c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003668:	4618      	mov	r0, r3
 800366a:	3738      	adds	r7, #56	; 0x38
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b08c      	sub	sp, #48	; 0x30
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800367c:	2300      	movs	r3, #0
 800367e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003686:	2b00      	cmp	r3, #0
 8003688:	d109      	bne.n	800369e <xQueueReceive+0x2e>
	__asm volatile
 800368a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368e:	f383 8811 	msr	BASEPRI, r3
 8003692:	f3bf 8f6f 	isb	sy
 8003696:	f3bf 8f4f 	dsb	sy
 800369a:	623b      	str	r3, [r7, #32]
 800369c:	e7fe      	b.n	800369c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d103      	bne.n	80036ac <xQueueReceive+0x3c>
 80036a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <xQueueReceive+0x40>
 80036ac:	2301      	movs	r3, #1
 80036ae:	e000      	b.n	80036b2 <xQueueReceive+0x42>
 80036b0:	2300      	movs	r3, #0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d109      	bne.n	80036ca <xQueueReceive+0x5a>
 80036b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ba:	f383 8811 	msr	BASEPRI, r3
 80036be:	f3bf 8f6f 	isb	sy
 80036c2:	f3bf 8f4f 	dsb	sy
 80036c6:	61fb      	str	r3, [r7, #28]
 80036c8:	e7fe      	b.n	80036c8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036ca:	f001 f81f 	bl	800470c <xTaskGetSchedulerState>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d102      	bne.n	80036da <xQueueReceive+0x6a>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <xQueueReceive+0x6e>
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <xQueueReceive+0x70>
 80036de:	2300      	movs	r3, #0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d109      	bne.n	80036f8 <xQueueReceive+0x88>
 80036e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e8:	f383 8811 	msr	BASEPRI, r3
 80036ec:	f3bf 8f6f 	isb	sy
 80036f0:	f3bf 8f4f 	dsb	sy
 80036f4:	61bb      	str	r3, [r7, #24]
 80036f6:	e7fe      	b.n	80036f6 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80036f8:	f001 fcde 	bl	80050b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003700:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	2b00      	cmp	r3, #0
 8003706:	d01f      	beq.n	8003748 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003708:	68b9      	ldr	r1, [r7, #8]
 800370a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800370c:	f000 f8f6 	bl	80038fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	1e5a      	subs	r2, r3, #1
 8003714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003716:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00f      	beq.n	8003740 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003722:	3310      	adds	r3, #16
 8003724:	4618      	mov	r0, r3
 8003726:	f000 fe37 	bl	8004398 <xTaskRemoveFromEventList>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d007      	beq.n	8003740 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003730:	4b3c      	ldr	r3, [pc, #240]	; (8003824 <xQueueReceive+0x1b4>)
 8003732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	f3bf 8f4f 	dsb	sy
 800373c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003740:	f001 fce8 	bl	8005114 <vPortExitCritical>
				return pdPASS;
 8003744:	2301      	movs	r3, #1
 8003746:	e069      	b.n	800381c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d103      	bne.n	8003756 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800374e:	f001 fce1 	bl	8005114 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003752:	2300      	movs	r3, #0
 8003754:	e062      	b.n	800381c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003758:	2b00      	cmp	r3, #0
 800375a:	d106      	bne.n	800376a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800375c:	f107 0310 	add.w	r3, r7, #16
 8003760:	4618      	mov	r0, r3
 8003762:	f000 fe7b 	bl	800445c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003766:	2301      	movs	r3, #1
 8003768:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800376a:	f001 fcd3 	bl	8005114 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800376e:	f000 fbf3 	bl	8003f58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003772:	f001 fca1 	bl	80050b8 <vPortEnterCritical>
 8003776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003778:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800377c:	b25b      	sxtb	r3, r3
 800377e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003782:	d103      	bne.n	800378c <xQueueReceive+0x11c>
 8003784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800378c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003792:	b25b      	sxtb	r3, r3
 8003794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003798:	d103      	bne.n	80037a2 <xQueueReceive+0x132>
 800379a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037a2:	f001 fcb7 	bl	8005114 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037a6:	1d3a      	adds	r2, r7, #4
 80037a8:	f107 0310 	add.w	r3, r7, #16
 80037ac:	4611      	mov	r1, r2
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 fe6a 	bl	8004488 <xTaskCheckForTimeOut>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d123      	bne.n	8003802 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037bc:	f000 f916 	bl	80039ec <prvIsQueueEmpty>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d017      	beq.n	80037f6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80037c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c8:	3324      	adds	r3, #36	; 0x24
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	4611      	mov	r1, r2
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 fd94 	bl	80042fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80037d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037d6:	f000 f8b7 	bl	8003948 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80037da:	f000 fbcb 	bl	8003f74 <xTaskResumeAll>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d189      	bne.n	80036f8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80037e4:	4b0f      	ldr	r3, [pc, #60]	; (8003824 <xQueueReceive+0x1b4>)
 80037e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	f3bf 8f4f 	dsb	sy
 80037f0:	f3bf 8f6f 	isb	sy
 80037f4:	e780      	b.n	80036f8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80037f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037f8:	f000 f8a6 	bl	8003948 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80037fc:	f000 fbba 	bl	8003f74 <xTaskResumeAll>
 8003800:	e77a      	b.n	80036f8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003802:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003804:	f000 f8a0 	bl	8003948 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003808:	f000 fbb4 	bl	8003f74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800380c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800380e:	f000 f8ed 	bl	80039ec <prvIsQueueEmpty>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	f43f af6f 	beq.w	80036f8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800381a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800381c:	4618      	mov	r0, r3
 800381e:	3730      	adds	r7, #48	; 0x30
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	e000ed04 	.word	0xe000ed04

08003828 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003834:	2300      	movs	r3, #0
 8003836:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10d      	bne.n	8003862 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d14d      	bne.n	80038ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	4618      	mov	r0, r3
 8003854:	f000 ff78 	bl	8004748 <xTaskPriorityDisinherit>
 8003858:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	605a      	str	r2, [r3, #4]
 8003860:	e043      	b.n	80038ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d119      	bne.n	800389c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6898      	ldr	r0, [r3, #8]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	461a      	mov	r2, r3
 8003872:	68b9      	ldr	r1, [r7, #8]
 8003874:	f001 ff0e 	bl	8005694 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	441a      	add	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	429a      	cmp	r2, r3
 8003890:	d32b      	bcc.n	80038ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	609a      	str	r2, [r3, #8]
 800389a:	e026      	b.n	80038ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	68d8      	ldr	r0, [r3, #12]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	461a      	mov	r2, r3
 80038a6:	68b9      	ldr	r1, [r7, #8]
 80038a8:	f001 fef4 	bl	8005694 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	425b      	negs	r3, r3
 80038b6:	441a      	add	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d207      	bcs.n	80038d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d0:	425b      	negs	r3, r3
 80038d2:	441a      	add	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d105      	bne.n	80038ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d002      	beq.n	80038ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	3b01      	subs	r3, #1
 80038e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1c5a      	adds	r2, r3, #1
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80038f2:	697b      	ldr	r3, [r7, #20]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	2b00      	cmp	r3, #0
 800390c:	d018      	beq.n	8003940 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68da      	ldr	r2, [r3, #12]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	441a      	add	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68da      	ldr	r2, [r3, #12]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	429a      	cmp	r2, r3
 8003926:	d303      	bcc.n	8003930 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68d9      	ldr	r1, [r3, #12]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003938:	461a      	mov	r2, r3
 800393a:	6838      	ldr	r0, [r7, #0]
 800393c:	f001 feaa 	bl	8005694 <memcpy>
	}
}
 8003940:	bf00      	nop
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003950:	f001 fbb2 	bl	80050b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800395a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800395c:	e011      	b.n	8003982 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	2b00      	cmp	r3, #0
 8003964:	d012      	beq.n	800398c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3324      	adds	r3, #36	; 0x24
 800396a:	4618      	mov	r0, r3
 800396c:	f000 fd14 	bl	8004398 <xTaskRemoveFromEventList>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003976:	f000 fde7 	bl	8004548 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800397a:	7bfb      	ldrb	r3, [r7, #15]
 800397c:	3b01      	subs	r3, #1
 800397e:	b2db      	uxtb	r3, r3
 8003980:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003986:	2b00      	cmp	r3, #0
 8003988:	dce9      	bgt.n	800395e <prvUnlockQueue+0x16>
 800398a:	e000      	b.n	800398e <prvUnlockQueue+0x46>
					break;
 800398c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	22ff      	movs	r2, #255	; 0xff
 8003992:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003996:	f001 fbbd 	bl	8005114 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800399a:	f001 fb8d 	bl	80050b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039a6:	e011      	b.n	80039cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d012      	beq.n	80039d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	3310      	adds	r3, #16
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 fcef 	bl	8004398 <xTaskRemoveFromEventList>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80039c0:	f000 fdc2 	bl	8004548 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80039c4:	7bbb      	ldrb	r3, [r7, #14]
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	dce9      	bgt.n	80039a8 <prvUnlockQueue+0x60>
 80039d4:	e000      	b.n	80039d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80039d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	22ff      	movs	r2, #255	; 0xff
 80039dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80039e0:	f001 fb98 	bl	8005114 <vPortExitCritical>
}
 80039e4:	bf00      	nop
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80039f4:	f001 fb60 	bl	80050b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d102      	bne.n	8003a06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003a00:	2301      	movs	r3, #1
 8003a02:	60fb      	str	r3, [r7, #12]
 8003a04:	e001      	b.n	8003a0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003a06:	2300      	movs	r3, #0
 8003a08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a0a:	f001 fb83 	bl	8005114 <vPortExitCritical>

	return xReturn;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a20:	f001 fb4a 	bl	80050b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d102      	bne.n	8003a36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003a30:	2301      	movs	r3, #1
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	e001      	b.n	8003a3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003a36:	2300      	movs	r3, #0
 8003a38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a3a:	f001 fb6b 	bl	8005114 <vPortExitCritical>

	return xReturn;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a52:	2300      	movs	r3, #0
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	e014      	b.n	8003a82 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003a58:	4a0e      	ldr	r2, [pc, #56]	; (8003a94 <vQueueAddToRegistry+0x4c>)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10b      	bne.n	8003a7c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003a64:	490b      	ldr	r1, [pc, #44]	; (8003a94 <vQueueAddToRegistry+0x4c>)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003a6e:	4a09      	ldr	r2, [pc, #36]	; (8003a94 <vQueueAddToRegistry+0x4c>)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	4413      	add	r3, r2
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003a7a:	e005      	b.n	8003a88 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	60fb      	str	r3, [r7, #12]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2b07      	cmp	r3, #7
 8003a86:	d9e7      	bls.n	8003a58 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003a88:	bf00      	nop
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bc80      	pop	{r7}
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	20001aac 	.word	0x20001aac

08003a98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003aa8:	f001 fb06 	bl	80050b8 <vPortEnterCritical>
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ab2:	b25b      	sxtb	r3, r3
 8003ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab8:	d103      	bne.n	8003ac2 <vQueueWaitForMessageRestricted+0x2a>
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ac8:	b25b      	sxtb	r3, r3
 8003aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ace:	d103      	bne.n	8003ad8 <vQueueWaitForMessageRestricted+0x40>
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ad8:	f001 fb1c 	bl	8005114 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d106      	bne.n	8003af2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	3324      	adds	r3, #36	; 0x24
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	68b9      	ldr	r1, [r7, #8]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f000 fc29 	bl	8004344 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003af2:	6978      	ldr	r0, [r7, #20]
 8003af4:	f7ff ff28 	bl	8003948 <prvUnlockQueue>
	}
 8003af8:	bf00      	nop
 8003afa:	3718      	adds	r7, #24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b08e      	sub	sp, #56	; 0x38
 8003b04:	af04      	add	r7, sp, #16
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
 8003b0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d109      	bne.n	8003b28 <xTaskCreateStatic+0x28>
 8003b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b18:	f383 8811 	msr	BASEPRI, r3
 8003b1c:	f3bf 8f6f 	isb	sy
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	623b      	str	r3, [r7, #32]
 8003b26:	e7fe      	b.n	8003b26 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d109      	bne.n	8003b42 <xTaskCreateStatic+0x42>
 8003b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b32:	f383 8811 	msr	BASEPRI, r3
 8003b36:	f3bf 8f6f 	isb	sy
 8003b3a:	f3bf 8f4f 	dsb	sy
 8003b3e:	61fb      	str	r3, [r7, #28]
 8003b40:	e7fe      	b.n	8003b40 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003b42:	235c      	movs	r3, #92	; 0x5c
 8003b44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	2b5c      	cmp	r3, #92	; 0x5c
 8003b4a:	d009      	beq.n	8003b60 <xTaskCreateStatic+0x60>
 8003b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b50:	f383 8811 	msr	BASEPRI, r3
 8003b54:	f3bf 8f6f 	isb	sy
 8003b58:	f3bf 8f4f 	dsb	sy
 8003b5c:	61bb      	str	r3, [r7, #24]
 8003b5e:	e7fe      	b.n	8003b5e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d01e      	beq.n	8003ba4 <xTaskCreateStatic+0xa4>
 8003b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d01b      	beq.n	8003ba4 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b6e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b74:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	2202      	movs	r2, #2
 8003b7a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003b7e:	2300      	movs	r3, #0
 8003b80:	9303      	str	r3, [sp, #12]
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	9302      	str	r3, [sp, #8]
 8003b86:	f107 0314 	add.w	r3, r7, #20
 8003b8a:	9301      	str	r3, [sp, #4]
 8003b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	68b9      	ldr	r1, [r7, #8]
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f000 f850 	bl	8003c3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b9e:	f000 f8d3 	bl	8003d48 <prvAddNewTaskToReadyList>
 8003ba2:	e001      	b.n	8003ba8 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003ba8:	697b      	ldr	r3, [r7, #20]
	}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3728      	adds	r7, #40	; 0x28
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b08c      	sub	sp, #48	; 0x30
 8003bb6:	af04      	add	r7, sp, #16
 8003bb8:	60f8      	str	r0, [r7, #12]
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	603b      	str	r3, [r7, #0]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bc2:	88fb      	ldrh	r3, [r7, #6]
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f001 fb6c 	bl	80052a4 <pvPortMalloc>
 8003bcc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00e      	beq.n	8003bf2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003bd4:	205c      	movs	r0, #92	; 0x5c
 8003bd6:	f001 fb65 	bl	80052a4 <pvPortMalloc>
 8003bda:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	631a      	str	r2, [r3, #48]	; 0x30
 8003be8:	e005      	b.n	8003bf6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003bea:	6978      	ldr	r0, [r7, #20]
 8003bec:	f001 fc1c 	bl	8005428 <vPortFree>
 8003bf0:	e001      	b.n	8003bf6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d017      	beq.n	8003c2c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c04:	88fa      	ldrh	r2, [r7, #6]
 8003c06:	2300      	movs	r3, #0
 8003c08:	9303      	str	r3, [sp, #12]
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	9302      	str	r3, [sp, #8]
 8003c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c10:	9301      	str	r3, [sp, #4]
 8003c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	68b9      	ldr	r1, [r7, #8]
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 f80e 	bl	8003c3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c20:	69f8      	ldr	r0, [r7, #28]
 8003c22:	f000 f891 	bl	8003d48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003c26:	2301      	movs	r3, #1
 8003c28:	61bb      	str	r3, [r7, #24]
 8003c2a:	e002      	b.n	8003c32 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c30:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003c32:	69bb      	ldr	r3, [r7, #24]
	}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3720      	adds	r7, #32
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
 8003c48:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	461a      	mov	r2, r3
 8003c54:	21a5      	movs	r1, #165	; 0xa5
 8003c56:	f001 fd28 	bl	80056aa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c64:	3b01      	subs	r3, #1
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	f023 0307 	bic.w	r3, r3, #7
 8003c72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d009      	beq.n	8003c92 <prvInitialiseNewTask+0x56>
 8003c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c82:	f383 8811 	msr	BASEPRI, r3
 8003c86:	f3bf 8f6f 	isb	sy
 8003c8a:	f3bf 8f4f 	dsb	sy
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	e7fe      	b.n	8003c90 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c92:	2300      	movs	r3, #0
 8003c94:	61fb      	str	r3, [r7, #28]
 8003c96:	e012      	b.n	8003cbe <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	7819      	ldrb	r1, [r3, #0]
 8003ca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	3334      	adds	r3, #52	; 0x34
 8003ca8:	460a      	mov	r2, r1
 8003caa:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d006      	beq.n	8003cc6 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	61fb      	str	r3, [r7, #28]
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	2b0f      	cmp	r3, #15
 8003cc2:	d9e9      	bls.n	8003c98 <prvInitialiseNewTask+0x5c>
 8003cc4:	e000      	b.n	8003cc8 <prvInitialiseNewTask+0x8c>
		{
			break;
 8003cc6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd2:	2b37      	cmp	r3, #55	; 0x37
 8003cd4:	d901      	bls.n	8003cda <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003cd6:	2337      	movs	r3, #55	; 0x37
 8003cd8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cde:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ce4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce8:	2200      	movs	r2, #0
 8003cea:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cee:	3304      	adds	r3, #4
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff f9a0 	bl	8003036 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf8:	3318      	adds	r3, #24
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff f99b 	bl	8003036 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d04:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d08:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d14:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d18:	2200      	movs	r2, #0
 8003d1a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	68f9      	ldr	r1, [r7, #12]
 8003d28:	69b8      	ldr	r0, [r7, #24]
 8003d2a:	f001 f8d7 	bl	8004edc <pxPortInitialiseStack>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d32:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d002      	beq.n	8003d40 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d3e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d40:	bf00      	nop
 8003d42:	3720      	adds	r7, #32
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003d50:	f001 f9b2 	bl	80050b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003d54:	4b2d      	ldr	r3, [pc, #180]	; (8003e0c <prvAddNewTaskToReadyList+0xc4>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	4a2c      	ldr	r2, [pc, #176]	; (8003e0c <prvAddNewTaskToReadyList+0xc4>)
 8003d5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003d5e:	4b2c      	ldr	r3, [pc, #176]	; (8003e10 <prvAddNewTaskToReadyList+0xc8>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d109      	bne.n	8003d7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003d66:	4a2a      	ldr	r2, [pc, #168]	; (8003e10 <prvAddNewTaskToReadyList+0xc8>)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d6c:	4b27      	ldr	r3, [pc, #156]	; (8003e0c <prvAddNewTaskToReadyList+0xc4>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d110      	bne.n	8003d96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003d74:	f000 fc0c 	bl	8004590 <prvInitialiseTaskLists>
 8003d78:	e00d      	b.n	8003d96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003d7a:	4b26      	ldr	r3, [pc, #152]	; (8003e14 <prvAddNewTaskToReadyList+0xcc>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d109      	bne.n	8003d96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d82:	4b23      	ldr	r3, [pc, #140]	; (8003e10 <prvAddNewTaskToReadyList+0xc8>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d802      	bhi.n	8003d96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003d90:	4a1f      	ldr	r2, [pc, #124]	; (8003e10 <prvAddNewTaskToReadyList+0xc8>)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003d96:	4b20      	ldr	r3, [pc, #128]	; (8003e18 <prvAddNewTaskToReadyList+0xd0>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	4a1e      	ldr	r2, [pc, #120]	; (8003e18 <prvAddNewTaskToReadyList+0xd0>)
 8003d9e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003da0:	4b1d      	ldr	r3, [pc, #116]	; (8003e18 <prvAddNewTaskToReadyList+0xd0>)
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dac:	4b1b      	ldr	r3, [pc, #108]	; (8003e1c <prvAddNewTaskToReadyList+0xd4>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d903      	bls.n	8003dbc <prvAddNewTaskToReadyList+0x74>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db8:	4a18      	ldr	r2, [pc, #96]	; (8003e1c <prvAddNewTaskToReadyList+0xd4>)
 8003dba:	6013      	str	r3, [r2, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4413      	add	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4a15      	ldr	r2, [pc, #84]	; (8003e20 <prvAddNewTaskToReadyList+0xd8>)
 8003dca:	441a      	add	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3304      	adds	r3, #4
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4610      	mov	r0, r2
 8003dd4:	f7ff f93b 	bl	800304e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003dd8:	f001 f99c 	bl	8005114 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003ddc:	4b0d      	ldr	r3, [pc, #52]	; (8003e14 <prvAddNewTaskToReadyList+0xcc>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00e      	beq.n	8003e02 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003de4:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <prvAddNewTaskToReadyList+0xc8>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d207      	bcs.n	8003e02 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003df2:	4b0c      	ldr	r3, [pc, #48]	; (8003e24 <prvAddNewTaskToReadyList+0xdc>)
 8003df4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	f3bf 8f4f 	dsb	sy
 8003dfe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e02:	bf00      	nop
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20000bbc 	.word	0x20000bbc
 8003e10:	200006e8 	.word	0x200006e8
 8003e14:	20000bc8 	.word	0x20000bc8
 8003e18:	20000bd8 	.word	0x20000bd8
 8003e1c:	20000bc4 	.word	0x20000bc4
 8003e20:	200006ec 	.word	0x200006ec
 8003e24:	e000ed04 	.word	0xe000ed04

08003e28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003e30:	2300      	movs	r3, #0
 8003e32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d016      	beq.n	8003e68 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003e3a:	4b13      	ldr	r3, [pc, #76]	; (8003e88 <vTaskDelay+0x60>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d009      	beq.n	8003e56 <vTaskDelay+0x2e>
 8003e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e46:	f383 8811 	msr	BASEPRI, r3
 8003e4a:	f3bf 8f6f 	isb	sy
 8003e4e:	f3bf 8f4f 	dsb	sy
 8003e52:	60bb      	str	r3, [r7, #8]
 8003e54:	e7fe      	b.n	8003e54 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003e56:	f000 f87f 	bl	8003f58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 fcdf 	bl	8004820 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003e62:	f000 f887 	bl	8003f74 <xTaskResumeAll>
 8003e66:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d107      	bne.n	8003e7e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003e6e:	4b07      	ldr	r3, [pc, #28]	; (8003e8c <vTaskDelay+0x64>)
 8003e70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	f3bf 8f4f 	dsb	sy
 8003e7a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e7e:	bf00      	nop
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	20000be4 	.word	0x20000be4
 8003e8c:	e000ed04 	.word	0xe000ed04

08003e90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b08a      	sub	sp, #40	; 0x28
 8003e94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003e96:	2300      	movs	r3, #0
 8003e98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003e9e:	463a      	mov	r2, r7
 8003ea0:	1d39      	adds	r1, r7, #4
 8003ea2:	f107 0308 	add.w	r3, r7, #8
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7ff f874 	bl	8002f94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003eac:	6839      	ldr	r1, [r7, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	9202      	str	r2, [sp, #8]
 8003eb4:	9301      	str	r3, [sp, #4]
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	2300      	movs	r3, #0
 8003ebc:	460a      	mov	r2, r1
 8003ebe:	4920      	ldr	r1, [pc, #128]	; (8003f40 <vTaskStartScheduler+0xb0>)
 8003ec0:	4820      	ldr	r0, [pc, #128]	; (8003f44 <vTaskStartScheduler+0xb4>)
 8003ec2:	f7ff fe1d 	bl	8003b00 <xTaskCreateStatic>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	4b1f      	ldr	r3, [pc, #124]	; (8003f48 <vTaskStartScheduler+0xb8>)
 8003eca:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ecc:	4b1e      	ldr	r3, [pc, #120]	; (8003f48 <vTaskStartScheduler+0xb8>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d002      	beq.n	8003eda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	617b      	str	r3, [r7, #20]
 8003ed8:	e001      	b.n	8003ede <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003eda:	2300      	movs	r3, #0
 8003edc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d102      	bne.n	8003eea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003ee4:	f000 fcf0 	bl	80048c8 <xTimerCreateTimerTask>
 8003ee8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d115      	bne.n	8003f1c <vTaskStartScheduler+0x8c>
 8003ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef4:	f383 8811 	msr	BASEPRI, r3
 8003ef8:	f3bf 8f6f 	isb	sy
 8003efc:	f3bf 8f4f 	dsb	sy
 8003f00:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003f02:	4b12      	ldr	r3, [pc, #72]	; (8003f4c <vTaskStartScheduler+0xbc>)
 8003f04:	f04f 32ff 	mov.w	r2, #4294967295
 8003f08:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f0a:	4b11      	ldr	r3, [pc, #68]	; (8003f50 <vTaskStartScheduler+0xc0>)
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003f10:	4b10      	ldr	r3, [pc, #64]	; (8003f54 <vTaskStartScheduler+0xc4>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f16:	f001 f85f 	bl	8004fd8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f1a:	e00d      	b.n	8003f38 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f22:	d109      	bne.n	8003f38 <vTaskStartScheduler+0xa8>
 8003f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f28:	f383 8811 	msr	BASEPRI, r3
 8003f2c:	f3bf 8f6f 	isb	sy
 8003f30:	f3bf 8f4f 	dsb	sy
 8003f34:	60fb      	str	r3, [r7, #12]
 8003f36:	e7fe      	b.n	8003f36 <vTaskStartScheduler+0xa6>
}
 8003f38:	bf00      	nop
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	080056f4 	.word	0x080056f4
 8003f44:	08004561 	.word	0x08004561
 8003f48:	20000be0 	.word	0x20000be0
 8003f4c:	20000bdc 	.word	0x20000bdc
 8003f50:	20000bc8 	.word	0x20000bc8
 8003f54:	20000bc0 	.word	0x20000bc0

08003f58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003f5c:	4b04      	ldr	r3, [pc, #16]	; (8003f70 <vTaskSuspendAll+0x18>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	3301      	adds	r3, #1
 8003f62:	4a03      	ldr	r2, [pc, #12]	; (8003f70 <vTaskSuspendAll+0x18>)
 8003f64:	6013      	str	r3, [r2, #0]
}
 8003f66:	bf00      	nop
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bc80      	pop	{r7}
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	20000be4 	.word	0x20000be4

08003f74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003f82:	4b41      	ldr	r3, [pc, #260]	; (8004088 <xTaskResumeAll+0x114>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d109      	bne.n	8003f9e <xTaskResumeAll+0x2a>
 8003f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8e:	f383 8811 	msr	BASEPRI, r3
 8003f92:	f3bf 8f6f 	isb	sy
 8003f96:	f3bf 8f4f 	dsb	sy
 8003f9a:	603b      	str	r3, [r7, #0]
 8003f9c:	e7fe      	b.n	8003f9c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003f9e:	f001 f88b 	bl	80050b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003fa2:	4b39      	ldr	r3, [pc, #228]	; (8004088 <xTaskResumeAll+0x114>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	4a37      	ldr	r2, [pc, #220]	; (8004088 <xTaskResumeAll+0x114>)
 8003faa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fac:	4b36      	ldr	r3, [pc, #216]	; (8004088 <xTaskResumeAll+0x114>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d162      	bne.n	800407a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003fb4:	4b35      	ldr	r3, [pc, #212]	; (800408c <xTaskResumeAll+0x118>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d05e      	beq.n	800407a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003fbc:	e02f      	b.n	800401e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003fbe:	4b34      	ldr	r3, [pc, #208]	; (8004090 <xTaskResumeAll+0x11c>)
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	3318      	adds	r3, #24
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7ff f89a 	bl	8003104 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	3304      	adds	r3, #4
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff f895 	bl	8003104 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fde:	4b2d      	ldr	r3, [pc, #180]	; (8004094 <xTaskResumeAll+0x120>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d903      	bls.n	8003fee <xTaskResumeAll+0x7a>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fea:	4a2a      	ldr	r2, [pc, #168]	; (8004094 <xTaskResumeAll+0x120>)
 8003fec:	6013      	str	r3, [r2, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4a27      	ldr	r2, [pc, #156]	; (8004098 <xTaskResumeAll+0x124>)
 8003ffc:	441a      	add	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	3304      	adds	r3, #4
 8004002:	4619      	mov	r1, r3
 8004004:	4610      	mov	r0, r2
 8004006:	f7ff f822 	bl	800304e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800400e:	4b23      	ldr	r3, [pc, #140]	; (800409c <xTaskResumeAll+0x128>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004014:	429a      	cmp	r2, r3
 8004016:	d302      	bcc.n	800401e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004018:	4b21      	ldr	r3, [pc, #132]	; (80040a0 <xTaskResumeAll+0x12c>)
 800401a:	2201      	movs	r2, #1
 800401c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800401e:	4b1c      	ldr	r3, [pc, #112]	; (8004090 <xTaskResumeAll+0x11c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1cb      	bne.n	8003fbe <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800402c:	f000 fb4a 	bl	80046c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004030:	4b1c      	ldr	r3, [pc, #112]	; (80040a4 <xTaskResumeAll+0x130>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d010      	beq.n	800405e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800403c:	f000 f844 	bl	80040c8 <xTaskIncrementTick>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d002      	beq.n	800404c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004046:	4b16      	ldr	r3, [pc, #88]	; (80040a0 <xTaskResumeAll+0x12c>)
 8004048:	2201      	movs	r2, #1
 800404a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3b01      	subs	r3, #1
 8004050:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1f1      	bne.n	800403c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004058:	4b12      	ldr	r3, [pc, #72]	; (80040a4 <xTaskResumeAll+0x130>)
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800405e:	4b10      	ldr	r3, [pc, #64]	; (80040a0 <xTaskResumeAll+0x12c>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d009      	beq.n	800407a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004066:	2301      	movs	r3, #1
 8004068:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800406a:	4b0f      	ldr	r3, [pc, #60]	; (80040a8 <xTaskResumeAll+0x134>)
 800406c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	f3bf 8f4f 	dsb	sy
 8004076:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800407a:	f001 f84b 	bl	8005114 <vPortExitCritical>

	return xAlreadyYielded;
 800407e:	68bb      	ldr	r3, [r7, #8]
}
 8004080:	4618      	mov	r0, r3
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	20000be4 	.word	0x20000be4
 800408c:	20000bbc 	.word	0x20000bbc
 8004090:	20000b7c 	.word	0x20000b7c
 8004094:	20000bc4 	.word	0x20000bc4
 8004098:	200006ec 	.word	0x200006ec
 800409c:	200006e8 	.word	0x200006e8
 80040a0:	20000bd0 	.word	0x20000bd0
 80040a4:	20000bcc 	.word	0x20000bcc
 80040a8:	e000ed04 	.word	0xe000ed04

080040ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80040b2:	4b04      	ldr	r3, [pc, #16]	; (80040c4 <xTaskGetTickCount+0x18>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80040b8:	687b      	ldr	r3, [r7, #4]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	bc80      	pop	{r7}
 80040c2:	4770      	bx	lr
 80040c4:	20000bc0 	.word	0x20000bc0

080040c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80040ce:	2300      	movs	r3, #0
 80040d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040d2:	4b51      	ldr	r3, [pc, #324]	; (8004218 <xTaskIncrementTick+0x150>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f040 808d 	bne.w	80041f6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80040dc:	4b4f      	ldr	r3, [pc, #316]	; (800421c <xTaskIncrementTick+0x154>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	3301      	adds	r3, #1
 80040e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80040e4:	4a4d      	ldr	r2, [pc, #308]	; (800421c <xTaskIncrementTick+0x154>)
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d11f      	bne.n	8004130 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80040f0:	4b4b      	ldr	r3, [pc, #300]	; (8004220 <xTaskIncrementTick+0x158>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d009      	beq.n	800410e <xTaskIncrementTick+0x46>
 80040fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fe:	f383 8811 	msr	BASEPRI, r3
 8004102:	f3bf 8f6f 	isb	sy
 8004106:	f3bf 8f4f 	dsb	sy
 800410a:	603b      	str	r3, [r7, #0]
 800410c:	e7fe      	b.n	800410c <xTaskIncrementTick+0x44>
 800410e:	4b44      	ldr	r3, [pc, #272]	; (8004220 <xTaskIncrementTick+0x158>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	4b43      	ldr	r3, [pc, #268]	; (8004224 <xTaskIncrementTick+0x15c>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a41      	ldr	r2, [pc, #260]	; (8004220 <xTaskIncrementTick+0x158>)
 800411a:	6013      	str	r3, [r2, #0]
 800411c:	4a41      	ldr	r2, [pc, #260]	; (8004224 <xTaskIncrementTick+0x15c>)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6013      	str	r3, [r2, #0]
 8004122:	4b41      	ldr	r3, [pc, #260]	; (8004228 <xTaskIncrementTick+0x160>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	3301      	adds	r3, #1
 8004128:	4a3f      	ldr	r2, [pc, #252]	; (8004228 <xTaskIncrementTick+0x160>)
 800412a:	6013      	str	r3, [r2, #0]
 800412c:	f000 faca 	bl	80046c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004130:	4b3e      	ldr	r3, [pc, #248]	; (800422c <xTaskIncrementTick+0x164>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	429a      	cmp	r2, r3
 8004138:	d34e      	bcc.n	80041d8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800413a:	4b39      	ldr	r3, [pc, #228]	; (8004220 <xTaskIncrementTick+0x158>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <xTaskIncrementTick+0x80>
 8004144:	2301      	movs	r3, #1
 8004146:	e000      	b.n	800414a <xTaskIncrementTick+0x82>
 8004148:	2300      	movs	r3, #0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d004      	beq.n	8004158 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800414e:	4b37      	ldr	r3, [pc, #220]	; (800422c <xTaskIncrementTick+0x164>)
 8004150:	f04f 32ff 	mov.w	r2, #4294967295
 8004154:	601a      	str	r2, [r3, #0]
					break;
 8004156:	e03f      	b.n	80041d8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004158:	4b31      	ldr	r3, [pc, #196]	; (8004220 <xTaskIncrementTick+0x158>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	429a      	cmp	r2, r3
 800416e:	d203      	bcs.n	8004178 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004170:	4a2e      	ldr	r2, [pc, #184]	; (800422c <xTaskIncrementTick+0x164>)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6013      	str	r3, [r2, #0]
						break;
 8004176:	e02f      	b.n	80041d8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	3304      	adds	r3, #4
 800417c:	4618      	mov	r0, r3
 800417e:	f7fe ffc1 	bl	8003104 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004186:	2b00      	cmp	r3, #0
 8004188:	d004      	beq.n	8004194 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	3318      	adds	r3, #24
 800418e:	4618      	mov	r0, r3
 8004190:	f7fe ffb8 	bl	8003104 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004198:	4b25      	ldr	r3, [pc, #148]	; (8004230 <xTaskIncrementTick+0x168>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	429a      	cmp	r2, r3
 800419e:	d903      	bls.n	80041a8 <xTaskIncrementTick+0xe0>
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a4:	4a22      	ldr	r2, [pc, #136]	; (8004230 <xTaskIncrementTick+0x168>)
 80041a6:	6013      	str	r3, [r2, #0]
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ac:	4613      	mov	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4a1f      	ldr	r2, [pc, #124]	; (8004234 <xTaskIncrementTick+0x16c>)
 80041b6:	441a      	add	r2, r3
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	3304      	adds	r3, #4
 80041bc:	4619      	mov	r1, r3
 80041be:	4610      	mov	r0, r2
 80041c0:	f7fe ff45 	bl	800304e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c8:	4b1b      	ldr	r3, [pc, #108]	; (8004238 <xTaskIncrementTick+0x170>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d3b3      	bcc.n	800413a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80041d2:	2301      	movs	r3, #1
 80041d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041d6:	e7b0      	b.n	800413a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80041d8:	4b17      	ldr	r3, [pc, #92]	; (8004238 <xTaskIncrementTick+0x170>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041de:	4915      	ldr	r1, [pc, #84]	; (8004234 <xTaskIncrementTick+0x16c>)
 80041e0:	4613      	mov	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4413      	add	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	440b      	add	r3, r1
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d907      	bls.n	8004200 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80041f0:	2301      	movs	r3, #1
 80041f2:	617b      	str	r3, [r7, #20]
 80041f4:	e004      	b.n	8004200 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80041f6:	4b11      	ldr	r3, [pc, #68]	; (800423c <xTaskIncrementTick+0x174>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3301      	adds	r3, #1
 80041fc:	4a0f      	ldr	r2, [pc, #60]	; (800423c <xTaskIncrementTick+0x174>)
 80041fe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004200:	4b0f      	ldr	r3, [pc, #60]	; (8004240 <xTaskIncrementTick+0x178>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004208:	2301      	movs	r3, #1
 800420a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800420c:	697b      	ldr	r3, [r7, #20]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3718      	adds	r7, #24
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	20000be4 	.word	0x20000be4
 800421c:	20000bc0 	.word	0x20000bc0
 8004220:	20000b74 	.word	0x20000b74
 8004224:	20000b78 	.word	0x20000b78
 8004228:	20000bd4 	.word	0x20000bd4
 800422c:	20000bdc 	.word	0x20000bdc
 8004230:	20000bc4 	.word	0x20000bc4
 8004234:	200006ec 	.word	0x200006ec
 8004238:	200006e8 	.word	0x200006e8
 800423c:	20000bcc 	.word	0x20000bcc
 8004240:	20000bd0 	.word	0x20000bd0

08004244 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800424a:	4b27      	ldr	r3, [pc, #156]	; (80042e8 <vTaskSwitchContext+0xa4>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004252:	4b26      	ldr	r3, [pc, #152]	; (80042ec <vTaskSwitchContext+0xa8>)
 8004254:	2201      	movs	r2, #1
 8004256:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004258:	e040      	b.n	80042dc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800425a:	4b24      	ldr	r3, [pc, #144]	; (80042ec <vTaskSwitchContext+0xa8>)
 800425c:	2200      	movs	r2, #0
 800425e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004260:	4b23      	ldr	r3, [pc, #140]	; (80042f0 <vTaskSwitchContext+0xac>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	e00f      	b.n	8004288 <vTaskSwitchContext+0x44>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d109      	bne.n	8004282 <vTaskSwitchContext+0x3e>
 800426e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004272:	f383 8811 	msr	BASEPRI, r3
 8004276:	f3bf 8f6f 	isb	sy
 800427a:	f3bf 8f4f 	dsb	sy
 800427e:	607b      	str	r3, [r7, #4]
 8004280:	e7fe      	b.n	8004280 <vTaskSwitchContext+0x3c>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	3b01      	subs	r3, #1
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	491a      	ldr	r1, [pc, #104]	; (80042f4 <vTaskSwitchContext+0xb0>)
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	4613      	mov	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	440b      	add	r3, r1
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0e5      	beq.n	8004268 <vTaskSwitchContext+0x24>
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	4613      	mov	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4413      	add	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4a13      	ldr	r2, [pc, #76]	; (80042f4 <vTaskSwitchContext+0xb0>)
 80042a8:	4413      	add	r3, r2
 80042aa:	60bb      	str	r3, [r7, #8]
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	605a      	str	r2, [r3, #4]
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	3308      	adds	r3, #8
 80042be:	429a      	cmp	r2, r3
 80042c0:	d104      	bne.n	80042cc <vTaskSwitchContext+0x88>
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	605a      	str	r2, [r3, #4]
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	4a09      	ldr	r2, [pc, #36]	; (80042f8 <vTaskSwitchContext+0xb4>)
 80042d4:	6013      	str	r3, [r2, #0]
 80042d6:	4a06      	ldr	r2, [pc, #24]	; (80042f0 <vTaskSwitchContext+0xac>)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6013      	str	r3, [r2, #0]
}
 80042dc:	bf00      	nop
 80042de:	3714      	adds	r7, #20
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bc80      	pop	{r7}
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	20000be4 	.word	0x20000be4
 80042ec:	20000bd0 	.word	0x20000bd0
 80042f0:	20000bc4 	.word	0x20000bc4
 80042f4:	200006ec 	.word	0x200006ec
 80042f8:	200006e8 	.word	0x200006e8

080042fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d109      	bne.n	8004320 <vTaskPlaceOnEventList+0x24>
 800430c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004310:	f383 8811 	msr	BASEPRI, r3
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	60fb      	str	r3, [r7, #12]
 800431e:	e7fe      	b.n	800431e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004320:	4b07      	ldr	r3, [pc, #28]	; (8004340 <vTaskPlaceOnEventList+0x44>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	3318      	adds	r3, #24
 8004326:	4619      	mov	r1, r3
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f7fe feb3 	bl	8003094 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800432e:	2101      	movs	r1, #1
 8004330:	6838      	ldr	r0, [r7, #0]
 8004332:	f000 fa75 	bl	8004820 <prvAddCurrentTaskToDelayedList>
}
 8004336:	bf00      	nop
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	200006e8 	.word	0x200006e8

08004344 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d109      	bne.n	800436a <vTaskPlaceOnEventListRestricted+0x26>
 8004356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435a:	f383 8811 	msr	BASEPRI, r3
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	617b      	str	r3, [r7, #20]
 8004368:	e7fe      	b.n	8004368 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800436a:	4b0a      	ldr	r3, [pc, #40]	; (8004394 <vTaskPlaceOnEventListRestricted+0x50>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	3318      	adds	r3, #24
 8004370:	4619      	mov	r1, r3
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f7fe fe6b 	bl	800304e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d002      	beq.n	8004384 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800437e:	f04f 33ff 	mov.w	r3, #4294967295
 8004382:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004384:	6879      	ldr	r1, [r7, #4]
 8004386:	68b8      	ldr	r0, [r7, #8]
 8004388:	f000 fa4a 	bl	8004820 <prvAddCurrentTaskToDelayedList>
	}
 800438c:	bf00      	nop
 800438e:	3718      	adds	r7, #24
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	200006e8 	.word	0x200006e8

08004398 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d109      	bne.n	80043c2 <xTaskRemoveFromEventList+0x2a>
 80043ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b2:	f383 8811 	msr	BASEPRI, r3
 80043b6:	f3bf 8f6f 	isb	sy
 80043ba:	f3bf 8f4f 	dsb	sy
 80043be:	60fb      	str	r3, [r7, #12]
 80043c0:	e7fe      	b.n	80043c0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	3318      	adds	r3, #24
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fe fe9c 	bl	8003104 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043cc:	4b1d      	ldr	r3, [pc, #116]	; (8004444 <xTaskRemoveFromEventList+0xac>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d11d      	bne.n	8004410 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	3304      	adds	r3, #4
 80043d8:	4618      	mov	r0, r3
 80043da:	f7fe fe93 	bl	8003104 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e2:	4b19      	ldr	r3, [pc, #100]	; (8004448 <xTaskRemoveFromEventList+0xb0>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d903      	bls.n	80043f2 <xTaskRemoveFromEventList+0x5a>
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ee:	4a16      	ldr	r2, [pc, #88]	; (8004448 <xTaskRemoveFromEventList+0xb0>)
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f6:	4613      	mov	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4a13      	ldr	r2, [pc, #76]	; (800444c <xTaskRemoveFromEventList+0xb4>)
 8004400:	441a      	add	r2, r3
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	3304      	adds	r3, #4
 8004406:	4619      	mov	r1, r3
 8004408:	4610      	mov	r0, r2
 800440a:	f7fe fe20 	bl	800304e <vListInsertEnd>
 800440e:	e005      	b.n	800441c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	3318      	adds	r3, #24
 8004414:	4619      	mov	r1, r3
 8004416:	480e      	ldr	r0, [pc, #56]	; (8004450 <xTaskRemoveFromEventList+0xb8>)
 8004418:	f7fe fe19 	bl	800304e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004420:	4b0c      	ldr	r3, [pc, #48]	; (8004454 <xTaskRemoveFromEventList+0xbc>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004426:	429a      	cmp	r2, r3
 8004428:	d905      	bls.n	8004436 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800442a:	2301      	movs	r3, #1
 800442c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800442e:	4b0a      	ldr	r3, [pc, #40]	; (8004458 <xTaskRemoveFromEventList+0xc0>)
 8004430:	2201      	movs	r2, #1
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	e001      	b.n	800443a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004436:	2300      	movs	r3, #0
 8004438:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800443a:	697b      	ldr	r3, [r7, #20]
}
 800443c:	4618      	mov	r0, r3
 800443e:	3718      	adds	r7, #24
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	20000be4 	.word	0x20000be4
 8004448:	20000bc4 	.word	0x20000bc4
 800444c:	200006ec 	.word	0x200006ec
 8004450:	20000b7c 	.word	0x20000b7c
 8004454:	200006e8 	.word	0x200006e8
 8004458:	20000bd0 	.word	0x20000bd0

0800445c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004464:	4b06      	ldr	r3, [pc, #24]	; (8004480 <vTaskInternalSetTimeOutState+0x24>)
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800446c:	4b05      	ldr	r3, [pc, #20]	; (8004484 <vTaskInternalSetTimeOutState+0x28>)
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	605a      	str	r2, [r3, #4]
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	bc80      	pop	{r7}
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	20000bd4 	.word	0x20000bd4
 8004484:	20000bc0 	.word	0x20000bc0

08004488 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b088      	sub	sp, #32
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d109      	bne.n	80044ac <xTaskCheckForTimeOut+0x24>
 8004498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449c:	f383 8811 	msr	BASEPRI, r3
 80044a0:	f3bf 8f6f 	isb	sy
 80044a4:	f3bf 8f4f 	dsb	sy
 80044a8:	613b      	str	r3, [r7, #16]
 80044aa:	e7fe      	b.n	80044aa <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d109      	bne.n	80044c6 <xTaskCheckForTimeOut+0x3e>
 80044b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b6:	f383 8811 	msr	BASEPRI, r3
 80044ba:	f3bf 8f6f 	isb	sy
 80044be:	f3bf 8f4f 	dsb	sy
 80044c2:	60fb      	str	r3, [r7, #12]
 80044c4:	e7fe      	b.n	80044c4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80044c6:	f000 fdf7 	bl	80050b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80044ca:	4b1d      	ldr	r3, [pc, #116]	; (8004540 <xTaskCheckForTimeOut+0xb8>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e2:	d102      	bne.n	80044ea <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80044e4:	2300      	movs	r3, #0
 80044e6:	61fb      	str	r3, [r7, #28]
 80044e8:	e023      	b.n	8004532 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	4b15      	ldr	r3, [pc, #84]	; (8004544 <xTaskCheckForTimeOut+0xbc>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d007      	beq.n	8004506 <xTaskCheckForTimeOut+0x7e>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d302      	bcc.n	8004506 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004500:	2301      	movs	r3, #1
 8004502:	61fb      	str	r3, [r7, #28]
 8004504:	e015      	b.n	8004532 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	429a      	cmp	r2, r3
 800450e:	d20b      	bcs.n	8004528 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	1ad2      	subs	r2, r2, r3
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f7ff ff9d 	bl	800445c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004522:	2300      	movs	r3, #0
 8004524:	61fb      	str	r3, [r7, #28]
 8004526:	e004      	b.n	8004532 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	2200      	movs	r2, #0
 800452c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800452e:	2301      	movs	r3, #1
 8004530:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004532:	f000 fdef 	bl	8005114 <vPortExitCritical>

	return xReturn;
 8004536:	69fb      	ldr	r3, [r7, #28]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3720      	adds	r7, #32
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	20000bc0 	.word	0x20000bc0
 8004544:	20000bd4 	.word	0x20000bd4

08004548 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800454c:	4b03      	ldr	r3, [pc, #12]	; (800455c <vTaskMissedYield+0x14>)
 800454e:	2201      	movs	r2, #1
 8004550:	601a      	str	r2, [r3, #0]
}
 8004552:	bf00      	nop
 8004554:	46bd      	mov	sp, r7
 8004556:	bc80      	pop	{r7}
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	20000bd0 	.word	0x20000bd0

08004560 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004568:	f000 f852 	bl	8004610 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800456c:	4b06      	ldr	r3, [pc, #24]	; (8004588 <prvIdleTask+0x28>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d9f9      	bls.n	8004568 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004574:	4b05      	ldr	r3, [pc, #20]	; (800458c <prvIdleTask+0x2c>)
 8004576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800457a:	601a      	str	r2, [r3, #0]
 800457c:	f3bf 8f4f 	dsb	sy
 8004580:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004584:	e7f0      	b.n	8004568 <prvIdleTask+0x8>
 8004586:	bf00      	nop
 8004588:	200006ec 	.word	0x200006ec
 800458c:	e000ed04 	.word	0xe000ed04

08004590 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004596:	2300      	movs	r3, #0
 8004598:	607b      	str	r3, [r7, #4]
 800459a:	e00c      	b.n	80045b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	4613      	mov	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	4a12      	ldr	r2, [pc, #72]	; (80045f0 <prvInitialiseTaskLists+0x60>)
 80045a8:	4413      	add	r3, r2
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fe fd24 	bl	8002ff8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3301      	adds	r3, #1
 80045b4:	607b      	str	r3, [r7, #4]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b37      	cmp	r3, #55	; 0x37
 80045ba:	d9ef      	bls.n	800459c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80045bc:	480d      	ldr	r0, [pc, #52]	; (80045f4 <prvInitialiseTaskLists+0x64>)
 80045be:	f7fe fd1b 	bl	8002ff8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80045c2:	480d      	ldr	r0, [pc, #52]	; (80045f8 <prvInitialiseTaskLists+0x68>)
 80045c4:	f7fe fd18 	bl	8002ff8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80045c8:	480c      	ldr	r0, [pc, #48]	; (80045fc <prvInitialiseTaskLists+0x6c>)
 80045ca:	f7fe fd15 	bl	8002ff8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80045ce:	480c      	ldr	r0, [pc, #48]	; (8004600 <prvInitialiseTaskLists+0x70>)
 80045d0:	f7fe fd12 	bl	8002ff8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80045d4:	480b      	ldr	r0, [pc, #44]	; (8004604 <prvInitialiseTaskLists+0x74>)
 80045d6:	f7fe fd0f 	bl	8002ff8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80045da:	4b0b      	ldr	r3, [pc, #44]	; (8004608 <prvInitialiseTaskLists+0x78>)
 80045dc:	4a05      	ldr	r2, [pc, #20]	; (80045f4 <prvInitialiseTaskLists+0x64>)
 80045de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80045e0:	4b0a      	ldr	r3, [pc, #40]	; (800460c <prvInitialiseTaskLists+0x7c>)
 80045e2:	4a05      	ldr	r2, [pc, #20]	; (80045f8 <prvInitialiseTaskLists+0x68>)
 80045e4:	601a      	str	r2, [r3, #0]
}
 80045e6:	bf00      	nop
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	200006ec 	.word	0x200006ec
 80045f4:	20000b4c 	.word	0x20000b4c
 80045f8:	20000b60 	.word	0x20000b60
 80045fc:	20000b7c 	.word	0x20000b7c
 8004600:	20000b90 	.word	0x20000b90
 8004604:	20000ba8 	.word	0x20000ba8
 8004608:	20000b74 	.word	0x20000b74
 800460c:	20000b78 	.word	0x20000b78

08004610 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004616:	e019      	b.n	800464c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004618:	f000 fd4e 	bl	80050b8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800461c:	4b0f      	ldr	r3, [pc, #60]	; (800465c <prvCheckTasksWaitingTermination+0x4c>)
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	3304      	adds	r3, #4
 8004628:	4618      	mov	r0, r3
 800462a:	f7fe fd6b 	bl	8003104 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800462e:	4b0c      	ldr	r3, [pc, #48]	; (8004660 <prvCheckTasksWaitingTermination+0x50>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	3b01      	subs	r3, #1
 8004634:	4a0a      	ldr	r2, [pc, #40]	; (8004660 <prvCheckTasksWaitingTermination+0x50>)
 8004636:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004638:	4b0a      	ldr	r3, [pc, #40]	; (8004664 <prvCheckTasksWaitingTermination+0x54>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	3b01      	subs	r3, #1
 800463e:	4a09      	ldr	r2, [pc, #36]	; (8004664 <prvCheckTasksWaitingTermination+0x54>)
 8004640:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004642:	f000 fd67 	bl	8005114 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f80e 	bl	8004668 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800464c:	4b05      	ldr	r3, [pc, #20]	; (8004664 <prvCheckTasksWaitingTermination+0x54>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1e1      	bne.n	8004618 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004654:	bf00      	nop
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	20000b90 	.word	0x20000b90
 8004660:	20000bbc 	.word	0x20000bbc
 8004664:	20000ba4 	.word	0x20000ba4

08004668 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004676:	2b00      	cmp	r3, #0
 8004678:	d108      	bne.n	800468c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467e:	4618      	mov	r0, r3
 8004680:	f000 fed2 	bl	8005428 <vPortFree>
				vPortFree( pxTCB );
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 fecf 	bl	8005428 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800468a:	e017      	b.n	80046bc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004692:	2b01      	cmp	r3, #1
 8004694:	d103      	bne.n	800469e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 fec6 	bl	8005428 <vPortFree>
	}
 800469c:	e00e      	b.n	80046bc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d009      	beq.n	80046bc <prvDeleteTCB+0x54>
 80046a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ac:	f383 8811 	msr	BASEPRI, r3
 80046b0:	f3bf 8f6f 	isb	sy
 80046b4:	f3bf 8f4f 	dsb	sy
 80046b8:	60fb      	str	r3, [r7, #12]
 80046ba:	e7fe      	b.n	80046ba <prvDeleteTCB+0x52>
	}
 80046bc:	bf00      	nop
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046ca:	4b0e      	ldr	r3, [pc, #56]	; (8004704 <prvResetNextTaskUnblockTime+0x40>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <prvResetNextTaskUnblockTime+0x14>
 80046d4:	2301      	movs	r3, #1
 80046d6:	e000      	b.n	80046da <prvResetNextTaskUnblockTime+0x16>
 80046d8:	2300      	movs	r3, #0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d004      	beq.n	80046e8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80046de:	4b0a      	ldr	r3, [pc, #40]	; (8004708 <prvResetNextTaskUnblockTime+0x44>)
 80046e0:	f04f 32ff 	mov.w	r2, #4294967295
 80046e4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80046e6:	e008      	b.n	80046fa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80046e8:	4b06      	ldr	r3, [pc, #24]	; (8004704 <prvResetNextTaskUnblockTime+0x40>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	4a04      	ldr	r2, [pc, #16]	; (8004708 <prvResetNextTaskUnblockTime+0x44>)
 80046f8:	6013      	str	r3, [r2, #0]
}
 80046fa:	bf00      	nop
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	bc80      	pop	{r7}
 8004702:	4770      	bx	lr
 8004704:	20000b74 	.word	0x20000b74
 8004708:	20000bdc 	.word	0x20000bdc

0800470c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004712:	4b0b      	ldr	r3, [pc, #44]	; (8004740 <xTaskGetSchedulerState+0x34>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d102      	bne.n	8004720 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800471a:	2301      	movs	r3, #1
 800471c:	607b      	str	r3, [r7, #4]
 800471e:	e008      	b.n	8004732 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004720:	4b08      	ldr	r3, [pc, #32]	; (8004744 <xTaskGetSchedulerState+0x38>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d102      	bne.n	800472e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004728:	2302      	movs	r3, #2
 800472a:	607b      	str	r3, [r7, #4]
 800472c:	e001      	b.n	8004732 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800472e:	2300      	movs	r3, #0
 8004730:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004732:	687b      	ldr	r3, [r7, #4]
	}
 8004734:	4618      	mov	r0, r3
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	bc80      	pop	{r7}
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	20000bc8 	.word	0x20000bc8
 8004744:	20000be4 	.word	0x20000be4

08004748 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004754:	2300      	movs	r3, #0
 8004756:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d054      	beq.n	8004808 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800475e:	4b2d      	ldr	r3, [pc, #180]	; (8004814 <xTaskPriorityDisinherit+0xcc>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	429a      	cmp	r2, r3
 8004766:	d009      	beq.n	800477c <xTaskPriorityDisinherit+0x34>
 8004768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476c:	f383 8811 	msr	BASEPRI, r3
 8004770:	f3bf 8f6f 	isb	sy
 8004774:	f3bf 8f4f 	dsb	sy
 8004778:	60fb      	str	r3, [r7, #12]
 800477a:	e7fe      	b.n	800477a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004780:	2b00      	cmp	r3, #0
 8004782:	d109      	bne.n	8004798 <xTaskPriorityDisinherit+0x50>
 8004784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004788:	f383 8811 	msr	BASEPRI, r3
 800478c:	f3bf 8f6f 	isb	sy
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	60bb      	str	r3, [r7, #8]
 8004796:	e7fe      	b.n	8004796 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800479c:	1e5a      	subs	r2, r3, #1
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d02c      	beq.n	8004808 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d128      	bne.n	8004808 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	3304      	adds	r3, #4
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fe fca2 	bl	8003104 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d8:	4b0f      	ldr	r3, [pc, #60]	; (8004818 <xTaskPriorityDisinherit+0xd0>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d903      	bls.n	80047e8 <xTaskPriorityDisinherit+0xa0>
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e4:	4a0c      	ldr	r2, [pc, #48]	; (8004818 <xTaskPriorityDisinherit+0xd0>)
 80047e6:	6013      	str	r3, [r2, #0]
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ec:	4613      	mov	r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4413      	add	r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4a09      	ldr	r2, [pc, #36]	; (800481c <xTaskPriorityDisinherit+0xd4>)
 80047f6:	441a      	add	r2, r3
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	3304      	adds	r3, #4
 80047fc:	4619      	mov	r1, r3
 80047fe:	4610      	mov	r0, r2
 8004800:	f7fe fc25 	bl	800304e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004804:	2301      	movs	r3, #1
 8004806:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004808:	697b      	ldr	r3, [r7, #20]
	}
 800480a:	4618      	mov	r0, r3
 800480c:	3718      	adds	r7, #24
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	200006e8 	.word	0x200006e8
 8004818:	20000bc4 	.word	0x20000bc4
 800481c:	200006ec 	.word	0x200006ec

08004820 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800482a:	4b21      	ldr	r3, [pc, #132]	; (80048b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004830:	4b20      	ldr	r3, [pc, #128]	; (80048b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	3304      	adds	r3, #4
 8004836:	4618      	mov	r0, r3
 8004838:	f7fe fc64 	bl	8003104 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004842:	d10a      	bne.n	800485a <prvAddCurrentTaskToDelayedList+0x3a>
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d007      	beq.n	800485a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800484a:	4b1a      	ldr	r3, [pc, #104]	; (80048b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	3304      	adds	r3, #4
 8004850:	4619      	mov	r1, r3
 8004852:	4819      	ldr	r0, [pc, #100]	; (80048b8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004854:	f7fe fbfb 	bl	800304e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004858:	e026      	b.n	80048a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4413      	add	r3, r2
 8004860:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004862:	4b14      	ldr	r3, [pc, #80]	; (80048b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	429a      	cmp	r2, r3
 8004870:	d209      	bcs.n	8004886 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004872:	4b12      	ldr	r3, [pc, #72]	; (80048bc <prvAddCurrentTaskToDelayedList+0x9c>)
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	4b0f      	ldr	r3, [pc, #60]	; (80048b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	3304      	adds	r3, #4
 800487c:	4619      	mov	r1, r3
 800487e:	4610      	mov	r0, r2
 8004880:	f7fe fc08 	bl	8003094 <vListInsert>
}
 8004884:	e010      	b.n	80048a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004886:	4b0e      	ldr	r3, [pc, #56]	; (80048c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	3304      	adds	r3, #4
 8004890:	4619      	mov	r1, r3
 8004892:	4610      	mov	r0, r2
 8004894:	f7fe fbfe 	bl	8003094 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004898:	4b0a      	ldr	r3, [pc, #40]	; (80048c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d202      	bcs.n	80048a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80048a2:	4a08      	ldr	r2, [pc, #32]	; (80048c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	6013      	str	r3, [r2, #0]
}
 80048a8:	bf00      	nop
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	20000bc0 	.word	0x20000bc0
 80048b4:	200006e8 	.word	0x200006e8
 80048b8:	20000ba8 	.word	0x20000ba8
 80048bc:	20000b78 	.word	0x20000b78
 80048c0:	20000b74 	.word	0x20000b74
 80048c4:	20000bdc 	.word	0x20000bdc

080048c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b08a      	sub	sp, #40	; 0x28
 80048cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80048ce:	2300      	movs	r3, #0
 80048d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80048d2:	f000 fac3 	bl	8004e5c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80048d6:	4b1c      	ldr	r3, [pc, #112]	; (8004948 <xTimerCreateTimerTask+0x80>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d021      	beq.n	8004922 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80048de:	2300      	movs	r3, #0
 80048e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80048e2:	2300      	movs	r3, #0
 80048e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80048e6:	1d3a      	adds	r2, r7, #4
 80048e8:	f107 0108 	add.w	r1, r7, #8
 80048ec:	f107 030c 	add.w	r3, r7, #12
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7fe fb67 	bl	8002fc4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80048f6:	6879      	ldr	r1, [r7, #4]
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	9202      	str	r2, [sp, #8]
 80048fe:	9301      	str	r3, [sp, #4]
 8004900:	2302      	movs	r3, #2
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	2300      	movs	r3, #0
 8004906:	460a      	mov	r2, r1
 8004908:	4910      	ldr	r1, [pc, #64]	; (800494c <xTimerCreateTimerTask+0x84>)
 800490a:	4811      	ldr	r0, [pc, #68]	; (8004950 <xTimerCreateTimerTask+0x88>)
 800490c:	f7ff f8f8 	bl	8003b00 <xTaskCreateStatic>
 8004910:	4602      	mov	r2, r0
 8004912:	4b10      	ldr	r3, [pc, #64]	; (8004954 <xTimerCreateTimerTask+0x8c>)
 8004914:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004916:	4b0f      	ldr	r3, [pc, #60]	; (8004954 <xTimerCreateTimerTask+0x8c>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800491e:	2301      	movs	r3, #1
 8004920:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d109      	bne.n	800493c <xTimerCreateTimerTask+0x74>
 8004928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492c:	f383 8811 	msr	BASEPRI, r3
 8004930:	f3bf 8f6f 	isb	sy
 8004934:	f3bf 8f4f 	dsb	sy
 8004938:	613b      	str	r3, [r7, #16]
 800493a:	e7fe      	b.n	800493a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800493c:	697b      	ldr	r3, [r7, #20]
}
 800493e:	4618      	mov	r0, r3
 8004940:	3718      	adds	r7, #24
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	20000c18 	.word	0x20000c18
 800494c:	080056fc 	.word	0x080056fc
 8004950:	08004a71 	.word	0x08004a71
 8004954:	20000c1c 	.word	0x20000c1c

08004958 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b08a      	sub	sp, #40	; 0x28
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
 8004964:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004966:	2300      	movs	r3, #0
 8004968:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d109      	bne.n	8004984 <xTimerGenericCommand+0x2c>
 8004970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004974:	f383 8811 	msr	BASEPRI, r3
 8004978:	f3bf 8f6f 	isb	sy
 800497c:	f3bf 8f4f 	dsb	sy
 8004980:	623b      	str	r3, [r7, #32]
 8004982:	e7fe      	b.n	8004982 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004984:	4b19      	ldr	r3, [pc, #100]	; (80049ec <xTimerGenericCommand+0x94>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d02a      	beq.n	80049e2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	2b05      	cmp	r3, #5
 800499c:	dc18      	bgt.n	80049d0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800499e:	f7ff feb5 	bl	800470c <xTaskGetSchedulerState>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d109      	bne.n	80049bc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80049a8:	4b10      	ldr	r3, [pc, #64]	; (80049ec <xTimerGenericCommand+0x94>)
 80049aa:	6818      	ldr	r0, [r3, #0]
 80049ac:	f107 0110 	add.w	r1, r7, #16
 80049b0:	2300      	movs	r3, #0
 80049b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049b4:	f7fe fcce 	bl	8003354 <xQueueGenericSend>
 80049b8:	6278      	str	r0, [r7, #36]	; 0x24
 80049ba:	e012      	b.n	80049e2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80049bc:	4b0b      	ldr	r3, [pc, #44]	; (80049ec <xTimerGenericCommand+0x94>)
 80049be:	6818      	ldr	r0, [r3, #0]
 80049c0:	f107 0110 	add.w	r1, r7, #16
 80049c4:	2300      	movs	r3, #0
 80049c6:	2200      	movs	r2, #0
 80049c8:	f7fe fcc4 	bl	8003354 <xQueueGenericSend>
 80049cc:	6278      	str	r0, [r7, #36]	; 0x24
 80049ce:	e008      	b.n	80049e2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80049d0:	4b06      	ldr	r3, [pc, #24]	; (80049ec <xTimerGenericCommand+0x94>)
 80049d2:	6818      	ldr	r0, [r3, #0]
 80049d4:	f107 0110 	add.w	r1, r7, #16
 80049d8:	2300      	movs	r3, #0
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	f7fe fdb4 	bl	8003548 <xQueueGenericSendFromISR>
 80049e0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3728      	adds	r7, #40	; 0x28
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	20000c18 	.word	0x20000c18

080049f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b088      	sub	sp, #32
 80049f4:	af02      	add	r7, sp, #8
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049fa:	4b1c      	ldr	r3, [pc, #112]	; (8004a6c <prvProcessExpiredTimer+0x7c>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	3304      	adds	r3, #4
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7fe fb7b 	bl	8003104 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	69db      	ldr	r3, [r3, #28]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d121      	bne.n	8004a5a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	699a      	ldr	r2, [r3, #24]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	18d1      	adds	r1, r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	6978      	ldr	r0, [r7, #20]
 8004a24:	f000 f8c8 	bl	8004bb8 <prvInsertTimerInActiveList>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d015      	beq.n	8004a5a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a2e:	2300      	movs	r3, #0
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	2300      	movs	r3, #0
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	2100      	movs	r1, #0
 8004a38:	6978      	ldr	r0, [r7, #20]
 8004a3a:	f7ff ff8d 	bl	8004958 <xTimerGenericCommand>
 8004a3e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d109      	bne.n	8004a5a <prvProcessExpiredTimer+0x6a>
 8004a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4a:	f383 8811 	msr	BASEPRI, r3
 8004a4e:	f3bf 8f6f 	isb	sy
 8004a52:	f3bf 8f4f 	dsb	sy
 8004a56:	60fb      	str	r3, [r7, #12]
 8004a58:	e7fe      	b.n	8004a58 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5e:	6978      	ldr	r0, [r7, #20]
 8004a60:	4798      	blx	r3
}
 8004a62:	bf00      	nop
 8004a64:	3718      	adds	r7, #24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	20000c10 	.word	0x20000c10

08004a70 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a78:	f107 0308 	add.w	r3, r7, #8
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 f857 	bl	8004b30 <prvGetNextExpireTime>
 8004a82:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	4619      	mov	r1, r3
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f000 f803 	bl	8004a94 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004a8e:	f000 f8d5 	bl	8004c3c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a92:	e7f1      	b.n	8004a78 <prvTimerTask+0x8>

08004a94 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004a9e:	f7ff fa5b 	bl	8003f58 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004aa2:	f107 0308 	add.w	r3, r7, #8
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 f866 	bl	8004b78 <prvSampleTimeNow>
 8004aac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d130      	bne.n	8004b16 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10a      	bne.n	8004ad0 <prvProcessTimerOrBlockTask+0x3c>
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d806      	bhi.n	8004ad0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004ac2:	f7ff fa57 	bl	8003f74 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004ac6:	68f9      	ldr	r1, [r7, #12]
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f7ff ff91 	bl	80049f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004ace:	e024      	b.n	8004b1a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d008      	beq.n	8004ae8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004ad6:	4b13      	ldr	r3, [pc, #76]	; (8004b24 <prvProcessTimerOrBlockTask+0x90>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	bf0c      	ite	eq
 8004ae0:	2301      	moveq	r3, #1
 8004ae2:	2300      	movne	r3, #0
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004ae8:	4b0f      	ldr	r3, [pc, #60]	; (8004b28 <prvProcessTimerOrBlockTask+0x94>)
 8004aea:	6818      	ldr	r0, [r3, #0]
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	4619      	mov	r1, r3
 8004af6:	f7fe ffcf 	bl	8003a98 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004afa:	f7ff fa3b 	bl	8003f74 <xTaskResumeAll>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d10a      	bne.n	8004b1a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004b04:	4b09      	ldr	r3, [pc, #36]	; (8004b2c <prvProcessTimerOrBlockTask+0x98>)
 8004b06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b0a:	601a      	str	r2, [r3, #0]
 8004b0c:	f3bf 8f4f 	dsb	sy
 8004b10:	f3bf 8f6f 	isb	sy
}
 8004b14:	e001      	b.n	8004b1a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004b16:	f7ff fa2d 	bl	8003f74 <xTaskResumeAll>
}
 8004b1a:	bf00      	nop
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	20000c14 	.word	0x20000c14
 8004b28:	20000c18 	.word	0x20000c18
 8004b2c:	e000ed04 	.word	0xe000ed04

08004b30 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004b38:	4b0e      	ldr	r3, [pc, #56]	; (8004b74 <prvGetNextExpireTime+0x44>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	bf0c      	ite	eq
 8004b42:	2301      	moveq	r3, #1
 8004b44:	2300      	movne	r3, #0
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	461a      	mov	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d105      	bne.n	8004b62 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b56:	4b07      	ldr	r3, [pc, #28]	; (8004b74 <prvGetNextExpireTime+0x44>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	e001      	b.n	8004b66 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004b62:	2300      	movs	r3, #0
 8004b64:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004b66:	68fb      	ldr	r3, [r7, #12]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bc80      	pop	{r7}
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	20000c10 	.word	0x20000c10

08004b78 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004b80:	f7ff fa94 	bl	80040ac <xTaskGetTickCount>
 8004b84:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004b86:	4b0b      	ldr	r3, [pc, #44]	; (8004bb4 <prvSampleTimeNow+0x3c>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d205      	bcs.n	8004b9c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004b90:	f000 f904 	bl	8004d9c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	e002      	b.n	8004ba2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004ba2:	4a04      	ldr	r2, [pc, #16]	; (8004bb4 <prvSampleTimeNow+0x3c>)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	20000c20 	.word	0x20000c20

08004bb8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
 8004bc4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d812      	bhi.n	8004c04 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	1ad2      	subs	r2, r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d302      	bcc.n	8004bf2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004bec:	2301      	movs	r3, #1
 8004bee:	617b      	str	r3, [r7, #20]
 8004bf0:	e01b      	b.n	8004c2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004bf2:	4b10      	ldr	r3, [pc, #64]	; (8004c34 <prvInsertTimerInActiveList+0x7c>)
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	3304      	adds	r3, #4
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	4610      	mov	r0, r2
 8004bfe:	f7fe fa49 	bl	8003094 <vListInsert>
 8004c02:	e012      	b.n	8004c2a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d206      	bcs.n	8004c1a <prvInsertTimerInActiveList+0x62>
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d302      	bcc.n	8004c1a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004c14:	2301      	movs	r3, #1
 8004c16:	617b      	str	r3, [r7, #20]
 8004c18:	e007      	b.n	8004c2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c1a:	4b07      	ldr	r3, [pc, #28]	; (8004c38 <prvInsertTimerInActiveList+0x80>)
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	3304      	adds	r3, #4
 8004c22:	4619      	mov	r1, r3
 8004c24:	4610      	mov	r0, r2
 8004c26:	f7fe fa35 	bl	8003094 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004c2a:	697b      	ldr	r3, [r7, #20]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3718      	adds	r7, #24
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	20000c14 	.word	0x20000c14
 8004c38:	20000c10 	.word	0x20000c10

08004c3c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b08e      	sub	sp, #56	; 0x38
 8004c40:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c42:	e099      	b.n	8004d78 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	da17      	bge.n	8004c7a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004c4a:	1d3b      	adds	r3, r7, #4
 8004c4c:	3304      	adds	r3, #4
 8004c4e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d109      	bne.n	8004c6a <prvProcessReceivedCommands+0x2e>
 8004c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5a:	f383 8811 	msr	BASEPRI, r3
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f3bf 8f4f 	dsb	sy
 8004c66:	61fb      	str	r3, [r7, #28]
 8004c68:	e7fe      	b.n	8004c68 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c70:	6850      	ldr	r0, [r2, #4]
 8004c72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c74:	6892      	ldr	r2, [r2, #8]
 8004c76:	4611      	mov	r1, r2
 8004c78:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	db7a      	blt.n	8004d76 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d004      	beq.n	8004c96 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8e:	3304      	adds	r3, #4
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7fe fa37 	bl	8003104 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c96:	463b      	mov	r3, r7
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7ff ff6d 	bl	8004b78 <prvSampleTimeNow>
 8004c9e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b09      	cmp	r3, #9
 8004ca4:	d868      	bhi.n	8004d78 <prvProcessReceivedCommands+0x13c>
 8004ca6:	a201      	add	r2, pc, #4	; (adr r2, 8004cac <prvProcessReceivedCommands+0x70>)
 8004ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cac:	08004cd5 	.word	0x08004cd5
 8004cb0:	08004cd5 	.word	0x08004cd5
 8004cb4:	08004cd5 	.word	0x08004cd5
 8004cb8:	08004d79 	.word	0x08004d79
 8004cbc:	08004d2f 	.word	0x08004d2f
 8004cc0:	08004d65 	.word	0x08004d65
 8004cc4:	08004cd5 	.word	0x08004cd5
 8004cc8:	08004cd5 	.word	0x08004cd5
 8004ccc:	08004d79 	.word	0x08004d79
 8004cd0:	08004d2f 	.word	0x08004d2f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	18d1      	adds	r1, r2, r3
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ce2:	f7ff ff69 	bl	8004bb8 <prvInsertTimerInActiveList>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d045      	beq.n	8004d78 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cf2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d13d      	bne.n	8004d78 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	441a      	add	r2, r3
 8004d04:	2300      	movs	r3, #0
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	2300      	movs	r3, #0
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d0e:	f7ff fe23 	bl	8004958 <xTimerGenericCommand>
 8004d12:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004d14:	6a3b      	ldr	r3, [r7, #32]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d12e      	bne.n	8004d78 <prvProcessReceivedCommands+0x13c>
 8004d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	61bb      	str	r3, [r7, #24]
 8004d2c:	e7fe      	b.n	8004d2c <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d32:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d109      	bne.n	8004d50 <prvProcessReceivedCommands+0x114>
 8004d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d40:	f383 8811 	msr	BASEPRI, r3
 8004d44:	f3bf 8f6f 	isb	sy
 8004d48:	f3bf 8f4f 	dsb	sy
 8004d4c:	617b      	str	r3, [r7, #20]
 8004d4e:	e7fe      	b.n	8004d4e <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d52:	699a      	ldr	r2, [r3, #24]
 8004d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d56:	18d1      	adds	r1, r2, r3
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d5e:	f7ff ff2b 	bl	8004bb8 <prvInsertTimerInActiveList>
					break;
 8004d62:	e009      	b.n	8004d78 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d66:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d104      	bne.n	8004d78 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8004d6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d70:	f000 fb5a 	bl	8005428 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004d74:	e000      	b.n	8004d78 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004d76:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d78:	4b07      	ldr	r3, [pc, #28]	; (8004d98 <prvProcessReceivedCommands+0x15c>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	1d39      	adds	r1, r7, #4
 8004d7e:	2200      	movs	r2, #0
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7fe fc75 	bl	8003670 <xQueueReceive>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f47f af5b 	bne.w	8004c44 <prvProcessReceivedCommands+0x8>
	}
}
 8004d8e:	bf00      	nop
 8004d90:	3730      	adds	r7, #48	; 0x30
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	20000c18 	.word	0x20000c18

08004d9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b088      	sub	sp, #32
 8004da0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004da2:	e044      	b.n	8004e2e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004da4:	4b2b      	ldr	r3, [pc, #172]	; (8004e54 <prvSwitchTimerLists+0xb8>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004dae:	4b29      	ldr	r3, [pc, #164]	; (8004e54 <prvSwitchTimerLists+0xb8>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	3304      	adds	r3, #4
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7fe f9a1 	bl	8003104 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d12d      	bne.n	8004e2e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	4413      	add	r3, r2
 8004dda:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d90e      	bls.n	8004e02 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004df0:	4b18      	ldr	r3, [pc, #96]	; (8004e54 <prvSwitchTimerLists+0xb8>)
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	3304      	adds	r3, #4
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4610      	mov	r0, r2
 8004dfc:	f7fe f94a 	bl	8003094 <vListInsert>
 8004e00:	e015      	b.n	8004e2e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e02:	2300      	movs	r3, #0
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	2300      	movs	r3, #0
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f7ff fda3 	bl	8004958 <xTimerGenericCommand>
 8004e12:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d109      	bne.n	8004e2e <prvSwitchTimerLists+0x92>
 8004e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1e:	f383 8811 	msr	BASEPRI, r3
 8004e22:	f3bf 8f6f 	isb	sy
 8004e26:	f3bf 8f4f 	dsb	sy
 8004e2a:	603b      	str	r3, [r7, #0]
 8004e2c:	e7fe      	b.n	8004e2c <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e2e:	4b09      	ldr	r3, [pc, #36]	; (8004e54 <prvSwitchTimerLists+0xb8>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1b5      	bne.n	8004da4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004e38:	4b06      	ldr	r3, [pc, #24]	; (8004e54 <prvSwitchTimerLists+0xb8>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004e3e:	4b06      	ldr	r3, [pc, #24]	; (8004e58 <prvSwitchTimerLists+0xbc>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a04      	ldr	r2, [pc, #16]	; (8004e54 <prvSwitchTimerLists+0xb8>)
 8004e44:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004e46:	4a04      	ldr	r2, [pc, #16]	; (8004e58 <prvSwitchTimerLists+0xbc>)
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	6013      	str	r3, [r2, #0]
}
 8004e4c:	bf00      	nop
 8004e4e:	3718      	adds	r7, #24
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	20000c10 	.word	0x20000c10
 8004e58:	20000c14 	.word	0x20000c14

08004e5c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004e62:	f000 f929 	bl	80050b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004e66:	4b15      	ldr	r3, [pc, #84]	; (8004ebc <prvCheckForValidListAndQueue+0x60>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d120      	bne.n	8004eb0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004e6e:	4814      	ldr	r0, [pc, #80]	; (8004ec0 <prvCheckForValidListAndQueue+0x64>)
 8004e70:	f7fe f8c2 	bl	8002ff8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004e74:	4813      	ldr	r0, [pc, #76]	; (8004ec4 <prvCheckForValidListAndQueue+0x68>)
 8004e76:	f7fe f8bf 	bl	8002ff8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004e7a:	4b13      	ldr	r3, [pc, #76]	; (8004ec8 <prvCheckForValidListAndQueue+0x6c>)
 8004e7c:	4a10      	ldr	r2, [pc, #64]	; (8004ec0 <prvCheckForValidListAndQueue+0x64>)
 8004e7e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004e80:	4b12      	ldr	r3, [pc, #72]	; (8004ecc <prvCheckForValidListAndQueue+0x70>)
 8004e82:	4a10      	ldr	r2, [pc, #64]	; (8004ec4 <prvCheckForValidListAndQueue+0x68>)
 8004e84:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004e86:	2300      	movs	r3, #0
 8004e88:	9300      	str	r3, [sp, #0]
 8004e8a:	4b11      	ldr	r3, [pc, #68]	; (8004ed0 <prvCheckForValidListAndQueue+0x74>)
 8004e8c:	4a11      	ldr	r2, [pc, #68]	; (8004ed4 <prvCheckForValidListAndQueue+0x78>)
 8004e8e:	2110      	movs	r1, #16
 8004e90:	200a      	movs	r0, #10
 8004e92:	f7fe f9c9 	bl	8003228 <xQueueGenericCreateStatic>
 8004e96:	4602      	mov	r2, r0
 8004e98:	4b08      	ldr	r3, [pc, #32]	; (8004ebc <prvCheckForValidListAndQueue+0x60>)
 8004e9a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004e9c:	4b07      	ldr	r3, [pc, #28]	; (8004ebc <prvCheckForValidListAndQueue+0x60>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d005      	beq.n	8004eb0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004ea4:	4b05      	ldr	r3, [pc, #20]	; (8004ebc <prvCheckForValidListAndQueue+0x60>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	490b      	ldr	r1, [pc, #44]	; (8004ed8 <prvCheckForValidListAndQueue+0x7c>)
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7fe fdcc 	bl	8003a48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004eb0:	f000 f930 	bl	8005114 <vPortExitCritical>
}
 8004eb4:	bf00      	nop
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	20000c18 	.word	0x20000c18
 8004ec0:	20000be8 	.word	0x20000be8
 8004ec4:	20000bfc 	.word	0x20000bfc
 8004ec8:	20000c10 	.word	0x20000c10
 8004ecc:	20000c14 	.word	0x20000c14
 8004ed0:	20000cc4 	.word	0x20000cc4
 8004ed4:	20000c24 	.word	0x20000c24
 8004ed8:	08005704 	.word	0x08005704

08004edc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	3b04      	subs	r3, #4
 8004eec:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ef4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	3b04      	subs	r3, #4
 8004efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	f023 0201 	bic.w	r2, r3, #1
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	3b04      	subs	r3, #4
 8004f0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f0c:	4a08      	ldr	r2, [pc, #32]	; (8004f30 <pxPortInitialiseStack+0x54>)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	3b14      	subs	r3, #20
 8004f16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	3b20      	subs	r3, #32
 8004f22:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f24:	68fb      	ldr	r3, [r7, #12]
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bc80      	pop	{r7}
 8004f2e:	4770      	bx	lr
 8004f30:	08004f35 	.word	0x08004f35

08004f34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f3e:	4b10      	ldr	r3, [pc, #64]	; (8004f80 <prvTaskExitError+0x4c>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f46:	d009      	beq.n	8004f5c <prvTaskExitError+0x28>
 8004f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4c:	f383 8811 	msr	BASEPRI, r3
 8004f50:	f3bf 8f6f 	isb	sy
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	60fb      	str	r3, [r7, #12]
 8004f5a:	e7fe      	b.n	8004f5a <prvTaskExitError+0x26>
 8004f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f60:	f383 8811 	msr	BASEPRI, r3
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f6e:	bf00      	nop
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d0fc      	beq.n	8004f70 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f76:	bf00      	nop
 8004f78:	3714      	adds	r7, #20
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bc80      	pop	{r7}
 8004f7e:	4770      	bx	lr
 8004f80:	2000000c 	.word	0x2000000c
	...

08004f90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f90:	4b07      	ldr	r3, [pc, #28]	; (8004fb0 <pxCurrentTCBConst2>)
 8004f92:	6819      	ldr	r1, [r3, #0]
 8004f94:	6808      	ldr	r0, [r1, #0]
 8004f96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004f9a:	f380 8809 	msr	PSP, r0
 8004f9e:	f3bf 8f6f 	isb	sy
 8004fa2:	f04f 0000 	mov.w	r0, #0
 8004fa6:	f380 8811 	msr	BASEPRI, r0
 8004faa:	f04e 0e0d 	orr.w	lr, lr, #13
 8004fae:	4770      	bx	lr

08004fb0 <pxCurrentTCBConst2>:
 8004fb0:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004fb4:	bf00      	nop
 8004fb6:	bf00      	nop

08004fb8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004fb8:	4806      	ldr	r0, [pc, #24]	; (8004fd4 <prvPortStartFirstTask+0x1c>)
 8004fba:	6800      	ldr	r0, [r0, #0]
 8004fbc:	6800      	ldr	r0, [r0, #0]
 8004fbe:	f380 8808 	msr	MSP, r0
 8004fc2:	b662      	cpsie	i
 8004fc4:	b661      	cpsie	f
 8004fc6:	f3bf 8f4f 	dsb	sy
 8004fca:	f3bf 8f6f 	isb	sy
 8004fce:	df00      	svc	0
 8004fd0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004fd2:	bf00      	nop
 8004fd4:	e000ed08 	.word	0xe000ed08

08004fd8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004fde:	4b31      	ldr	r3, [pc, #196]	; (80050a4 <xPortStartScheduler+0xcc>)
 8004fe0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	22ff      	movs	r2, #255	; 0xff
 8004fee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ff8:	78fb      	ldrb	r3, [r7, #3]
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005000:	b2da      	uxtb	r2, r3
 8005002:	4b29      	ldr	r3, [pc, #164]	; (80050a8 <xPortStartScheduler+0xd0>)
 8005004:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005006:	4b29      	ldr	r3, [pc, #164]	; (80050ac <xPortStartScheduler+0xd4>)
 8005008:	2207      	movs	r2, #7
 800500a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800500c:	e009      	b.n	8005022 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800500e:	4b27      	ldr	r3, [pc, #156]	; (80050ac <xPortStartScheduler+0xd4>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	3b01      	subs	r3, #1
 8005014:	4a25      	ldr	r2, [pc, #148]	; (80050ac <xPortStartScheduler+0xd4>)
 8005016:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005018:	78fb      	ldrb	r3, [r7, #3]
 800501a:	b2db      	uxtb	r3, r3
 800501c:	005b      	lsls	r3, r3, #1
 800501e:	b2db      	uxtb	r3, r3
 8005020:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005022:	78fb      	ldrb	r3, [r7, #3]
 8005024:	b2db      	uxtb	r3, r3
 8005026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800502a:	2b80      	cmp	r3, #128	; 0x80
 800502c:	d0ef      	beq.n	800500e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800502e:	4b1f      	ldr	r3, [pc, #124]	; (80050ac <xPortStartScheduler+0xd4>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f1c3 0307 	rsb	r3, r3, #7
 8005036:	2b04      	cmp	r3, #4
 8005038:	d009      	beq.n	800504e <xPortStartScheduler+0x76>
 800503a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503e:	f383 8811 	msr	BASEPRI, r3
 8005042:	f3bf 8f6f 	isb	sy
 8005046:	f3bf 8f4f 	dsb	sy
 800504a:	60bb      	str	r3, [r7, #8]
 800504c:	e7fe      	b.n	800504c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800504e:	4b17      	ldr	r3, [pc, #92]	; (80050ac <xPortStartScheduler+0xd4>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	021b      	lsls	r3, r3, #8
 8005054:	4a15      	ldr	r2, [pc, #84]	; (80050ac <xPortStartScheduler+0xd4>)
 8005056:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005058:	4b14      	ldr	r3, [pc, #80]	; (80050ac <xPortStartScheduler+0xd4>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005060:	4a12      	ldr	r2, [pc, #72]	; (80050ac <xPortStartScheduler+0xd4>)
 8005062:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	b2da      	uxtb	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800506c:	4b10      	ldr	r3, [pc, #64]	; (80050b0 <xPortStartScheduler+0xd8>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a0f      	ldr	r2, [pc, #60]	; (80050b0 <xPortStartScheduler+0xd8>)
 8005072:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005076:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005078:	4b0d      	ldr	r3, [pc, #52]	; (80050b0 <xPortStartScheduler+0xd8>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a0c      	ldr	r2, [pc, #48]	; (80050b0 <xPortStartScheduler+0xd8>)
 800507e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005082:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005084:	f000 f8b0 	bl	80051e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005088:	4b0a      	ldr	r3, [pc, #40]	; (80050b4 <xPortStartScheduler+0xdc>)
 800508a:	2200      	movs	r2, #0
 800508c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800508e:	f7ff ff93 	bl	8004fb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005092:	f7ff f8d7 	bl	8004244 <vTaskSwitchContext>
	prvTaskExitError();
 8005096:	f7ff ff4d 	bl	8004f34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	e000e400 	.word	0xe000e400
 80050a8:	20000d14 	.word	0x20000d14
 80050ac:	20000d18 	.word	0x20000d18
 80050b0:	e000ed20 	.word	0xe000ed20
 80050b4:	2000000c 	.word	0x2000000c

080050b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80050d0:	4b0e      	ldr	r3, [pc, #56]	; (800510c <vPortEnterCritical+0x54>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	3301      	adds	r3, #1
 80050d6:	4a0d      	ldr	r2, [pc, #52]	; (800510c <vPortEnterCritical+0x54>)
 80050d8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80050da:	4b0c      	ldr	r3, [pc, #48]	; (800510c <vPortEnterCritical+0x54>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d10e      	bne.n	8005100 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80050e2:	4b0b      	ldr	r3, [pc, #44]	; (8005110 <vPortEnterCritical+0x58>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d009      	beq.n	8005100 <vPortEnterCritical+0x48>
 80050ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f0:	f383 8811 	msr	BASEPRI, r3
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	603b      	str	r3, [r7, #0]
 80050fe:	e7fe      	b.n	80050fe <vPortEnterCritical+0x46>
	}
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	bc80      	pop	{r7}
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	2000000c 	.word	0x2000000c
 8005110:	e000ed04 	.word	0xe000ed04

08005114 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800511a:	4b10      	ldr	r3, [pc, #64]	; (800515c <vPortExitCritical+0x48>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d109      	bne.n	8005136 <vPortExitCritical+0x22>
 8005122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005126:	f383 8811 	msr	BASEPRI, r3
 800512a:	f3bf 8f6f 	isb	sy
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	607b      	str	r3, [r7, #4]
 8005134:	e7fe      	b.n	8005134 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005136:	4b09      	ldr	r3, [pc, #36]	; (800515c <vPortExitCritical+0x48>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	3b01      	subs	r3, #1
 800513c:	4a07      	ldr	r2, [pc, #28]	; (800515c <vPortExitCritical+0x48>)
 800513e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005140:	4b06      	ldr	r3, [pc, #24]	; (800515c <vPortExitCritical+0x48>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d104      	bne.n	8005152 <vPortExitCritical+0x3e>
 8005148:	2300      	movs	r3, #0
 800514a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	bc80      	pop	{r7}
 800515a:	4770      	bx	lr
 800515c:	2000000c 	.word	0x2000000c

08005160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005160:	f3ef 8009 	mrs	r0, PSP
 8005164:	f3bf 8f6f 	isb	sy
 8005168:	4b0d      	ldr	r3, [pc, #52]	; (80051a0 <pxCurrentTCBConst>)
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005170:	6010      	str	r0, [r2, #0]
 8005172:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005176:	f04f 0050 	mov.w	r0, #80	; 0x50
 800517a:	f380 8811 	msr	BASEPRI, r0
 800517e:	f7ff f861 	bl	8004244 <vTaskSwitchContext>
 8005182:	f04f 0000 	mov.w	r0, #0
 8005186:	f380 8811 	msr	BASEPRI, r0
 800518a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800518e:	6819      	ldr	r1, [r3, #0]
 8005190:	6808      	ldr	r0, [r1, #0]
 8005192:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005196:	f380 8809 	msr	PSP, r0
 800519a:	f3bf 8f6f 	isb	sy
 800519e:	4770      	bx	lr

080051a0 <pxCurrentTCBConst>:
 80051a0:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80051a4:	bf00      	nop
 80051a6:	bf00      	nop

080051a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
	__asm volatile
 80051ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80051c0:	f7fe ff82 	bl	80040c8 <xTaskIncrementTick>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d003      	beq.n	80051d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80051ca:	4b06      	ldr	r3, [pc, #24]	; (80051e4 <SysTick_Handler+0x3c>)
 80051cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051d0:	601a      	str	r2, [r3, #0]
 80051d2:	2300      	movs	r3, #0
 80051d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80051dc:	bf00      	nop
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	e000ed04 	.word	0xe000ed04

080051e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80051e8:	b480      	push	{r7}
 80051ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80051ec:	4b0a      	ldr	r3, [pc, #40]	; (8005218 <vPortSetupTimerInterrupt+0x30>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80051f2:	4b0a      	ldr	r3, [pc, #40]	; (800521c <vPortSetupTimerInterrupt+0x34>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80051f8:	4b09      	ldr	r3, [pc, #36]	; (8005220 <vPortSetupTimerInterrupt+0x38>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a09      	ldr	r2, [pc, #36]	; (8005224 <vPortSetupTimerInterrupt+0x3c>)
 80051fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005202:	099b      	lsrs	r3, r3, #6
 8005204:	4a08      	ldr	r2, [pc, #32]	; (8005228 <vPortSetupTimerInterrupt+0x40>)
 8005206:	3b01      	subs	r3, #1
 8005208:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800520a:	4b03      	ldr	r3, [pc, #12]	; (8005218 <vPortSetupTimerInterrupt+0x30>)
 800520c:	2207      	movs	r2, #7
 800520e:	601a      	str	r2, [r3, #0]
}
 8005210:	bf00      	nop
 8005212:	46bd      	mov	sp, r7
 8005214:	bc80      	pop	{r7}
 8005216:	4770      	bx	lr
 8005218:	e000e010 	.word	0xe000e010
 800521c:	e000e018 	.word	0xe000e018
 8005220:	20000000 	.word	0x20000000
 8005224:	10624dd3 	.word	0x10624dd3
 8005228:	e000e014 	.word	0xe000e014

0800522c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005232:	f3ef 8305 	mrs	r3, IPSR
 8005236:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2b0f      	cmp	r3, #15
 800523c:	d913      	bls.n	8005266 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800523e:	4a15      	ldr	r2, [pc, #84]	; (8005294 <vPortValidateInterruptPriority+0x68>)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	4413      	add	r3, r2
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005248:	4b13      	ldr	r3, [pc, #76]	; (8005298 <vPortValidateInterruptPriority+0x6c>)
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	7afa      	ldrb	r2, [r7, #11]
 800524e:	429a      	cmp	r2, r3
 8005250:	d209      	bcs.n	8005266 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005256:	f383 8811 	msr	BASEPRI, r3
 800525a:	f3bf 8f6f 	isb	sy
 800525e:	f3bf 8f4f 	dsb	sy
 8005262:	607b      	str	r3, [r7, #4]
 8005264:	e7fe      	b.n	8005264 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005266:	4b0d      	ldr	r3, [pc, #52]	; (800529c <vPortValidateInterruptPriority+0x70>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800526e:	4b0c      	ldr	r3, [pc, #48]	; (80052a0 <vPortValidateInterruptPriority+0x74>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	429a      	cmp	r2, r3
 8005274:	d909      	bls.n	800528a <vPortValidateInterruptPriority+0x5e>
 8005276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527a:	f383 8811 	msr	BASEPRI, r3
 800527e:	f3bf 8f6f 	isb	sy
 8005282:	f3bf 8f4f 	dsb	sy
 8005286:	603b      	str	r3, [r7, #0]
 8005288:	e7fe      	b.n	8005288 <vPortValidateInterruptPriority+0x5c>
	}
 800528a:	bf00      	nop
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	bc80      	pop	{r7}
 8005292:	4770      	bx	lr
 8005294:	e000e3f0 	.word	0xe000e3f0
 8005298:	20000d14 	.word	0x20000d14
 800529c:	e000ed0c 	.word	0xe000ed0c
 80052a0:	20000d18 	.word	0x20000d18

080052a4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b08a      	sub	sp, #40	; 0x28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80052ac:	2300      	movs	r3, #0
 80052ae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80052b0:	f7fe fe52 	bl	8003f58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80052b4:	4b57      	ldr	r3, [pc, #348]	; (8005414 <pvPortMalloc+0x170>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d101      	bne.n	80052c0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80052bc:	f000 f90c 	bl	80054d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80052c0:	4b55      	ldr	r3, [pc, #340]	; (8005418 <pvPortMalloc+0x174>)
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4013      	ands	r3, r2
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f040 808c 	bne.w	80053e6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d01c      	beq.n	800530e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80052d4:	2208      	movs	r2, #8
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4413      	add	r3, r2
 80052da:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f003 0307 	and.w	r3, r3, #7
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d013      	beq.n	800530e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f023 0307 	bic.w	r3, r3, #7
 80052ec:	3308      	adds	r3, #8
 80052ee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f003 0307 	and.w	r3, r3, #7
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d009      	beq.n	800530e <pvPortMalloc+0x6a>
 80052fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fe:	f383 8811 	msr	BASEPRI, r3
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	617b      	str	r3, [r7, #20]
 800530c:	e7fe      	b.n	800530c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d068      	beq.n	80053e6 <pvPortMalloc+0x142>
 8005314:	4b41      	ldr	r3, [pc, #260]	; (800541c <pvPortMalloc+0x178>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	429a      	cmp	r2, r3
 800531c:	d863      	bhi.n	80053e6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800531e:	4b40      	ldr	r3, [pc, #256]	; (8005420 <pvPortMalloc+0x17c>)
 8005320:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005322:	4b3f      	ldr	r3, [pc, #252]	; (8005420 <pvPortMalloc+0x17c>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005328:	e004      	b.n	8005334 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	429a      	cmp	r2, r3
 800533c:	d903      	bls.n	8005346 <pvPortMalloc+0xa2>
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1f1      	bne.n	800532a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005346:	4b33      	ldr	r3, [pc, #204]	; (8005414 <pvPortMalloc+0x170>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800534c:	429a      	cmp	r2, r3
 800534e:	d04a      	beq.n	80053e6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2208      	movs	r2, #8
 8005356:	4413      	add	r3, r2
 8005358:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	6a3b      	ldr	r3, [r7, #32]
 8005360:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	1ad2      	subs	r2, r2, r3
 800536a:	2308      	movs	r3, #8
 800536c:	005b      	lsls	r3, r3, #1
 800536e:	429a      	cmp	r2, r3
 8005370:	d91e      	bls.n	80053b0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4413      	add	r3, r2
 8005378:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	f003 0307 	and.w	r3, r3, #7
 8005380:	2b00      	cmp	r3, #0
 8005382:	d009      	beq.n	8005398 <pvPortMalloc+0xf4>
 8005384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005388:	f383 8811 	msr	BASEPRI, r3
 800538c:	f3bf 8f6f 	isb	sy
 8005390:	f3bf 8f4f 	dsb	sy
 8005394:	613b      	str	r3, [r7, #16]
 8005396:	e7fe      	b.n	8005396 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	1ad2      	subs	r2, r2, r3
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80053aa:	69b8      	ldr	r0, [r7, #24]
 80053ac:	f000 f8f6 	bl	800559c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80053b0:	4b1a      	ldr	r3, [pc, #104]	; (800541c <pvPortMalloc+0x178>)
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	4a18      	ldr	r2, [pc, #96]	; (800541c <pvPortMalloc+0x178>)
 80053bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80053be:	4b17      	ldr	r3, [pc, #92]	; (800541c <pvPortMalloc+0x178>)
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	4b18      	ldr	r3, [pc, #96]	; (8005424 <pvPortMalloc+0x180>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d203      	bcs.n	80053d2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80053ca:	4b14      	ldr	r3, [pc, #80]	; (800541c <pvPortMalloc+0x178>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a15      	ldr	r2, [pc, #84]	; (8005424 <pvPortMalloc+0x180>)
 80053d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	4b10      	ldr	r3, [pc, #64]	; (8005418 <pvPortMalloc+0x174>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	431a      	orrs	r2, r3
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e2:	2200      	movs	r2, #0
 80053e4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80053e6:	f7fe fdc5 	bl	8003f74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	f003 0307 	and.w	r3, r3, #7
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d009      	beq.n	8005408 <pvPortMalloc+0x164>
 80053f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f8:	f383 8811 	msr	BASEPRI, r3
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	e7fe      	b.n	8005406 <pvPortMalloc+0x162>
	return pvReturn;
 8005408:	69fb      	ldr	r3, [r7, #28]
}
 800540a:	4618      	mov	r0, r3
 800540c:	3728      	adds	r7, #40	; 0x28
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	20001924 	.word	0x20001924
 8005418:	20001930 	.word	0x20001930
 800541c:	20001928 	.word	0x20001928
 8005420:	2000191c 	.word	0x2000191c
 8005424:	2000192c 	.word	0x2000192c

08005428 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d046      	beq.n	80054c8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800543a:	2308      	movs	r3, #8
 800543c:	425b      	negs	r3, r3
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	4413      	add	r3, r2
 8005442:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	685a      	ldr	r2, [r3, #4]
 800544c:	4b20      	ldr	r3, [pc, #128]	; (80054d0 <vPortFree+0xa8>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4013      	ands	r3, r2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d109      	bne.n	800546a <vPortFree+0x42>
 8005456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545a:	f383 8811 	msr	BASEPRI, r3
 800545e:	f3bf 8f6f 	isb	sy
 8005462:	f3bf 8f4f 	dsb	sy
 8005466:	60fb      	str	r3, [r7, #12]
 8005468:	e7fe      	b.n	8005468 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d009      	beq.n	8005486 <vPortFree+0x5e>
 8005472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005476:	f383 8811 	msr	BASEPRI, r3
 800547a:	f3bf 8f6f 	isb	sy
 800547e:	f3bf 8f4f 	dsb	sy
 8005482:	60bb      	str	r3, [r7, #8]
 8005484:	e7fe      	b.n	8005484 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	4b11      	ldr	r3, [pc, #68]	; (80054d0 <vPortFree+0xa8>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4013      	ands	r3, r2
 8005490:	2b00      	cmp	r3, #0
 8005492:	d019      	beq.n	80054c8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d115      	bne.n	80054c8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	4b0b      	ldr	r3, [pc, #44]	; (80054d0 <vPortFree+0xa8>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	43db      	mvns	r3, r3
 80054a6:	401a      	ands	r2, r3
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80054ac:	f7fe fd54 	bl	8003f58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	685a      	ldr	r2, [r3, #4]
 80054b4:	4b07      	ldr	r3, [pc, #28]	; (80054d4 <vPortFree+0xac>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4413      	add	r3, r2
 80054ba:	4a06      	ldr	r2, [pc, #24]	; (80054d4 <vPortFree+0xac>)
 80054bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80054be:	6938      	ldr	r0, [r7, #16]
 80054c0:	f000 f86c 	bl	800559c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80054c4:	f7fe fd56 	bl	8003f74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80054c8:	bf00      	nop
 80054ca:	3718      	adds	r7, #24
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	20001930 	.word	0x20001930
 80054d4:	20001928 	.word	0x20001928

080054d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80054de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80054e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80054e4:	4b27      	ldr	r3, [pc, #156]	; (8005584 <prvHeapInit+0xac>)
 80054e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f003 0307 	and.w	r3, r3, #7
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00c      	beq.n	800550c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	3307      	adds	r3, #7
 80054f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f023 0307 	bic.w	r3, r3, #7
 80054fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	4a1f      	ldr	r2, [pc, #124]	; (8005584 <prvHeapInit+0xac>)
 8005508:	4413      	add	r3, r2
 800550a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005510:	4a1d      	ldr	r2, [pc, #116]	; (8005588 <prvHeapInit+0xb0>)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005516:	4b1c      	ldr	r3, [pc, #112]	; (8005588 <prvHeapInit+0xb0>)
 8005518:	2200      	movs	r2, #0
 800551a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	4413      	add	r3, r2
 8005522:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005524:	2208      	movs	r2, #8
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	1a9b      	subs	r3, r3, r2
 800552a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f023 0307 	bic.w	r3, r3, #7
 8005532:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4a15      	ldr	r2, [pc, #84]	; (800558c <prvHeapInit+0xb4>)
 8005538:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800553a:	4b14      	ldr	r3, [pc, #80]	; (800558c <prvHeapInit+0xb4>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2200      	movs	r2, #0
 8005540:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005542:	4b12      	ldr	r3, [pc, #72]	; (800558c <prvHeapInit+0xb4>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2200      	movs	r2, #0
 8005548:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	1ad2      	subs	r2, r2, r3
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005558:	4b0c      	ldr	r3, [pc, #48]	; (800558c <prvHeapInit+0xb4>)
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	4a0a      	ldr	r2, [pc, #40]	; (8005590 <prvHeapInit+0xb8>)
 8005566:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	4a09      	ldr	r2, [pc, #36]	; (8005594 <prvHeapInit+0xbc>)
 800556e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005570:	4b09      	ldr	r3, [pc, #36]	; (8005598 <prvHeapInit+0xc0>)
 8005572:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005576:	601a      	str	r2, [r3, #0]
}
 8005578:	bf00      	nop
 800557a:	3714      	adds	r7, #20
 800557c:	46bd      	mov	sp, r7
 800557e:	bc80      	pop	{r7}
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	20000d1c 	.word	0x20000d1c
 8005588:	2000191c 	.word	0x2000191c
 800558c:	20001924 	.word	0x20001924
 8005590:	2000192c 	.word	0x2000192c
 8005594:	20001928 	.word	0x20001928
 8005598:	20001930 	.word	0x20001930

0800559c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80055a4:	4b27      	ldr	r3, [pc, #156]	; (8005644 <prvInsertBlockIntoFreeList+0xa8>)
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	e002      	b.n	80055b0 <prvInsertBlockIntoFreeList+0x14>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d8f7      	bhi.n	80055aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	4413      	add	r3, r2
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d108      	bne.n	80055de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	685a      	ldr	r2, [r3, #4]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	441a      	add	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	441a      	add	r2, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d118      	bne.n	8005624 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	4b14      	ldr	r3, [pc, #80]	; (8005648 <prvInsertBlockIntoFreeList+0xac>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d00d      	beq.n	800561a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	441a      	add	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	601a      	str	r2, [r3, #0]
 8005618:	e008      	b.n	800562c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800561a:	4b0b      	ldr	r3, [pc, #44]	; (8005648 <prvInsertBlockIntoFreeList+0xac>)
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	601a      	str	r2, [r3, #0]
 8005622:	e003      	b.n	800562c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	429a      	cmp	r2, r3
 8005632:	d002      	beq.n	800563a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800563a:	bf00      	nop
 800563c:	3714      	adds	r7, #20
 800563e:	46bd      	mov	sp, r7
 8005640:	bc80      	pop	{r7}
 8005642:	4770      	bx	lr
 8005644:	2000191c 	.word	0x2000191c
 8005648:	20001924 	.word	0x20001924

0800564c <__libc_init_array>:
 800564c:	b570      	push	{r4, r5, r6, lr}
 800564e:	2500      	movs	r5, #0
 8005650:	4e0c      	ldr	r6, [pc, #48]	; (8005684 <__libc_init_array+0x38>)
 8005652:	4c0d      	ldr	r4, [pc, #52]	; (8005688 <__libc_init_array+0x3c>)
 8005654:	1ba4      	subs	r4, r4, r6
 8005656:	10a4      	asrs	r4, r4, #2
 8005658:	42a5      	cmp	r5, r4
 800565a:	d109      	bne.n	8005670 <__libc_init_array+0x24>
 800565c:	f000 f82e 	bl	80056bc <_init>
 8005660:	2500      	movs	r5, #0
 8005662:	4e0a      	ldr	r6, [pc, #40]	; (800568c <__libc_init_array+0x40>)
 8005664:	4c0a      	ldr	r4, [pc, #40]	; (8005690 <__libc_init_array+0x44>)
 8005666:	1ba4      	subs	r4, r4, r6
 8005668:	10a4      	asrs	r4, r4, #2
 800566a:	42a5      	cmp	r5, r4
 800566c:	d105      	bne.n	800567a <__libc_init_array+0x2e>
 800566e:	bd70      	pop	{r4, r5, r6, pc}
 8005670:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005674:	4798      	blx	r3
 8005676:	3501      	adds	r5, #1
 8005678:	e7ee      	b.n	8005658 <__libc_init_array+0xc>
 800567a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800567e:	4798      	blx	r3
 8005680:	3501      	adds	r5, #1
 8005682:	e7f2      	b.n	800566a <__libc_init_array+0x1e>
 8005684:	08005748 	.word	0x08005748
 8005688:	08005748 	.word	0x08005748
 800568c:	08005748 	.word	0x08005748
 8005690:	0800574c 	.word	0x0800574c

08005694 <memcpy>:
 8005694:	b510      	push	{r4, lr}
 8005696:	1e43      	subs	r3, r0, #1
 8005698:	440a      	add	r2, r1
 800569a:	4291      	cmp	r1, r2
 800569c:	d100      	bne.n	80056a0 <memcpy+0xc>
 800569e:	bd10      	pop	{r4, pc}
 80056a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056a8:	e7f7      	b.n	800569a <memcpy+0x6>

080056aa <memset>:
 80056aa:	4603      	mov	r3, r0
 80056ac:	4402      	add	r2, r0
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d100      	bne.n	80056b4 <memset+0xa>
 80056b2:	4770      	bx	lr
 80056b4:	f803 1b01 	strb.w	r1, [r3], #1
 80056b8:	e7f9      	b.n	80056ae <memset+0x4>
	...

080056bc <_init>:
 80056bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056be:	bf00      	nop
 80056c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056c2:	bc08      	pop	{r3}
 80056c4:	469e      	mov	lr, r3
 80056c6:	4770      	bx	lr

080056c8 <_fini>:
 80056c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ca:	bf00      	nop
 80056cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ce:	bc08      	pop	{r3}
 80056d0:	469e      	mov	lr, r3
 80056d2:	4770      	bx	lr
